Index: gui/wxpython/animation/anim.py
===================================================================
--- gui/wxpython/animation/anim.py	(revision 72985)
+++ gui/wxpython/animation/anim.py	(working copy)
@@ -15,7 +15,7 @@
 """
 
 import wx
-from utils import Orientation, ReplayMode
+from .utils import Orientation, ReplayMode
 from core.utils import _
 
 
Index: gui/wxpython/animation/dialogs.py
===================================================================
--- gui/wxpython/animation/dialogs.py	(revision 72985)
+++ gui/wxpython/animation/dialogs.py	(working copy)
@@ -39,7 +39,7 @@
 from core.utils import _
 from gui_core.gselect import Select
 from gui_core.widgets import FloatValidator
-from gui_core.wrap import SpinCtrl
+from gui_core.wrap import SpinCtrl, CheckBox, TextCtrl, RadioButton
 
 from animation.utils import TemporalMode, getRegisteredMaps, getNameAndLayer, getCpuCount
 from animation.data import AnimationData, AnimLayer
@@ -574,9 +574,9 @@
         gridSizer.Add(
             self.endRegion, pos=(1, 1),
             flag=wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
-        self.zoomRadio = wx.RadioButton(panel, label=_("Zoom value:"))
-        self.zoomRadio.SetToolTipString(_("N-S/E-W distances in map units used to "
-                                          "gradually reduce region."))
+        self.zoomRadio = RadioButton(panel, label=_("Zoom value:"))
+        self.zoomRadio.SetToolTip(_("N-S/E-W distances in map units used to "
+                                    "gradually reduce region."))
         gridSizer.Add(self.zoomRadio, pos=(2, 0), flag=wx.EXPAND)
 
         zoomSizer = wx.BoxSizer(wx.HORIZONTAL)
@@ -1296,12 +1296,12 @@
             parent=aviPanel,
             id=wx.ID_ANY,
             label=_("Video codec:"))
-        self.encodingText = wx.TextCtrl(
+        self.encodingText = TextCtrl(
             parent=aviPanel, id=wx.ID_ANY, value='mpeg4')
         optionsLabel = wx.StaticText(
             parent=aviPanel, label=_("Additional options:"))
-        self.optionsText = wx.TextCtrl(parent=aviPanel)
-        self.optionsText.SetToolTipString(
+        self.optionsText = TextCtrl(parent=aviPanel)
+        self.optionsText.SetToolTip(
             _(
                 "Consider adding '-sameq' or '-qscale 1' "
                 "if not satisfied with video quality. "
@@ -2021,9 +2021,9 @@
                       flag=wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_LEFT)
 
         row += 2
-        noDataCheck = wx.CheckBox(
+        noDataCheck = CheckBox(
             panel, label=_("Display instances with no data"))
-        noDataCheck.SetToolTipString(
+        noDataCheck.SetToolTip(
             _(
                 "When animating instant-based data which have irregular timestamps "
                 "you can display 'no data frame' (checked option) or "
Index: gui/wxpython/animation/frame.py
===================================================================
--- gui/wxpython/animation/frame.py	(revision 72985)
+++ gui/wxpython/animation/frame.py	(working copy)
@@ -22,6 +22,7 @@
 import wx
 import wx.aui
 import tempfile
+import six
 
 import grass.script as gcore
 import grass.temporal as tgis
@@ -136,7 +137,7 @@
                           Name('animPanel').CentrePane().CaptionVisible(False).PaneBorder(False).
                           Floatable(False).BestSize((-1, -1)).
                           CloseButton(False).DestroyOnClose(True).Layer(0))
-        for name, slider in self.animationSliders.iteritems():
+        for name, slider in six.iteritems(self.animationSliders):
             self._mgr.AddPane(
                 slider,
                 wx.aui.AuiPaneInfo().PaneBorder(False).Name(
Index: gui/wxpython/animation/mapwindow.py
===================================================================
--- gui/wxpython/animation/mapwindow.py	(revision 72985)
+++ gui/wxpython/animation/mapwindow.py	(working copy)
@@ -18,7 +18,7 @@
 import wx
 from core.debug import Debug
 from gui_core.wrap import PseudoDC, EmptyBitmap
-from utils import ComputeScaledRect
+from .utils import ComputeScaledRect
 
 
 class BufferedWindow(wx.Window):
Index: gui/wxpython/animation/utils.py
===================================================================
--- gui/wxpython/animation/utils.py	(revision 72985)
+++ gui/wxpython/animation/utils.py	(working copy)
@@ -20,6 +20,7 @@
 import os
 import wx
 import hashlib
+import six
 from multiprocessing import cpu_count
 try:
     from PIL import Image
@@ -97,7 +98,7 @@
                 raise GException(_("Map <%s> not found.") % name)
         else:
             found = False
-            for mapset, mapNames in mapDict.iteritems():
+            for mapset, mapNames in six.iteritems(mapDict):
                 if name in mapNames:
                     found = True
                     newNames.append(name + "@" + mapset)
Index: gui/wxpython/core/gcmd.py
===================================================================
--- gui/wxpython/core/gcmd.py	(revision 72985)
+++ gui/wxpython/core/gcmd.py	(working copy)
@@ -703,8 +703,8 @@
     :return: returncode, stdout, messages (read == True and getErrorMsg == True)
     :return: stdout, stderr
     """
-    cmdString = ' '.join(grass.make_command(prog, flags, overwrite,
-                                            quiet, verbose, **kwargs))
+    cmdString = b' '.join(grass.make_command(prog, flags, overwrite,
+                                             quiet, verbose, **kwargs))
 
     Debug.msg(1, "gcmd.RunCommand(): %s" % cmdString)
 
Index: gui/wxpython/core/gconsole.py
===================================================================
--- gui/wxpython/core/gconsole.py	(revision 72985)
+++ gui/wxpython/core/gconsole.py	(working copy)
@@ -27,7 +27,12 @@
 import re
 import time
 import threading
-import Queue
+
+if sys.version_info.major == 2:
+    import Queue
+else:
+    import queue as Queue
+
 import codecs
 import locale
 
Index: gui/wxpython/core/gthread.py
===================================================================
--- gui/wxpython/core/gthread.py	(revision 72985)
+++ gui/wxpython/core/gthread.py	(working copy)
@@ -19,7 +19,11 @@
 
 import wx
 
-import Queue
+import sys
+if sys.version_info.major == 2:
+    import Queue
+else:
+    import queue as Queue
 
 from core.gconsole import EVT_CMD_DONE, wxCmdDone
 
Index: gui/wxpython/core/render.py
===================================================================
--- gui/wxpython/core/render.py	(revision 72985)
+++ gui/wxpython/core/render.py	(working copy)
@@ -1154,7 +1154,7 @@
         """
         selected = []
 
-        if isinstance(ltype, types.StringType):
+        if isinstance(ltype, str):
             one_type = True
         else:
             one_type = False
Index: gui/wxpython/core/treemodel.py
===================================================================
--- gui/wxpython/core/treemodel.py	(revision 72985)
+++ gui/wxpython/core/treemodel.py	(working copy)
@@ -15,6 +15,7 @@
 
 @author Anna Petrasova <kratochanna gmail.com>
 """
+import six
 
 
 class TreeModel(object):
@@ -174,7 +175,7 @@
     def nprint(self, text, indent=0):
         text.append(indent * ' ' + self.label)
         if self.data:
-            for key, value in self.data.iteritems():
+            for key, value in six.iteritems(self.data):
                 text.append(
                     "%(indent)s* %(key)s : %(value)s" %
                     {'indent': (indent + 2) * ' ', 'key': key, 'value': value})
Index: gui/wxpython/core/units.py
===================================================================
--- gui/wxpython/core/units.py	(revision 72985)
+++ gui/wxpython/core/units.py	(working copy)
@@ -21,6 +21,7 @@
 @author Martin Landa <landa.martin gmail.com>
 """
 
+import six
 import math
 
 if __name__ == '__main__':
@@ -79,7 +80,7 @@
 
         :return: index
         """
-        for k, u in self._units[type].iteritems():
+        for k, u in six.iteritems(self._units[type]):
             if u['key'] == key:
                 return k
         return 0
Index: gui/wxpython/core/utils.py
===================================================================
--- gui/wxpython/core/utils.py	(revision 72985)
+++ gui/wxpython/core/utils.py	(working copy)
@@ -20,6 +20,7 @@
 import shlex
 import re
 import inspect
+import six
 
 from grass.script import core as grass
 from grass.script import task as gtask
@@ -324,7 +325,10 @@
 
 def ListSortLower(list):
     """Sort list items (not case-sensitive)"""
-    list.sort(cmp=lambda x, y: cmp(x.lower(), y.lower()))
+    if sys.version_info.major == 2:
+        list.sort(cmp=lambda x, y: cmp(x.lower(), y.lower()))
+    else:
+        list.sort(key=lambda x: x.lower())
 
 
 def GetVectorNumberOfLayers(vector):
@@ -731,7 +735,7 @@
         else:
             formats['file'].append(name)
 
-    for items in formats.itervalues():
+    for items in six.itervalues(formats):
         items.sort()
 
     return formats
@@ -917,7 +921,7 @@
     else:
         expCmd = 'export'
 
-    for key, value in environ.iteritems():
+    for key, value in six.iteritems(environ):
         fd.write('%s %s=%s\n' % (expCmd, key, value))
 
     # write also skipped lines
Index: gui/wxpython/core/workspace.py
===================================================================
--- gui/wxpython/core/workspace.py	(revision 72985)
+++ gui/wxpython/core/workspace.py	(working copy)
@@ -19,6 +19,7 @@
 import os
 
 import wx
+import six
 
 from core.utils import normalize_whitespace, _
 from core.settings import UserSettings
@@ -976,7 +977,7 @@
                     '%s<task name="%s">\n' %
                     (' ' * self.indent, cmd[0]))
                 self.indent += 4
-                for key, val in cmd[1].iteritems():
+                for key, val in six.iteritems(cmd[1]):
                     if key == 'flags':
                         for f in val:
                             self.file.write('%s<flag name="%s" />\n' %
@@ -1003,7 +1004,7 @@
                     self.file.write('%s<vdigit>\n' % (' ' * self.indent))
                     if 'geomAttr' in vdigit:
                         self.indent += 4
-                        for type, val in vdigit['geomAttr'].iteritems():
+                        for type, val in six.iteritems(vdigit['geomAttr']):
                             units = ''
                             if val['units'] != 'mu':
                                 units = ' units="%s"' % val['units']
@@ -1038,13 +1039,13 @@
         self.indent += 4
         self.file.write('%s<surface>\n' % (' ' * self.indent))
         self.indent += 4
-        for attrb in data.iterkeys():
+        for attrb in six.iterkeys(data):
             if len(data[attrb]) < 1:  # skip empty attributes
                 continue
             if attrb == 'object':
                 continue
 
-            for name in data[attrb].iterkeys():
+            for name in six.iterkeys(data[attrb]):
                 # surface attribute
                 if attrb == 'attribute':
                     if data[attrb][name]['map'] is None:
@@ -1064,7 +1065,7 @@
             if attrb == 'draw':
                 self.file.write('%s<%s' % (' ' * self.indent, attrb))
                 if 'mode' in data[attrb]:
-                    for tag, value in data[attrb]['mode']['desc'].iteritems():
+                    for tag, value in six.iteritems(data[attrb]['mode']['desc']):
                         self.file.write(' %s="%s"' % (tag, value))
                 self.file.write('>\n')  # <draw ...>
 
@@ -1121,7 +1122,7 @@
         self.indent += 4
         self.file.write('%s<volume>\n' % (' ' * self.indent))
         self.indent += 4
-        for attrb in data.iterkeys():
+        for attrb in six.iterkeys(data):
             if len(data[attrb]) < 1:  # skip empty attributes
                 continue
             if attrb == 'object':
@@ -1128,7 +1129,7 @@
                 continue
 
             if attrb == 'attribute':
-                for name in data[attrb].iterkeys():
+                for name in six.iterkeys(data[attrb]):
                     # surface attribute
                     if data[attrb][name]['map'] is None:
                         continue
@@ -1211,10 +1212,10 @@
             if attrb == 'isosurface':
                 for isosurface in data[attrb]:
                     self.file.write('%s<%s>\n' % (' ' * self.indent, attrb))
-                    for name in isosurface.iterkeys():
+                    for name in six.iterkeys(isosurface):
                         self.indent += 4
                         self.file.write('%s<%s>\n' % (' ' * self.indent, name))
-                        for att in isosurface[name].iterkeys():
+                        for att in six.iterkeys(isosurface[name]):
                             if isosurface[name][att] is True:
                                 val = '1'
                             elif isosurface[name][att] is False:
@@ -1242,10 +1243,10 @@
             if attrb == 'slice':
                 for slice_ in data[attrb]:
                     self.file.write('%s<%s>\n' % (' ' * self.indent, attrb))
-                    for name in slice_.iterkeys():
+                    for name in six.iterkeys(slice_):
                         self.indent += 4
                         self.file.write('%s<%s>\n' % (' ' * self.indent, name))
-                        for att in slice_[name].iterkeys():
+                        for att in six.iterkeys(slice_[name]):
                             if att in ('map', 'update'):
                                 continue
                             val = slice_[name][att]
@@ -1275,7 +1276,7 @@
         :param data: Nviz layer properties
         """
         self.indent += 4
-        for attrb in data.iterkeys():
+        for attrb in six.iterkeys(data):
             if len(data[attrb]) < 1:  # skip empty attributes
                 continue
 
@@ -1292,7 +1293,7 @@
                                                            attrb,
                                                            marker))
             self.indent += 4
-            for name in data[attrb].iterkeys():
+            for name in six.iterkeys(data[attrb]):
                 if name in ('object', 'marker'):
                     continue
                 if name == 'mode':
@@ -1318,7 +1319,7 @@
                     self.file.write('%s</%s>\n' % ((' ' * self.indent, name)))
                 elif name == 'thematic':
                     self.file.write('%s<%s ' % (' ' * self.indent, name))
-                    for key in data[attrb][name].iterkeys():
+                    for key in six.iterkeys(data[attrb][name]):
                         if key.startswith('use'):
                             self.file.write(
                                 '%s="%s" ' %
@@ -1325,7 +1326,7 @@
                                 (key, int(data[attrb][name][key])))
                     self.file.write('>\n')
                     self.indent += 4
-                    for key, value in data[attrb][name].iteritems():
+                    for key, value in six.iteritems(data[attrb][name]):
                         if key.startswith('use'):
                             continue
                         if value is None:
Index: gui/wxpython/core/ws.py
===================================================================
--- gui/wxpython/core/ws.py	(revision 72985)
+++ gui/wxpython/core/ws.py	(working copy)
@@ -19,6 +19,7 @@
 import sys
 import copy
 import time
+import six
 
 import wx
 from wx.lib.newevent import NewEvent
@@ -213,7 +214,7 @@
         """Create string for GRASS_REGION env variable from  dict created by _getRegionDict.
         """
         regionStr = ''
-        for k, v in region.iteritems():
+        for k, v in six.iteritems(region):
             item = k + ': ' + str(v)
             if regionStr:
                 regionStr += '; '
@@ -356,7 +357,7 @@
         if sXsize < 1 or sYsize < 1:
             return
 
-        for sBandNnum, tBandNum in sTBands.iteritems():
+        for sBandNnum, tBandNum in six.iteritems(sTBands):
             bandData = sDataset.GetRasterBand(sBandNnum).ReadRaster(
                 sXoff, sYoff, sXsize, sYsize, tXsize, tYsize, gdal.GDT_Byte)
             self.tDataset.GetRasterBand(tBandNum).WriteRaster(
Index: gui/wxpython/datacatalog/dialogs.py
===================================================================
--- gui/wxpython/datacatalog/dialogs.py	(revision 72985)
+++ gui/wxpython/datacatalog/dialogs.py	(working copy)
@@ -20,6 +20,7 @@
 from gui_core.widgets import FloatValidator, IntegerValidator
 from core.giface import Notification
 from core.gcmd import RunCommand
+from gui_core.wrap import Button
 
 from grass.script import parse_key_val, region_env
 
@@ -76,11 +77,11 @@
         self.SetEscapeId(self.btn_close.GetId())
 
         # run
-        self.btn_run = wx.Button(parent=self.panel, id=wx.ID_OK, label=_("Reproject"))
+        self.btn_run = Button(parent=self.panel, id=wx.ID_OK, label=_("Reproject"))
         if self.etype == 'raster':
-            self.btn_run.SetToolTipString(_("Reproject raster"))
+            self.btn_run.SetToolTip(_("Reproject raster"))
         elif self.etype == 'vector':
-            self.btn_run.SetToolTipString(_("Reproject vector"))
+            self.btn_run.SetToolTip(_("Reproject vector"))
         self.btn_run.SetDefault()
         self.btn_run.Bind(wx.EVT_BUTTON, self.OnReproject)
 
Index: gui/wxpython/datacatalog/frame.py
===================================================================
--- gui/wxpython/datacatalog/frame.py	(revision 72985)
+++ gui/wxpython/datacatalog/frame.py	(working copy)
@@ -26,6 +26,7 @@
 from core.gcmd import RunCommand, GMessage
 from datacatalog.tree import DataCatalogTree
 from datacatalog.toolbars import DataCatalogToolbar
+from gui_core.wrap import Button
 
 
 class DataCatalogFrame(wx.Frame):
@@ -62,8 +63,8 @@
                                                                    mapset=mapset))
 
         # buttons
-        self.btnClose = wx.Button(parent=self.panel, id=wx.ID_CLOSE)
-        self.btnClose.SetToolTipString(_("Close GRASS GIS Data Catalog"))
+        self.btnClose = Button(parent=self.panel, id=wx.ID_CLOSE)
+        self.btnClose.SetToolTip(_("Close GRASS GIS Data Catalog"))
         self.btnClose.SetDefault()
 
         # events
Index: gui/wxpython/dbmgr/dialogs.py
===================================================================
--- gui/wxpython/dbmgr/dialogs.py	(revision 72985)
+++ gui/wxpython/dbmgr/dialogs.py	(working copy)
@@ -19,6 +19,7 @@
 
 import os
 import types
+import six
 
 from core import globalvar
 from core.utils import _
@@ -591,7 +592,7 @@
         table = self.mapDBInfo.GetTable(layer)
         columns = self.mapDBInfo.GetTableDesc(table)
 
-        for key, col in columns.iteritems():
+        for key, col in six.iteritems(columns):
             if key == column:
                 col['values'] = [col['ctype'](value), ]
                 break
Index: gui/wxpython/dbmgr/sqlbuilder.py
===================================================================
--- gui/wxpython/dbmgr/sqlbuilder.py	(revision 72985)
+++ gui/wxpython/dbmgr/sqlbuilder.py	(working copy)
@@ -28,6 +28,7 @@
 
 import os
 import sys
+import six
 
 from core import globalvar
 from core.utils import _
@@ -37,6 +38,7 @@
 
 from core.gcmd import RunCommand, GError, GMessage
 from dbmgr.vinfo import CreateDbInfoDesc, VectorDBInfo, GetUnicodeValue
+from gui_core.wrap import Button, TextCtrl
 
 import grass.script as grass
 
@@ -115,7 +117,7 @@
                               label=" %s " % _("Query"))
         sqlboxsizer = wx.StaticBoxSizer(sqlbox, wx.VERTICAL)
 
-        self.text_sql = wx.TextCtrl(parent=self.panel, id=wx.ID_ANY,
+        self.text_sql = TextCtrl(parent=self.panel, id=wx.ID_ANY,
                                     value='', size=(-1, 50),
                                     style=wx.TE_MULTILINE)
 
@@ -127,13 +129,12 @@
         #
         # buttons
         #
-        self.btn_clear = wx.Button(parent=self.panel, id=wx.ID_CLEAR)
-        self.btn_clear.SetToolTipString(_("Set SQL statement to default"))
-        self.btn_apply = wx.Button(parent=self.panel, id=wx.ID_APPLY)
-        self.btn_apply.SetToolTipString(
-            _("Apply SQL statement"))
-        self.btn_close = wx.Button(parent=self.panel, id=wx.ID_CLOSE)
-        self.btn_close.SetToolTipString(_("Close the dialog"))
+        self.btn_clear = Button(parent=self.panel, id=wx.ID_CLEAR)
+        self.btn_clear.SetToolTip(_("Set SQL statement to default"))
+        self.btn_apply = Button(parent=self.panel, id=wx.ID_APPLY)
+        self.btn_apply.SetToolTip(_("Apply SQL statement"))
+        self.btn_close = Button(parent=self.panel, id=wx.ID_CLOSE)
+        self.btn_close.SetToolTip(_("Close the dialog"))
 
         self.btn_logic = {'is': ['=', ],
                           'isnot': ['!=', ],
@@ -149,7 +150,7 @@
                           'prc': ['%', ]}
 
         self.btn_logicpanel = wx.Panel(parent=self.panel, id=wx.ID_ANY)
-        for key, value in self.btn_logic.iteritems():
+        for key, value in six.iteritems(self.btn_logic):
             btn = wx.Button(parent=self.btn_logicpanel, id=wx.ID_ANY,
                             label=value[0])
             self.btn_logic[key].append(btn.GetId())
@@ -261,11 +262,11 @@
         self.btn_unique = wx.Button(parent=self.valuespanel, id=wx.ID_ANY,
                                     label=_("Get all values"))
         self.btn_unique.Enable(False)
-        self.btn_uniquesample = wx.Button(
+        self.btn_uniquesample = Button(
             parent=self.valuespanel,
             id=wx.ID_ANY,
             label=_("Get sample"))
-        self.btn_uniquesample.SetToolTipString(
+        self.btn_uniquesample.SetToolTip(
             _("Get first 256 unique values as sample"))
         self.btn_uniquesample.Enable(False)
 
@@ -339,7 +340,7 @@
         self.btn_unique.Bind(wx.EVT_BUTTON, self.OnUniqueValues)
         self.btn_uniquesample.Bind(wx.EVT_BUTTON, self.OnSampleValues)
 
-        for key, value in self.btn_logic.iteritems():
+        for key, value in six.iteritems(self.btn_logic):
             self.FindWindowById(value[1]).Bind(wx.EVT_BUTTON, self.OnAddMark)
 
         self.btn_close.Bind(wx.EVT_BUTTON, self.OnClose)
@@ -454,7 +455,7 @@
                 self.btn_arithmeticpanel.IsShown():
             btns = self.btn_arithmetic
 
-        for key, value in btns.iteritems():
+        for key, value in six.iteritems(btns):
             if event.GetId() == value[1]:
                 mark = value[0]
                 break
@@ -494,13 +495,13 @@
         SQLBuilder._doLayout(self, modeChoices)
 
         self.text_sql.SetValue("SELECT * FROM %s" % self.tablename)
-        self.text_sql.SetToolTipString(
+        self.text_sql.SetToolTip(
             _("Example: %s") %
             "SELECT * FROM roadsmajor WHERE MULTILANE = 'no' OR OBJECTID < 10")
 
-        self.btn_verify = wx.Button(parent=self.panel, id=wx.ID_ANY,
+        self.btn_verify = Button(parent=self.panel, id=wx.ID_ANY,
                                     label=_("Verify"))
-        self.btn_verify.SetToolTipString(_("Verify SQL statement"))
+        self.btn_verify.SetToolTip(_("Verify SQL statement"))
 
         self.buttonsizer.Insert(1, self.btn_verify)
 
@@ -659,7 +660,7 @@
 
         self.btn_arithmeticpanel = wx.Panel(parent=self.panel, id=wx.ID_ANY)
 
-        for key, value in self.btn_arithmetic.iteritems():
+        for key, value in six.iteritems(self.btn_arithmetic):
             btn = wx.Button(parent=self.btn_arithmeticpanel, id=wx.ID_ANY,
                             label=value[0])
             self.btn_arithmetic[key].append(btn.GetId())
@@ -716,7 +717,7 @@
                            proportion=1, flag=wx.EXPAND)
 
         self.list_func.Bind(wx.EVT_LISTBOX, self.OnAddFunc)
-        for key, value in self.btn_arithmetic.iteritems():
+        for key, value in six.iteritems(self.btn_arithmetic):
             self.FindWindowById(value[1]).Bind(wx.EVT_BUTTON, self.OnAddMark)
         self.mode.SetSelection(0)
         self.OnMode(None)
Index: gui/wxpython/dbmgr/vinfo.py
===================================================================
--- gui/wxpython/dbmgr/vinfo.py	(revision 72985)
+++ gui/wxpython/dbmgr/vinfo.py	(working copy)
@@ -16,6 +16,8 @@
 
 import os
 import types
+import sys
+import six
 
 import wx
 
@@ -25,6 +27,8 @@
 from core.utils import _
 import grass.script as grass
 
+if sys.version_info.major >= 3:
+    unicode = str
 
 def GetUnicodeValue(value):
     """Get unicode value
@@ -33,7 +37,7 @@
 
     :return: unicode value
     """
-    if isinstance(value, types.UnicodeType):
+    if isinstance(value, unicode):
         return value
 
     enc = UserSettings.Get(group='atm', key='encoding', subkey='value')
@@ -93,7 +97,7 @@
         except KeyError:
             return []
 
-        for name, desc in self.tables[table].iteritems():
+        for name, desc in six.iteritems(self.tables[table]):
             names[desc['index']] = name
 
         return names
@@ -131,7 +135,7 @@
                 continue
 
             table = record['Table']
-            for key, value in record['Attributes'].iteritems():
+            for key, value in six.iteritems(record['Attributes']):
                 if len(value) < 1:
                     value = None
                 else:
@@ -141,7 +145,7 @@
                         value = GetUnicodeValue(value)
                 self.tables[table][key]['values'].append(value)
 
-            for key, value in record.iteritems():
+            for key, value in six.iteritems(record):
                 if key == 'Attributes':
                     continue
                 if key in ret:
Index: gui/wxpython/gcp/manager.py
===================================================================
--- gui/wxpython/gcp/manager.py	(revision 72985)
+++ gui/wxpython/gcp/manager.py	(working copy)
@@ -32,6 +32,7 @@
 import sys
 import shutil
 import time
+import six
 from copy import copy
 
 import wx
@@ -56,7 +57,7 @@
 from core.settings import UserSettings
 from gcp.mapdisplay import MapFrame
 from core.giface import Notification
-from gui_core.wrap import SpinCtrl
+from gui_core.wrap import SpinCtrl, Button
 
 from location_wizard.wizard import TitledPage as TitledPage
 
@@ -1261,7 +1262,7 @@
                    "ucolor": "unused"}
         wpx = UserSettings.Get(group='gcpman', key='symbol', subkey='width')
 
-        for k, v in colours.iteritems():
+        for k, v in six.iteritems(colours):
             col = UserSettings.Get(group='gcpman', key='symbol', subkey=k)
             self.pointsToDrawSrc.GetPen(v).SetColour(wx.Colour(
                 col[0], col[1], col[2], 255))  # TODO GetPen neni to spatne?
@@ -2617,19 +2618,19 @@
         self.__CreateRectificationPage(notebook)
 
         # buttons
-        btnSave = wx.Button(self, wx.ID_SAVE)
-        btnApply = wx.Button(self, wx.ID_APPLY)
-        btnClose = wx.Button(self, wx.ID_CLOSE)
+        btnSave = Button(self, wx.ID_SAVE)
+        btnApply = Button(self, wx.ID_APPLY)
+        btnClose = Button(self, wx.ID_CLOSE)
         btnApply.SetDefault()
 
         # bindings
         btnApply.Bind(wx.EVT_BUTTON, self.OnApply)
-        btnApply.SetToolTipString(_("Apply changes for the current session"))
+        btnApply.SetToolTip(_("Apply changes for the current session"))
         btnSave.Bind(wx.EVT_BUTTON, self.OnSave)
-        btnSave.SetToolTipString(
+        btnSave.SetToolTip(
             _("Apply and save changes to user settings file (default for next sessions)"))
         btnClose.Bind(wx.EVT_BUTTON, self.OnClose)
-        btnClose.SetToolTipString(_("Close dialog"))
+        btnClose.SetToolTip(_("Close dialog"))
 
         # sizers
         btnSizer = wx.BoxSizer(wx.HORIZONTAL)
Index: gui/wxpython/gmodeler/dialogs.py
===================================================================
--- gui/wxpython/gmodeler/dialogs.py	(revision 72985)
+++ gui/wxpython/gmodeler/dialogs.py	(working copy)
@@ -25,6 +25,7 @@
 
 import os
 import sys
+import six
 
 import wx
 import wx.lib.mixins.listctrl as listmix
@@ -39,6 +40,7 @@
 from gui_core.gselect import Select, ElementSelect
 from gmodeler.model import *
 from lmgr.menudata import LayerManagerMenuData
+from gui_core.wrap import Button
 
 from grass.script import task as gtask
 
@@ -520,9 +522,9 @@
         self.listBox = wx.StaticBox(parent=self.panel, id=wx.ID_ANY,
                                     label=" %s " % _("List of items in loop"))
 
-        self.btnSeries = wx.Button(parent=self.panel, id=wx.ID_ANY,
+        self.btnSeries = Button(parent=self.panel, id=wx.ID_ANY,
                                    label=_("Series"))
-        self.btnSeries.SetToolTipString(
+        self.btnSeries.SetToolTip(
             _("Define map series as condition for the loop"))
         self.btnSeries.Bind(wx.EVT_BUTTON, self.OnSeries)
 
@@ -743,7 +745,7 @@
         """Populate the list"""
         self.itemDataMap = dict()
         i = 0
-        for name, values in data.iteritems():
+        for name, values in six.iteritems(data):
             self.itemDataMap[i] = [name, values['type'],
                                    values.get('value', ''),
                                    values.get('description', '')]
@@ -752,7 +754,7 @@
         self.itemCount = len(self.itemDataMap.keys())
         self.DeleteAllItems()
         i = 0
-        for name, vtype, value, desc in self.itemDataMap.itervalues():
+        for name, vtype, value, desc in six.itervalues(self.itemDataMap):
             index = self.InsertStringItem(i, name)
             self.SetStringItem(index, 0, name)
             self.SetStringItem(index, 1, vtype)
@@ -767,7 +769,7 @@
         :return: None on success
         :return: error string
         """
-        for iname, ivtype, ivalue, idesc in self.itemDataMap.itervalues():
+        for iname, ivtype, ivalue, idesc in six.itervalues(self.itemDataMap):
             if iname == name:
                 return _("Variable <%s> already exists in the model. "
                          "Adding variable failed.") % name
@@ -937,7 +939,7 @@
         self.DeleteAllItems()
         i = 0
         if len(self.columns) == 2:
-            for name, desc in self.itemDataMap.itervalues():
+            for name, desc in six.itervalues(self.itemDataMap):
                 index = self.InsertStringItem(i, str(i))
                 self.SetStringItem(index, 0, name)
                 self.SetStringItem(index, 1, desc)
@@ -946,7 +948,7 @@
                     self.CheckItem(index, True)
                 i += 1
         else:
-            for name, inloop, param, desc in self.itemDataMap.itervalues():
+            for name, inloop, param, desc in six.itervalues(self.itemDataMap):
                 index = self.InsertStringItem(i, str(i))
                 self.SetStringItem(index, 0, name)
                 self.SetStringItem(index, 1, inloop)
Index: gui/wxpython/gmodeler/frame.py
===================================================================
--- gui/wxpython/gmodeler/frame.py	(revision 72985)
+++ gui/wxpython/gmodeler/frame.py	(working copy)
@@ -27,6 +27,7 @@
 import copy
 import re
 import random
+import six
 
 import wx
 from wx.lib import ogl
@@ -61,6 +62,7 @@
 from gmodeler.giface import GraphicalModelerGrassInterface
 from gmodeler.model import *
 from gmodeler.dialogs import *
+from gui_core.wrap import Button
 
 wxModelDone, EVT_MODEL_DONE = NewEvent()
 
@@ -380,7 +382,7 @@
         dlg.Init(properties)
         if dlg.ShowModal() == wx.ID_OK:
             self.ModelChanged()
-            for key, value in dlg.GetValues().iteritems():
+            for key, value in six.iteritems(dlg.GetValues()):
                 properties[key] = value
             for action in self.model.GetItems(objType=ModelAction):
                 action.GetTask().set_flag('overwrite', properties['overwrite'])
@@ -1754,8 +1756,8 @@
         self.desc = wx.TextCtrl(parent=self, id=wx.ID_ANY)
 
         # buttons
-        self.btnAdd = wx.Button(parent=self, id=wx.ID_ADD)
-        self.btnAdd.SetToolTipString(_("Add new variable to the model"))
+        self.btnAdd = Button(parent=self, id=wx.ID_ADD)
+        self.btnAdd.SetToolTip(_("Add new variable to the model"))
         self.btnAdd.Enable(False)
 
         # bindings
@@ -1845,7 +1847,7 @@
     def UpdateModelVariables(self):
         """Update model variables"""
         variables = dict()
-        for values in self.list.GetData().itervalues():
+        for values in six.itervalues(self.list.GetData()):
             name = values[0]
             variables[name] = {'type': str(values[1])}
             if values[2]:
@@ -1980,14 +1982,14 @@
                                     label=" %s " % _("Python script"))
         self.body = PyStc(parent=self, statusbar=self.parent.GetStatusBar())
 
-        self.btnRun = wx.Button(parent=self, id=wx.ID_ANY, label=_("&Run"))
-        self.btnRun.SetToolTipString(_("Run python script"))
+        self.btnRun = Button(parent=self, id=wx.ID_ANY, label=_("&Run"))
+        self.btnRun.SetToolTip(_("Run python script"))
         self.Bind(wx.EVT_BUTTON, self.OnRun, self.btnRun)
-        self.btnSaveAs = wx.Button(parent=self, id=wx.ID_SAVEAS)
-        self.btnSaveAs.SetToolTipString(_("Save python script to file"))
+        self.btnSaveAs = Button(parent=self, id=wx.ID_SAVEAS)
+        self.btnSaveAs.SetToolTip(_("Save python script to file"))
         self.Bind(wx.EVT_BUTTON, self.OnSaveAs, self.btnSaveAs)
-        self.btnRefresh = wx.Button(parent=self, id=wx.ID_REFRESH)
-        self.btnRefresh.SetToolTipString(_("Refresh python script based on the model.\n"
+        self.btnRefresh = Button(parent=self, id=wx.ID_REFRESH)
+        self.btnRefresh.SetToolTip(_("Refresh python script based on the model.\n"
                                            "It will discards all local changes."))
         self.Bind(wx.EVT_BUTTON, self.OnRefresh, self.btnRefresh)
 
Index: gui/wxpython/gmodeler/model.py
===================================================================
--- gui/wxpython/gmodeler/model.py	(revision 72985)
+++ gui/wxpython/gmodeler/model.py	(working copy)
@@ -32,6 +32,7 @@
 import re
 import mimetypes
 import time
+import six
 try:
     import xml.etree.ElementTree as etree
 except ImportError:
@@ -119,7 +120,7 @@
 
     def ReorderItems(self, idxList):
         items = list()
-        for oldIdx, newIdx in idxList.iteritems():
+        for oldIdx, newIdx in six.iteritems(idxList):
             item = self.items.pop(oldIdx)
             items.append(item)
             self.items.insert(newIdx, item)
@@ -655,7 +656,7 @@
                 return
 
             err = list()
-            for key, item in params.iteritems():
+            for key, item in six.iteritems(params):
                 for p in item['params']:
                     if p.get('value', '') == '':
                         err.append(
@@ -752,7 +753,7 @@
 
         # discard values
         if params:
-            for item in params.itervalues():
+            for item in six.itervalues(params):
                 for p in item['params']:
                     p['value'] = ''
 
@@ -821,7 +822,7 @@
             result["variables"] = {'flags': list(),
                                    'params': params,
                                    'idx': idx}
-            for name, values in self.variables.iteritems():
+            for name, values in six.iteritems(self.variables):
                 gtype = values.get('type', 'string')
                 if gtype in ('raster', 'vector', 'mapset',
                              'file', 'region', 'dir'):
@@ -2278,7 +2279,7 @@
             return
         self.fd.write('%s<variables>\n' % (' ' * self.indent))
         self.indent += 4
-        for name, values in self.variables.iteritems():
+        for name, values in six.iteritems(self.variables):
             self.fd.write(
                 '%s<variable name="%s" type="%s">\n' %
                 (' ' * self.indent, EncodeString(name), values['type']))
@@ -2331,7 +2332,7 @@
         self.indent += 4
         if not action.IsEnabled():
             self.fd.write('%s<disabled />\n' % (' ' * self.indent))
-        for key, val in action.GetParams().iteritems():
+        for key, val in six.iteritems(action.GetParams()):
             if key == 'flags':
                 for f in val:
                     if f.get('value', False) or f.get('parameterized', False):
@@ -2576,7 +2577,7 @@
 """ % (EncodeString(' '.join(properties['description'].splitlines()))))
 
         variables = self.model.GetVariables()
-        for key, data in variables.iteritems():
+        for key, data in six.iteritems(variables):
             otype = self._getStandardizedOption(data['type'])
             self.fd.write(
                 r"""
@@ -2870,7 +2871,7 @@
     def _createPages(self):
         """Create for each parameterized module its own page"""
         nameOrdered = [''] * len(self.params.keys())
-        for name, params in self.params.iteritems():
+        for name, params in six.iteritems(self.params):
             nameOrdered[params['idx']] = name
         for name in nameOrdered:
             params = self.params[name]
Index: gui/wxpython/gmodeler/preferences.py
===================================================================
--- gui/wxpython/gmodeler/preferences.py	(revision 72985)
+++ gui/wxpython/gmodeler/preferences.py	(working copy)
@@ -22,7 +22,7 @@
 from gui_core.preferences import PreferencesBaseDialog
 from core.settings import UserSettings
 from core.utils import _
-from gui_core.wrap import SpinCtrl
+from gui_core.wrap import SpinCtrl, Button
 
 
 class PreferencesDialog(PreferencesBaseDialog):
@@ -687,13 +687,13 @@
                 subkey='enabled'))
 
         # buttons
-        self.btnOk = wx.Button(self, wx.ID_OK)
-        self.btnCancel = wx.Button(self, wx.ID_CANCEL)
+        self.btnOk = Button(self, wx.ID_OK)
+        self.btnCancel = Button(self, wx.ID_CANCEL)
         self.btnOk.SetDefault()
 
-        self.btnOk.SetToolTipString(_("Apply properties"))
+        self.btnOk.SetToolTip(_("Apply properties"))
         self.btnOk.SetDefault()
-        self.btnCancel.SetToolTipString(_("Close dialog and ignore changes"))
+        self.btnCancel.SetToolTip(_("Close dialog and ignore changes"))
 
         self.Bind(wx.EVT_CLOSE, self.OnCloseWindow)
 
Index: gui/wxpython/gui_core/dialogs.py
===================================================================
--- gui/wxpython/gui_core/dialogs.py	(revision 72985)
+++ gui/wxpython/gui_core/dialogs.py	(working copy)
@@ -31,6 +31,7 @@
 import os
 import sys
 import re
+import six
 
 import wx
 
@@ -47,7 +48,7 @@
 from core.utils import _
 from core.settings import UserSettings
 from core.debug import Debug
-from gui_core.wrap import SpinCtrl, TextCtrl
+from gui_core.wrap import SpinCtrl, TextCtrl, Button, CheckListBox
 
 
 class SimpleDialog(wx.Dialog):
@@ -662,14 +663,14 @@
         self.bodySizer = self._createDialogBody()
 
         # buttons
-        btnOk = wx.Button(parent=self, id=wx.ID_OK)
-        btnApply = wx.Button(parent=self, id=wx.ID_APPLY)
-        btnClose = wx.Button(parent=self, id=wx.ID_CANCEL)
+        btnOk = Button(parent=self, id=wx.ID_OK)
+        btnApply = Button(parent=self, id=wx.ID_APPLY)
+        btnClose = Button(parent=self, id=wx.ID_CANCEL)
 
-        btnOk.SetToolTipString(
+        btnOk.SetToolTip(
             _("Apply changes to selected group and close dialog"))
-        btnApply.SetToolTipString(_("Apply changes to selected group"))
-        btnClose.SetToolTipString(_("Close dialog, changes are not applied"))
+        btnApply.SetToolTip(_("Apply changes to selected group"))
+        btnClose.SetToolTip(_("Close dialog, changes are not applied"))
 
         # btnOk.SetDefault()
 
@@ -781,10 +782,10 @@
                 1,
                 0))
 
-        self.gfilter = wx.TextCtrl(parent=self.gListPanel, id=wx.ID_ANY,
+        self.gfilter = TextCtrl(parent=self.gListPanel, id=wx.ID_ANY,
                                    value="",
                                    size=(250, -1))
-        self.gfilter.SetToolTipString(filter_tooltip)
+        self.gfilter.SetToolTip(filter_tooltip)
 
         gListSizer.Add(self.gfilter,
                        flag=wx.EXPAND,
@@ -807,13 +808,13 @@
             style=wx.LB_MULTIPLE | wx.LB_NEEDED_SB)
         sizer.Add(self.gLayerBox, proportion=1, flag=wx.EXPAND)
 
-        self.addLayer = wx.Button(self.gListPanel, id=wx.ID_ADD)
-        self.addLayer.SetToolTipString(
+        self.addLayer = Button(self.gListPanel, id=wx.ID_ADD)
+        self.addLayer.SetToolTip(
             _("Select map layers and add them to the list."))
         buttonSizer.Add(self.addLayer, flag=wx.BOTTOM, border=10)
 
-        self.removeLayer = wx.Button(self.gListPanel, id=wx.ID_REMOVE)
-        self.removeLayer.SetToolTipString(
+        self.removeLayer = Button(self.gListPanel, id=wx.ID_REMOVE)
+        self.removeLayer.SetToolTip(
             _("Remove selected layer(s) from list."))
         buttonSizer.Add(self.removeLayer)
         sizer.Add(buttonSizer, flag=wx.LEFT, border=5)
@@ -849,10 +850,10 @@
                 1,
                 0))
 
-        self.subgfilter = wx.TextCtrl(parent=self.subgListPanel, id=wx.ID_ANY,
+        self.subgfilter = TextCtrl(parent=self.subgListPanel, id=wx.ID_ANY,
                                       value="",
                                       size=(250, -1))
-        self.subgfilter.SetToolTipString(filter_tooltip)
+        self.subgfilter.SetToolTip(filter_tooltip)
 
         subgListSizer.Add(self.subgfilter,
                           flag=wx.EXPAND,
@@ -868,9 +869,9 @@
                 2,
                 0))
 
-        self.subgListBox = wx.CheckListBox(
+        self.subgListBox = CheckListBox(
             parent=self.subgListPanel, id=wx.ID_ANY, size=(250, 100))
-        self.subgListBox.SetToolTipString(
+        self.subgListBox.SetToolTip(
             _("Check maps from group to be included into subgroup."))
 
         subgListSizer.Add(self.subgListBox, flag=wx.EXPAND, pos=(2, 1))
@@ -1061,7 +1062,7 @@
         """Get layers"""
         if self.edit_subg:
             layers = []
-            for maps, sel in self.subgmaps.iteritems():
+            for maps, sel in six.iteritems(self.subgmaps):
                 if sel:
                     layers.append(maps)
         else:
@@ -1106,7 +1107,7 @@
         self.subgListBox.Set(maps)
 
         for i, m in enumerate(maps):
-            if m in self.subgmaps.iterkeys() and self.subgmaps[m]:
+            if m in six.iterkeys(self.subgmaps) and self.subgmaps[m]:
                 self.subgListBox.Check(i)
 
         self._checkSubGSellAll()
Index: gui/wxpython/gui_core/forms.py
===================================================================
--- gui/wxpython/gui_core/forms.py	(revision 72985)
+++ gui/wxpython/gui_core/forms.py	(working copy)
@@ -54,7 +54,13 @@
 import os
 import copy
 import locale
-import Queue
+import six
+
+if sys.version_info.major == 2:
+    import Queue
+else:
+    import queue as Queue
+
 import re
 import codecs
 
@@ -100,7 +106,8 @@
 from gui_core.widgets import FloatValidator, GNotebook, FormNotebook, FormListbook
 from core.giface import Notification
 from gui_core.widgets import LayersList
-from gui_core.wrap import BitmapFromImage, Button, StaticText, StaticBox, SpinCtrl
+from gui_core.wrap import BitmapFromImage, Button, StaticText, StaticBox, SpinCtrl, \
+    CheckBox, BitmapButton
 from core.debug import Debug
 
 wxUpdateDialog, EVT_DIALOG_UPDATE = NewEvent()
@@ -686,7 +693,7 @@
 
         if self.get_dcmd is None and hasNew:
             # close dialog when command is terminated
-            self.closebox = wx.CheckBox(
+            self.closebox = CheckBox(
                 parent=self.panel,
                 label=_('Close dialog on finish'),
                 style=wx.NO_BORDER)
@@ -695,7 +702,7 @@
                     group='cmd',
                     key='closeDlg',
                     subkey='enabled'))
-            self.closebox.SetToolTipString(
+            self.closebox.SetToolTip(
                 _(
                     "Close dialog when command is successfully finished. "
                     "Change this settings in Preferences dialog ('Command' tab)."))
@@ -1041,13 +1048,13 @@
             title_sizer = wx.BoxSizer(wx.HORIZONTAL)
             rtitle_txt = StaticText(parent=which_panel,
                                     label='(' + f['name'] + ')')
-            chk = wx.CheckBox(
+            chk = CheckBox(
                 parent=which_panel,
                 label=title,
                 style=wx.NO_BORDER)
             self.label_id.append(chk.GetId())
             if tooltip:
-                chk.SetToolTipString(tooltip)
+                chk.SetToolTip(tooltip)
             chk.SetValue(f.get('value', False))
             title_sizer.Add(chk, proportion=1,
                             flag=wx.EXPAND)
@@ -1550,10 +1557,10 @@
                                 os.path.join(
                                     globalvar.ICONDIR, iconTheme,
                                     'map-info.png'))
-                            bb = wx.BitmapButton(
+                            bb = BitmapButton(
                                 parent=which_panel, bitmap=bitmap)
                             bb.Bind(wx.EVT_BUTTON, self.OnTimelineTool)
-                            bb.SetToolTipString(
+                            bb.SetToolTip(
                                 _("Show graphical representation of temporal extent of dataset(s) ."))
                             p['wxId'].append(bb.GetId())
 
@@ -2484,7 +2491,7 @@
         self.OnUpdateSelection(event)
 
     def OnUpdateDialog(self, event):
-        for fn, kwargs in event.data.iteritems():
+        for fn, kwargs in six.iteritems(event.data):
             fn(**kwargs)
 
         self.parent.updateValuesHook()
Index: gui/wxpython/gui_core/ghelp.py
===================================================================
--- gui/wxpython/gui_core/ghelp.py	(revision 72985)
+++ gui/wxpython/gui_core/ghelp.py	(working copy)
@@ -23,6 +23,7 @@
 import re
 import textwrap
 import sys
+import six
 
 import wx
 from wx.html import HtmlWindow
@@ -593,7 +594,7 @@
         # else:
         # panel.Collapse(True)
         pageSizer = wx.BoxSizer(wx.VERTICAL)
-        for k, v in js.iteritems():
+        for k, v in six.iteritems(js):
             if k != 'total' and k != 'name':
                 box = self._langBox(win, k, v)
                 pageSizer.Add(box, proportion=1,
@@ -753,7 +754,7 @@
         try:
             contents = []
             skip = False
-            for l in file(htmlFile, "rb").readlines():
+            for l in open(htmlFile, "rb").readlines():
                 if "DESCRIPTION" in l:
                     skip = False
                 if not skip:
Index: gui/wxpython/gui_core/goutput.py
===================================================================
--- gui/wxpython/gui_core/goutput.py	(revision 72985)
+++ gui/wxpython/gui_core/goutput.py	(working copy)
@@ -629,7 +629,7 @@
             group='appearance',
             key='outputfont',
             subkey='size')
-        if typesize is None or typesize <= 0:
+        if typesize is None or int(typesize) <= 0:
             typesize = 10
         typesize = float(typesize)
 
Index: gui/wxpython/gui_core/gselect.py
===================================================================
--- gui/wxpython/gui_core/gselect.py	(revision 72985)
+++ gui/wxpython/gui_core/gselect.py	(working copy)
@@ -47,6 +47,7 @@
 import sys
 import glob
 import copy
+import six
 
 import wx
 
@@ -526,7 +527,7 @@
 
         # add extra items first
         if self.extraItems:
-            for group, items in self.extraItems.iteritems():
+            for group, items in six.iteritems(self.extraItems):
                 node = self.AddItem(group, node=True)
                 self.seltree.SetItemTextColour(node, wx.Colour(50, 50, 200))
                 for item in items:
@@ -804,7 +805,7 @@
 
     def _CheckDBConnection(self):
         """Check DB connection"""
-        nuldev = file(os.devnull, 'w+')
+        nuldev = open(os.devnull, 'w+')
         # if map is not defined (happens with vnet initialization) or it
         # doesn't exist
         try:
@@ -1124,16 +1125,16 @@
             columnchoices = dbInfo.GetTableDesc(table)
             keyColumn = dbInfo.GetKeyColumn(layer)
             self.columns = len(columnchoices.keys()) * ['']
-            for key, val in columnchoices.iteritems():
+            for key, val in six.iteritems(columnchoices):
                 self.columns[val['index']] = key
             if excludeKey:  # exclude key column
                 self.columns.remove(keyColumn)
             if excludeCols:  # exclude key column
-                for key in columnchoices.iterkeys():
+                for key in six.iterkeys(columnchoices):
                     if key in excludeCols:
                         self.columns.remove(key)
             if type:  # only selected column types
-                for key, value in columnchoices.iteritems():
+                for key, value in six.iteritems(columnchoices):
                     if value['type'] not in type:
                         try:
                             self.columns.remove(key)
@@ -1647,7 +1648,7 @@
                     dsn = v
                     break
             optList = list()
-            for k, v in data.iteritems():
+            for k, v in six.iteritems(data):
                 if k in ('format', 'conninfo', 'topology'):
                     continue
                 optList.append('%s=%s' % (k, v))
Index: gui/wxpython/gui_core/mapdisp.py
===================================================================
--- gui/wxpython/gui_core/mapdisp.py	(revision 72985)
+++ gui/wxpython/gui_core/mapdisp.py	(working copy)
@@ -21,6 +21,7 @@
 
 import os
 import sys
+import six
 
 import wx
 
@@ -333,7 +334,7 @@
 
     def StatusbarEnableLongHelp(self, enable=True):
         """Enable/disable toolbars long help"""
-        for toolbar in self.toolbars.itervalues():
+        for toolbar in six.itervalues(self.toolbars):
             toolbar.EnableLongHelp(enable)
 
     def IsStandalone(self):
Index: gui/wxpython/gui_core/menu.py
===================================================================
--- gui/wxpython/gui_core/menu.py	(revision 72985)
+++ gui/wxpython/gui_core/menu.py	(working copy)
@@ -149,7 +149,7 @@
 
         # tree
         self._tree = CTreeView(model=model, parent=self)
-        self._tree.SetToolTipString(
+        self._tree.SetToolTip(
             _("Double-click or Ctrl-Enter to run selected module"))
 
 #        self._dataBox = wx.StaticBox(parent = self, id = wx.ID_ANY,
Index: gui/wxpython/gui_core/query.py
===================================================================
--- gui/wxpython/gui_core/query.py	(revision 72985)
+++ gui/wxpython/gui_core/query.py	(working copy)
@@ -15,6 +15,7 @@
 """
 import os
 import wx
+import six
 
 from core.utils import _
 from core.gcmd import DecodeString
@@ -217,7 +218,7 @@
     :return: tree model
     """
     def addNode(parent, data, model):
-        for k, v in data.iteritems():
+        for k, v in six.iteritems(data):
             if isinstance(v, str):
                 k = DecodeString(k)
             if isinstance(v, dict):
Index: gui/wxpython/gui_core/toolbars.py
===================================================================
--- gui/wxpython/gui_core/toolbars.py	(revision 72985)
+++ gui/wxpython/gui_core/toolbars.py	(working copy)
@@ -27,7 +27,7 @@
 from icons.icon import MetaIcon
 from collections import defaultdict
 from core.globalvar import IMGDIR
-from gui_core.wrap import ToolBar, Menu
+from gui_core.wrap import ToolBar, Menu, BitmapButton
 
 from grass.pydispatch.signal import Signal
 
@@ -268,9 +268,9 @@
         else:
             bitmap = wx.ArtProvider.GetBitmap(
                 id=wx.ART_MISSING_IMAGE, client=wx.ART_TOOLBAR)
-        button = wx.BitmapButton(parent=self, id=wx.ID_ANY, size=(
+        button = BitmapButton(parent=self, id=wx.ID_ANY, size=(
             (-1, self.GetToolSize()[1])), bitmap=bitmap, style=wx.NO_BORDER)
-        button.SetToolTipString(tooltip)
+        button.SetToolTip(tooltip)
 
         return button
 
Index: gui/wxpython/gui_core/widgets.py
===================================================================
--- gui/wxpython/gui_core/widgets.py	(revision 72985)
+++ gui/wxpython/gui_core/widgets.py	(working copy)
@@ -48,6 +48,7 @@
 import sys
 import string
 import re
+import six
 from bisect import bisect
 from datetime import datetime
 from core.globalvar import wxPythonPhoenix
@@ -1376,7 +1377,7 @@
         try:
             fd = open(self.settingsFile, 'w')
             fd.write('format_version=2.0\n')
-            for key, values in self._settings.iteritems():
+            for key, values in six.iteritems(self._settings):
                 first = True
                 for v in values:
                     # escaping characters
Index: gui/wxpython/gui_core/wrap.py
===================================================================
--- gui/wxpython/gui_core/wrap.py	(revision 72985)
+++ gui/wxpython/gui_core/wrap.py	(working copy)
@@ -99,6 +99,19 @@
             wx.Button.SetToolTipString(self, tip)
 
 
+class BitmapButton(wx.BitmapButton):
+    """Wrapper around wx.BitmapButton to have more control
+    over the widget on different platforms/wxpython versions"""
+    def __init__(self, *args, **kwargs):
+        wx.BitmapButton.__init__(self, *args, **kwargs)
+
+    def SetToolTip(self, tip):
+        if wxPythonPhoenix:
+            wx.BitmapButton.SetToolTip(self, tipString=tip)
+        else:
+            wx.BitmapButton.SetToolTipString(self, tip)
+
+
 class GenBitmapButton(buttons.GenBitmapButton):
     """Wrapper around GenBitmapButton to have more control
     over the widget on different platforms/wxpython versions"""
@@ -151,6 +164,19 @@
             wx.StaticBox.SetToolTipString(self, tip)
 
 
+class CheckListBox(wx.CheckListBox):
+    """Wrapper around wx.CheckListBox to have more control
+    over the widget on different platforms/wxpython versions"""
+    def __init__(self, *args, **kwargs):
+        wx.CheckListBox.__init__(self, *args, **kwargs)
+
+    def SetToolTip(self, tip):
+        if wxPythonPhoenix:
+            wx.CheckListBox.SetToolTip(self, tipString=tip)
+        else:
+            wx.CheckListBox.SetToolTipString(self, tip)
+
+
 class TextCtrl(wx.TextCtrl):
     """Wrapper around wx.TextCtrl to have more control
     over the widget on different platforms/wxpython versions"""
Index: gui/wxpython/iclass/dialogs.py
===================================================================
--- gui/wxpython/iclass/dialogs.py	(revision 72985)
+++ gui/wxpython/iclass/dialogs.py	(working copy)
@@ -33,6 +33,7 @@
 from gui_core import gselect
 from gui_core.widgets import SimpleValidator
 from iclass.statistics import Statistics, BandStatistics
+from gui_core.wrap import CheckBox
 
 import grass.script as grass
 
@@ -786,10 +787,10 @@
             self.vectorNameCtrl.SetValue(self.vectorName)
         dataSizer.Add(self.vectorNameCtrl,
                       proportion=0, flag=wx.ALL | wx.EXPAND, border=3)
-        self.withTableCtrl = wx.CheckBox(parent=self.panel, id=wx.ID_ANY,
+        self.withTableCtrl = CheckBox(parent=self.panel, id=wx.ID_ANY,
                                          label=_("Export attribute table"))
         self.withTableCtrl.SetValue(True)
-        self.withTableCtrl.SetToolTipString(
+        self.withTableCtrl.SetToolTip(
             _("Export attribute table containing" " computed statistical data"))
 
         dataSizer.Add(self.withTableCtrl,
Index: gui/wxpython/iclass/frame.py
===================================================================
--- gui/wxpython/iclass/frame.py	(revision 72985)
+++ gui/wxpython/iclass/frame.py	(working copy)
@@ -19,6 +19,7 @@
 
 import os
 import sys
+import six
 import copy
 import tempfile
 import types
@@ -1462,7 +1463,7 @@
 
     def GetAlias(self, name):
         """Returns alias for layer"""
-        name = [k for k, v in self.layerName.iteritems() if v == name]
+        name = [k for k, v in six.iteritems(self.layerName) if v == name]
         if name:
             return name[0]
         return None
Index: gui/wxpython/iclass/statistics.py
===================================================================
--- gui/wxpython/iclass/statistics.py	(revision 72985)
+++ gui/wxpython/iclass/statistics.py	(working copy)
@@ -18,6 +18,7 @@
 """
 
 import os
+import six
 from ctypes import *
 
 import grass.script as grass
@@ -176,7 +177,7 @@
 
     def SetStatistics(self, stats):
 
-        for st, val in stats.iteritems():
+        for st, val in six.iteritems(stats):
             setattr(self, st, val)
 
         self.statisticsSet.emit(stats=stats)
Index: gui/wxpython/icons/icon.py
===================================================================
--- gui/wxpython/icons/icon.py	(revision 72985)
+++ gui/wxpython/icons/icon.py	(working copy)
@@ -18,6 +18,7 @@
 import os
 import sys
 import copy
+import six
 
 import wx
 
@@ -25,9 +26,10 @@
 from core.utils import _
 
 # default icon set
-import grass_icons
-iconSetDefault = grass_icons.iconSet
-iconPathDefault = grass_icons.iconPath
+from .grass_icons import iconSet as g_iconSet
+from .grass_icons import iconPath as g_iconPath
+iconSetDefault = g_iconSet
+iconPathDefault = g_iconPath
 
 iconTheme = UserSettings.Get(
     group='appearance',
@@ -46,7 +48,7 @@
     if iconPath and not os.path.exists(iconPath):
         raise OSError
 
-    for key, img in iconSet.iteritems():
+    for key, img in six.iteritems(iconSet):
         if key not in iconSet or \
                 iconSet[key] is None:  # add key
             iconSet[key] = img
Index: gui/wxpython/image2target/ii2t_manager.py
===================================================================
--- gui/wxpython/image2target/ii2t_manager.py	(revision 72985)
+++ gui/wxpython/image2target/ii2t_manager.py	(working copy)
@@ -35,6 +35,7 @@
 
 import os
 import sys
+import six
 import shutil
 import time
 from copy import copy
@@ -61,7 +62,7 @@
 from core.settings import UserSettings
 from gcp.mapdisplay import MapFrame
 from core.giface import Notification
-from gui_core.wrap import SpinCtrl
+from gui_core.wrap import SpinCtrl, Button
 
 from location_wizard.wizard import TitledPage as TitledPage
 
@@ -1293,7 +1294,7 @@
                    "ucolor": "unused"}
         wpx = UserSettings.Get(group='gcpman', key='symbol', subkey='width')
 
-        for k, v in colours.iteritems():
+        for k, v in six.iteritems(colours):
             col = UserSettings.Get(group='gcpman', key='symbol', subkey=k)
             self.pointsToDrawSrc.GetPen(v).SetColour(wx.Colour(
                 col[0], col[1], col[2], 255))  # TODO GetPen neni to spatne?
@@ -2691,19 +2692,19 @@
         self.__CreateRectificationPage(notebook)
 
         # buttons
-        btnSave = wx.Button(self, wx.ID_SAVE)
-        btnApply = wx.Button(self, wx.ID_APPLY)
-        btnClose = wx.Button(self, wx.ID_CLOSE)
+        btnSave = Button(self, wx.ID_SAVE)
+        btnApply = Button(self, wx.ID_APPLY)
+        btnClose = Button(self, wx.ID_CLOSE)
         btnApply.SetDefault()
 
         # bindings
         btnApply.Bind(wx.EVT_BUTTON, self.OnApply)
-        btnApply.SetToolTipString(_("Apply changes for the current session"))
+        btnApply.SetToolTip(_("Apply changes for the current session"))
         btnSave.Bind(wx.EVT_BUTTON, self.OnSave)
-        btnSave.SetToolTipString(
+        btnSave.SetToolTip(
             _("Apply and save changes to user settings file (default for next sessions)"))
         btnClose.Bind(wx.EVT_BUTTON, self.OnClose)
-        btnClose.SetToolTipString(_("Close dialog"))
+        btnClose.SetToolTip(_("Close dialog"))
 
         # sizers
         btnSizer = wx.BoxSizer(wx.HORIZONTAL)
Index: gui/wxpython/iscatt/controllers.py
===================================================================
--- gui/wxpython/iscatt/controllers.py	(revision 72985)
+++ gui/wxpython/iscatt/controllers.py	(working copy)
@@ -23,6 +23,7 @@
 import sys
 from copy import deepcopy
 import wx
+import six
 
 
 from core.gcmd import GException, GError, GMessage, RunCommand, GWarning
@@ -366,7 +367,7 @@
     def SetPlotsMode(self, mode):
 
         self.plot_mode = mode
-        for scatt in self.plots.itervalues():
+        for scatt in six.itervalues(self.plots):
             if scatt['scatt']:
                 scatt['scatt'].SetMode(mode)
 
@@ -374,7 +375,7 @@
 
     def ActivateSelectionPolygonMode(self, activate):
         self.pol_sel_mode[0] = activate
-        for scatt in self.plots.itervalues():
+        for scatt in six.itervalues(self.plots):
             if not scatt['scatt']:
                 continue
             scatt['scatt'].SetSelectionPolygonMode(activate)
@@ -387,7 +388,7 @@
 
     def ProcessSelectionPolygons(self, process_mode):
         scatts_polygons = {}
-        for scatt_id, scatt in self.plots.iteritems():
+        for scatt_id, scatt in six.iteritems(self.plots):
             if not scatt['scatt']:
                 continue
             coords = scatt['scatt'].GetCoords()
@@ -419,7 +420,7 @@
         if not sel_cat_id:
             return
 
-        for scatt in self.plots.itervalues():
+        for scatt in six.itervalues(self.plots):
             if scatt['scatt']:
                 scatt['scatt'].SetEmpty()
 
@@ -544,7 +545,7 @@
             else:
                 ellipses_dt = {}
 
-            for c in scatt_dt.iterkeys():
+            for c in six.iterkeys(scatt_dt):
                 try:
                     self.cat_ids.remove(c)
                     scatt_dt[c]['render'] = True
@@ -700,7 +701,7 @@
         render = False
         update_cat_rast = []
 
-        for k, v in attrs_dict.iteritems():
+        for k, v in six.iteritems(attrs_dict):
             if not render and k in ['color', 'opacity', 'show', 'nstd']:
                 render = True
             if k in ['color', 'name']:
@@ -975,7 +976,7 @@
 
     def RenderCatRast(self, cat_id):
 
-        if not cat_id in self.added_cats_rasts.iterkeys():
+        if not cat_id in six.iterkeys(self.added_cats_rasts):
             cat_rast = self.scatt_mgr.core.GetCatRast(cat_id)
 
             cat_name = self.cats_mgr.GetCategoryAttrs(cat_id)['name']
Index: gui/wxpython/iscatt/core_c.py
===================================================================
--- gui/wxpython/iscatt/core_c.py	(revision 72985)
+++ gui/wxpython/iscatt/core_c.py	(working copy)
@@ -12,6 +12,7 @@
 """
 
 import sys
+import six
 import numpy as np
 from multiprocessing import Process, Queue
 
@@ -107,13 +108,13 @@
 
 def _memmapToFileNames(data):
 
-    for k, v in data.iteritems():
+    for k, v in six.iteritems(data):
         if 'np_vals' in v:
             data[k]['np_vals'] = v['np_vals'].filename()
 
 
 def _fileNamesToMemmap(data):
-    for k, v in data.iteritems():
+    for k, v in six.iteritems(data):
         if 'np_vals' in v:
             data[k]['np_vals'] = np.memmap(filename=v['np_vals'])
 
@@ -186,7 +187,7 @@
                     'nsres': 'ns_res',
                     'ewres': 'ew_res'}
 
-    for k, v in region.iteritems():
+    for k, v in six.iteritems(region):
         if k in ["rows", "cols", "cells", "zone"]:  # zone added in r65224
             v = int(v)
         else:
@@ -221,11 +222,11 @@
     refs = []
     cats_rasts_core = []
 
-    for cat_id, scatt_ids in cats.iteritems():
+    for cat_id, scatt_ids in six.iteritems(cats):
         cat_c_id = I_sc_add_cat(pointer(sccats))
         cats_rasts_core.append(cats_rasts[cat_id])
 
-        for scatt_id, dt in scatt_ids.iteritems():
+        for scatt_id, dt in six.iteritems(scatt_ids):
             # if key is missing condition is always True (full scatter plor is
             # computed)
             vals = dt['np_vals']
Index: gui/wxpython/iscatt/dialogs.py
===================================================================
--- gui/wxpython/iscatt/dialogs.py	(revision 72985)
+++ gui/wxpython/iscatt/dialogs.py	(working copy)
@@ -19,6 +19,7 @@
 """
 import os
 import sys
+import six
 
 import wx
 from iscatt.iscatt_core import idBandsToidScatt
@@ -31,7 +32,7 @@
 from core.gcmd import GMessage
 from core.settings import UserSettings
 from gui_core.dialogs import SimpleDialog
-from gui_core.wrap import SpinCtrl
+from gui_core.wrap import SpinCtrl, Button
 
 
 class AddScattPlotDialog(wx.Dialog):
@@ -360,7 +361,7 @@
                 "selection", _("Color of selection polygon vertex:")], "sel_area": [
                 "selection", _("Selected area color:")]}
 
-        for settKey, sett in self.colorsSetts.iteritems():
+        for settKey, sett in six.iteritems(self.colorsSetts):
             settsLabels[settKey] = wx.StaticText(
                 parent=self, id=wx.ID_ANY, label=sett[1])
             col = UserSettings.Get(group='scatt', key=sett[0], subkey=settKey)
@@ -373,7 +374,7 @@
             "sel_area_opacty": ["selection", _("Selected area opacity:")]
         }
 
-        for settKey, sett in self.sizeSetts.iteritems():
+        for settKey, sett in six.iteritems(self.sizeSetts):
             settsLabels[settKey] = wx.StaticText(
                 parent=self, id=wx.ID_ANY, label=sett[1])
             self.settings[settKey] = SpinCtrl(
@@ -386,20 +387,20 @@
             self.settings[settKey].SetValue(size)
 
         # buttons
-        self.btnSave = wx.Button(self, wx.ID_SAVE)
-        self.btnApply = wx.Button(self, wx.ID_APPLY)
-        self.btnClose = wx.Button(self, wx.ID_CLOSE)
+        self.btnSave = Button(self, wx.ID_SAVE)
+        self.btnApply = Button(self, wx.ID_APPLY)
+        self.btnClose = Button(self, wx.ID_CLOSE)
         self.btnApply.SetDefault()
 
         # bindings
         self.btnApply.Bind(wx.EVT_BUTTON, self.OnApply)
-        self.btnApply.SetToolTipString(
+        self.btnApply.SetToolTip(
             _("Apply changes for the current session"))
         self.btnSave.Bind(wx.EVT_BUTTON, self.OnSave)
-        self.btnSave.SetToolTipString(
+        self.btnSave.SetToolTip(
             _("Apply and save changes to user settings file (default for next sessions)"))
         self.btnClose.Bind(wx.EVT_BUTTON, self.OnClose)
-        self.btnClose.SetToolTipString(_("Close dialog"))
+        self.btnClose.SetToolTip(_("Close dialog"))
 
         # Layout
 
@@ -480,7 +481,7 @@
     def UpdateSettings(self):
 
         chanaged_setts = []
-        for settKey, sett in self.colorsSetts.iteritems():
+        for settKey, sett in six.iteritems(self.colorsSetts):
             col = tuple(self.settings[settKey].GetColour())
             col_s = UserSettings.Get(
                 group='scatt', key=sett[0], subkey=settKey)
@@ -491,7 +492,7 @@
                                  value=col)
                 chanaged_setts.append([settKey, sett[0]])
 
-        for settKey, sett in self.sizeSetts.iteritems():
+        for settKey, sett in six.iteritems(self.sizeSetts):
             val = self.settings[settKey].GetValue()
             val_s = UserSettings.Get(
                 group='scatt', key=sett[0], subkey=settKey)
Index: gui/wxpython/iscatt/frame.py
===================================================================
--- gui/wxpython/iscatt/frame.py	(revision 72985)
+++ gui/wxpython/iscatt/frame.py	(working copy)
@@ -22,6 +22,7 @@
 
 import os
 import sys
+import six
 
 import wx
 import wx.lib.scrolledpanel as scrolled
@@ -260,7 +261,7 @@
         self.scatt_mgr.cursorPlotMove.connect(self.CursorPlotMove)
 
     def SetBusy(self, busy):
-        for scatt in self.scatts.itervalues():
+        for scatt in six.itervalues(self.scatts):
             scatt.UpdateCur(busy)
 
     def CursorPlotMove(self, x, y, scatt_id):
Index: gui/wxpython/iscatt/iscatt_core.py
===================================================================
--- gui/wxpython/iscatt/iscatt_core.py	(revision 72985)
+++ gui/wxpython/iscatt/iscatt_core.py	(working copy)
@@ -19,6 +19,7 @@
 """
 import os
 import sys
+import six
 
 import time
 
@@ -114,7 +115,7 @@
 
         arr = self.scatt_conds_dt.GetValuesArr(cat_id, scatt_id)
 
-        for k, v in bbox.iteritems():
+        for k, v in six.iteritems(bbox):
             bbox[k] = self._validExtend(v)
 
         arr[bbox['btm_y']: bbox['up_y'], bbox['btm_x']: bbox['up_x']] = value
@@ -159,7 +160,7 @@
         if cat_id not in self.scatts_dt.GetCategories():
             raise GException(_("Select category for editing."))
 
-        for scatt_id, coords in scatts_pols.iteritems():
+        for scatt_id, coords in six.iteritems(scatts_pols):
 
             if self.scatt_conds_dt.AddScattPlot(cat_id, scatt_id) < 0:
                 return False
@@ -471,7 +472,7 @@
         if cat_id not in self.cats.keys():
             return False
 
-        for scatt in self.cats[cat_id].itervalues():
+        for scatt in six.itervalues(self.cats[cat_id]):
             grass.try_remove(scatt['np_vals'])
             del scatt['np_vals']
 
@@ -552,7 +553,7 @@
     def GetData(self, requested_dt):
 
         cats = {}
-        for cat_id, scatt_ids in requested_dt.iteritems():
+        for cat_id, scatt_ids in six.iteritems(requested_dt):
             if cat_id not in cats:
                 cats[cat_id] = {}
             for scatt_id in scatt_ids:
@@ -567,7 +568,7 @@
 
     def SetData(self, cats):
 
-        for cat_id, scatt_ids in cats.iteritems():
+        for cat_id, scatt_ids in six.iteritems(cats):
             for scatt_id in scatt_ids:
                 # if key is missing condition is always True (full scatter plor
                 # is computed)
@@ -577,7 +578,7 @@
 
     def GetScatt(self, scatt_id, cats_ids=None):
         scatts = {}
-        for cat_id in self.cats.iterkeys():
+        for cat_id in six.iterkeys(self.cats):
             if cats_ids and cat_id not in cats_ids:
                 continue
             if scatt_id not in self.cats[cat_id]:
@@ -644,7 +645,7 @@
             return False
 
         self.scatts_ids.append(scatt_id)
-        for cat_id in self.cats.iterkeys():
+        for cat_id in six.iterkeys(self.cats):
             ScattPlotsCondsData.AddScattPlot(self, cat_id, scatt_id)
             self.cats[cat_id][scatt_id]['ellipse'] = None
 
@@ -657,7 +658,7 @@
 
         self.scatts_ids.remove(scatt_id)
 
-        for cat_id in self.cats.iterkeys():
+        for cat_id in six.iterkeys(self.cats):
             ScattPlotsCondsData.DeleteScattPlot(self, cat_id, scatt_id)
 
         return True
@@ -667,7 +668,7 @@
             return False
 
         scatts = {}
-        for cat_id in self.cats.iterkeys():
+        for cat_id in six.iterkeys(self.cats):
             if cat_id == 0:
                 continue
             nstd = styles[cat_id]['nstd']
@@ -740,9 +741,9 @@
     def CleanUp(self):
 
         ScattPlotsCondsData.CleanUp(self)
-        for tmp in self.cats_rasts_conds.itervalues():
+        for tmp in six.itervalues(self.cats_rasts_conds):
             grass.try_remove(tmp)
-        for tmp in self.cats_rasts.itervalues():
+        for tmp in six.itervalues(self.cats_rasts):
             RunCommand("g.remove", flags='f',
                        type='raster', name=tmp,
                        getErrorMsg=True)
@@ -762,7 +763,7 @@
         max_cat_id = max(self.cats_rasts_conds.keys())
 
         cats_rasts_conds = [''] * (max_cat_id + 1)
-        for i_cat_id, i_rast in self.cats_rasts_conds.iteritems():
+        for i_cat_id, i_rast in six.iteritems(self.cats_rasts_conds):
             cats_rasts_conds[i_cat_id] = i_rast
 
         return cats_rasts_conds
@@ -771,7 +772,7 @@
         max_cat_id = max(self.cats_rasts.keys())
 
         cats_rasts = [''] * (max_cat_id + 1)
-        for i_cat_id, i_rast in self.cats_rasts.iteritems():
+        for i_cat_id, i_rast in six.iteritems(self.cats_rasts):
             cats_rasts[i_cat_id] = i_rast
 
         return cats_rasts
Index: gui/wxpython/iscatt/plots.py
===================================================================
--- gui/wxpython/iscatt/plots.py	(revision 72985)
+++ gui/wxpython/iscatt/plots.py	(working copy)
@@ -16,6 +16,7 @@
 @author Stepan Turek <stepan.turek seznam.cz> (mentor: Martin Landa)
 """
 import wx
+import six
 import numpy as np
 from math import ceil
 from multiprocessing import Process, Queue
@@ -550,7 +551,7 @@
 
 def _rendDtMemmapsToFiles(rend_dt):
 
-    for k, v in rend_dt.iteritems():
+    for k, v in six.iteritems(rend_dt):
         if 'dt' in v:
             rend_dt[k]['sh'] = v['dt'].shape
             rend_dt[k]['dt'] = v['dt'].filename
@@ -558,7 +559,7 @@
 
 def _rendDtFilesToMemmaps(rend_dt):
 
-    for k, v in rend_dt.iteritems():
+    for k, v in six.iteritems(rend_dt):
         if 'dt' in v:
             rend_dt[k]['dt'] = np.memmap(filename=v['dt'], shape=v['sh'])
             del rend_dt[k]['sh']
Index: gui/wxpython/location_wizard/base.py
===================================================================
--- gui/wxpython/location_wizard/base.py	(revision 72985)
+++ gui/wxpython/location_wizard/base.py	(working copy)
@@ -17,6 +17,7 @@
 """
 
 import wx
+from gui_core.wrap import StaticText, TextCtrl, Button, CheckBox
 
 
 class BaseClass(wx.Object):
@@ -30,10 +31,10 @@
         """Make aligned label"""
         if not parent:
             parent = self
-        label = wx.StaticText(parent=parent, id=wx.ID_ANY, label=text,
+        label = StaticText(parent=parent, id=wx.ID_ANY, label=text,
                               style=style)
         if tooltip:
-            label.SetToolTipString(tooltip)
+            label.SetToolTip(tooltip)
         return label
 
     def MakeTextCtrl(self, text='', size=(100, -1),
@@ -41,10 +42,10 @@
         """Generic text control"""
         if not parent:
             parent = self
-        textCtrl = wx.TextCtrl(parent=parent, id=wx.ID_ANY, value=text,
+        textCtrl = TextCtrl(parent=parent, id=wx.ID_ANY, value=text,
                                size=size, style=style)
         if tooltip:
-            textCtrl.SetToolTipString(tooltip)
+            textCtrl.SetToolTip(tooltip)
         return textCtrl
 
     def MakeButton(self, text, id=wx.ID_ANY, size=(-1, -1),
@@ -52,10 +53,10 @@
         """Generic button"""
         if not parent:
             parent = self
-        button = wx.Button(parent=parent, id=id, label=text,
+        button = Button(parent=parent, id=id, label=text,
                            size=size)
         if tooltip:
-            button.SetToolTipString(tooltip)
+            button.SetToolTip(tooltip)
         return button
 
     def MakeCheckBox(self, text, id=wx.ID_ANY, size=(-1, -1),
@@ -63,8 +64,8 @@
         """Generic checkbox"""
         if not parent:
             parent = self
-        chbox = wx.CheckBox(parent=parent, id=id, label=text,
+        chbox = CheckBox(parent=parent, id=id, label=text,
                              size=size)
         if tooltip:
-            chbox.SetToolTipString(tooltip)
+            chbox.SetToolTip(tooltip)
         return chbox
Index: gui/wxpython/location_wizard/wizard.py
===================================================================
--- gui/wxpython/location_wizard/wizard.py	(revision 72985)
+++ gui/wxpython/location_wizard/wizard.py	(working copy)
@@ -35,6 +35,7 @@
 import os
 import sys
 import locale
+import six
 
 import wx
 import wx.lib.mixins.listctrl as listmix
@@ -53,7 +54,8 @@
 from core.utils import _
 from core.gcmd import RunCommand, GError, GMessage, GWarning
 from gui_core.widgets import GenericValidator
-from gui_core.wrap import SpinCtrl, SearchCtrl
+from gui_core.wrap import SpinCtrl, SearchCtrl, StaticText, \
+    TextCtrl, Button, CheckBox
 from location_wizard.base import BaseClass
 from location_wizard.dialogs import SelectTransformDialog
 
@@ -80,7 +82,7 @@
         self.page = WizardPageSimple.__init__(self, parent)
 
         # page title
-        self.title = wx.StaticText(parent=self, id=wx.ID_ANY, label=title)
+        self.title = StaticText(parent=self, id=wx.ID_ANY, label=title)
         self.title.SetFont(wx.Font(13, wx.SWISS, wx.NORMAL, wx.BOLD))
         # main sizers
         self.pagesizer = wx.BoxSizer(wx.VERTICAL)
@@ -108,10 +110,10 @@
         """Make aligned label"""
         if not parent:
             parent = self
-        label = wx.StaticText(parent=parent, id=wx.ID_ANY, label=text,
+        label = StaticText(parent=parent, id=wx.ID_ANY, label=text,
                               style=style)
         if tooltip:
-            label.SetToolTipString(tooltip)
+            label.SetToolTip(tooltip)
         return label
 
     def MakeTextCtrl(self, text='', size=(100, -1),
@@ -119,10 +121,10 @@
         """Generic text control"""
         if not parent:
             parent = self
-        textCtrl = wx.TextCtrl(parent=parent, id=wx.ID_ANY, value=text,
+        textCtrl = TextCtrl(parent=parent, id=wx.ID_ANY, value=text,
                                size=size, style=style)
         if tooltip:
-            textCtrl.SetToolTipString(tooltip)
+            textCtrl.SetToolTip(tooltip)
         return textCtrl
 
     def MakeButton(self, text, id=wx.ID_ANY, size=(-1, -1),
@@ -130,10 +132,10 @@
         """Generic button"""
         if not parent:
             parent = self
-        button = wx.Button(parent=parent, id=id, label=text,
+        button = Button(parent=parent, id=id, label=text,
                            size=size)
         if tooltip:
-            button.SetToolTipString(tooltip)
+            button.SetToolTip(tooltip)
         return button
 
     def MakeCheckBox(self, text, id=wx.ID_ANY, size=(-1, -1),
@@ -141,10 +143,10 @@
         """Generic checkbox"""
         if not parent:
             parent = self
-        chbox = wx.CheckBox(parent=parent, id=id, label=text,
+        chbox = CheckBox(parent=parent, id=id, label=text,
                             size=size)
         if tooltip:
-            chbox.SetToolTipString(tooltip)
+            chbox.SetToolTip(tooltip)
         return chbox
 
 
@@ -849,7 +851,7 @@
         """Go to next page"""
         if event.GetDirection():
             self.p4projparams = ''
-            for id, param in self.pparam.iteritems():
+            for id, param in six.iteritems(self.pparam):
                 if param['type'] == 'bool':
                     if param['value'] == False:
                         continue
@@ -1699,7 +1701,7 @@
             return
 
         data = list()
-        for code, val in self.epsgCodeDict.iteritems():
+        for code, val in six.iteritems(self.epsgCodeDict):
             if code is not None:
                 data.append((code, val[0], val[1]))
 
@@ -1946,7 +1948,7 @@
             return
 
         data = list()
-        for code, val in self.epsgCodeDict.iteritems():
+        for code, val in six.iteritems(self.epsgCodeDict):
             if code is not None:
                 data.append((code, val[0], val[1]))
 
Index: gui/wxpython/mapdisp/main.py
===================================================================
--- gui/wxpython/mapdisp/main.py	(revision 72985)
+++ gui/wxpython/mapdisp/main.py	(working copy)
@@ -30,6 +30,7 @@
 
 import os
 import sys
+import six
 import time
 import shutil
 import fileinput
@@ -562,7 +563,7 @@
             # stop the timer
             # self.timer.Stop()
             # terminate thread
-            for f in monFile.itervalues():
+            for f in six.itervalues(monFile):
                 try_remove(f)
 
     def watcher(self):
Index: gui/wxpython/mapdisp/statusbar.py
===================================================================
--- gui/wxpython/mapdisp/statusbar.py	(revision 72985)
+++ gui/wxpython/mapdisp/statusbar.py	(working copy)
@@ -44,7 +44,7 @@
 from grass.pydispatch.signal import Signal
 
 
-class SbException:
+class SbException(Exception):
     """Exception class used in SbManager and SbItems"""
 
     def __init__(self, message):
Index: gui/wxpython/mapdisp/test_mapdisp.py
===================================================================
--- gui/wxpython/mapdisp/test_mapdisp.py	(revision 72985)
+++ gui/wxpython/mapdisp/test_mapdisp.py	(working copy)
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 
 ############################################################################
 #
Index: gui/wxpython/mapwin/base.py
===================================================================
--- gui/wxpython/mapwin/base.py	(revision 72985)
+++ gui/wxpython/mapwin/base.py	(working copy)
@@ -20,6 +20,7 @@
 """
 
 import wx
+import six
 
 from core.settings import UserSettings
 from core.gcmd import GError
@@ -185,7 +186,7 @@
         """Binds helper functions, which calls all handlers
            registered to events with the events
         """
-        for ev, handlers in self.handlersContainer.iteritems():
+        for ev, handlers in six.iteritems(self.handlersContainer):
             self.Bind(ev, self.EventTypeHandler(handlers))
 
     def EventTypeHandler(self, evHandlers):
@@ -255,7 +256,7 @@
         """
         self.mouseHandlerRegistered.emit()
         # inserts handler into list
-        for containerEv, handlers in self.handlersContainer.iteritems():
+        for containerEv, handlers in six.iteritems(self.handlersContainer):
             if event == containerEv:
                 handlers.append(handler)
 
@@ -276,7 +277,7 @@
         Before each handler is unregistered it is called with string
         value "unregistered" of event parameter.
         """
-        for containerEv, handlers in self.handlersContainer.iteritems():
+        for containerEv, handlers in six.iteritems(self.handlersContainer):
             for handler in handlers:
                 try:
                     handler("unregistered")
@@ -304,7 +305,7 @@
         :return: False if event cannot be unbind
         """
         # removes handler from list
-        for containerEv, handlers in self.handlersContainer.iteritems():
+        for containerEv, handlers in six.iteritems(self.handlersContainer):
             if event != containerEv:
                 continue
             try:
Index: gui/wxpython/mapwin/buffered.py
===================================================================
--- gui/wxpython/mapwin/buffered.py	(revision 72985)
+++ gui/wxpython/mapwin/buffered.py	(working copy)
@@ -807,7 +807,7 @@
         else:
             img = None
 
-        for key in self.imagedict.keys():
+        for key in list(self.imagedict.keys()):
             if self.imagedict[key]['id'] == imgId:
                 del self.imagedict[key]
 
Index: gui/wxpython/modules/colorrules.py
===================================================================
--- gui/wxpython/modules/colorrules.py	(revision 72985)
+++ gui/wxpython/modules/colorrules.py	(working copy)
@@ -26,6 +26,7 @@
 import shutil
 import copy
 import tempfile
+import six
 
 import wx
 import wx.lib.colourselect as csel
@@ -45,7 +46,7 @@
 from core.debug import Debug as Debug
 from core.settings import UserSettings
 from gui_core.widgets import ColorTablesComboBox
-from gui_core.wrap import SpinCtrl, PseudoDC
+from gui_core.wrap import SpinCtrl, PseudoDC, TextCtrl, Button
 
 
 class RulesPanel:
@@ -133,11 +134,11 @@
             enable.SetName('enable')
             enable.Bind(wx.EVT_CHECKBOX, self.OnRuleEnable)
             # value
-            txt_ctrl = wx.TextCtrl(parent=self.mainPanel, id=1000 + num,
+            txt_ctrl = TextCtrl(parent=self.mainPanel, id=1000 + num,
                                    size=(80, -1),
                                    style=wx.TE_NOHIDESEL)
             if self.mapType == 'vector':
-                txt_ctrl.SetToolTipString(_("Enter vector attribute values"))
+                txt_ctrl.SetToolTip(_("Enter vector attribute values"))
             txt_ctrl.Bind(wx.EVT_TEXT, self.OnRuleValue)
             txt_ctrl.SetName('source')
             if self.attributeType == 'color':
@@ -578,12 +579,12 @@
         bodySizer.Add(self.rulesPanel.clearAll, pos=(row, 1))
 
         # preview button
-        self.btnPreview = wx.Button(parent, id=wx.ID_ANY,
+        self.btnPreview = Button(parent, id=wx.ID_ANY,
                                     label=_("Preview"))
         bodySizer.Add(self.btnPreview, pos=(row, 2),
                       flag=wx.ALIGN_RIGHT)
         self.btnPreview.Enable(False)
-        self.btnPreview.SetToolTipString(
+        self.btnPreview.SetToolTip(
             _("Show preview of map " "(current Map Display extent is used)."))
 
         row += 1
@@ -682,7 +683,7 @@
                 return
 
         rulestxt = ''
-        for rule in self.rulesPanel.ruleslines.itervalues():
+        for rule in six.itervalues(self.rulesPanel.ruleslines):
             if 'value' not in rule:
                 continue
             rulestxt += rule['value'] + ' ' + rule['color'] + '\n'
@@ -793,7 +794,7 @@
         """
         rulestxt = ''
 
-        for rule in self.rulesPanel.ruleslines.itervalues():
+        for rule in six.itervalues(self.rulesPanel.ruleslines):
             if 'value' not in rule:  # skip empty rules
                 continue
 
@@ -1135,9 +1136,9 @@
         self.sourceColumn = ColumnSelect(parent)
         self.fromColumn = ColumnSelect(parent)
         self.toColumn = ColumnSelect(parent)
-        self.addColumn = wx.Button(parent, id=wx.ID_ANY,
+        self.addColumn = Button(parent, id=wx.ID_ANY,
                                    label=_('Add column'))
-        self.addColumn.SetToolTipString(
+        self.addColumn.SetToolTip(
             _("Add GRASSRGB column to current attribute table."))
 
         # layout
@@ -1808,7 +1809,7 @@
         """
         rulestxt = ''
 
-        for rule in self.rulesPanel.ruleslines.itervalues():
+        for rule in six.itervalues(self.rulesPanel.ruleslines):
             if 'value' not in rule:  # skip empty rules
                 break
 
Index: gui/wxpython/modules/extensions.py
===================================================================
--- gui/wxpython/modules/extensions.py	(revision 72985)
+++ gui/wxpython/modules/extensions.py	(working copy)
@@ -33,6 +33,7 @@
 from gui_core.widgets import GListCtrl, SearchModuleWidget
 from gui_core.treeview import CTreeView
 from core.toolboxes import toolboxesOutdated
+from gui_core.wrap import Button
 
 
 class InstallExtensionWindow(wx.Frame):
@@ -109,18 +110,18 @@
 
         self.statusbar = self.CreateStatusBar(number=1)
 
-        self.btnFetch = wx.Button(parent=self.panel, id=wx.ID_ANY,
-                                  label=_("&Fetch"))
-        self.btnFetch.SetToolTipString(_("Fetch list of available modules "
-                                         "from GRASS Addons SVN repository"))
-        self.btnClose = wx.Button(parent=self.panel, id=wx.ID_CLOSE)
-        self.btnInstall = wx.Button(parent=self.panel, id=wx.ID_ANY,
-                                    label=_("&Install"))
-        self.btnInstall.SetToolTipString(
+        self.btnFetch = Button(parent=self.panel, id=wx.ID_ANY,
+                               label=_("&Fetch"))
+        self.btnFetch.SetToolTip(_("Fetch list of available modules "
+                                   "from GRASS Addons SVN repository"))
+        self.btnClose = Button(parent=self.panel, id=wx.ID_CLOSE)
+        self.btnInstall = Button(parent=self.panel, id=wx.ID_ANY,
+                                 label=_("&Install"))
+        self.btnInstall.SetToolTip(
             _("Install selected add-ons GRASS module"))
         self.btnInstall.Enable(False)
-        self.btnHelp = wx.Button(parent=self.panel, id=wx.ID_HELP)
-        self.btnHelp.SetToolTipString(_("Show g.extension manual page"))
+        self.btnHelp = Button(parent=self.panel, id=wx.ID_HELP)
+        self.btnHelp.SetToolTip(_("Show g.extension manual page"))
 
         self.btnClose.Bind(wx.EVT_BUTTON, lambda evt: self.Close())
         self.btnFetch.Bind(wx.EVT_BUTTON, self.OnFetch)
@@ -408,17 +409,17 @@
         self.extList = CheckListExtension(parent=self.panel)
 
         # buttons
-        self.btnUninstall = wx.Button(
+        self.btnUninstall = Button(
             parent=self.panel,
             id=wx.ID_REMOVE,
             label=_("Uninstall"))
-        self.btnUninstall.SetToolTipString(
+        self.btnUninstall.SetToolTip(
             _("Uninstall selected Addons extensions"))
-        self.btnUpdate = wx.Button(
+        self.btnUpdate = Button(
             parent=self.panel,
             id=wx.ID_REFRESH,
             label=_("Reinstall"))
-        self.btnUpdate.SetToolTipString(
+        self.btnUpdate.SetToolTip(
             _("Reinstall selected Addons extensions"))
 
         self.btnClose = wx.Button(parent=self.panel, id=wx.ID_CLOSE)
Index: gui/wxpython/modules/vclean.py
===================================================================
--- gui/wxpython/modules/vclean.py	(revision 72985)
+++ gui/wxpython/modules/vclean.py	(working copy)
@@ -25,6 +25,7 @@
 from gui_core.gselect import Select
 from core.settings import UserSettings
 from grass.script import core as grass
+from gui_core.wrap import Button
 
 
 class VectorCleaningFrame(wx.Frame):
@@ -156,10 +157,10 @@
         self.ct_panel = self._toolsPanel()
 
         # buttons to manage cleaning tools
-        self.btn_add = wx.Button(parent=self.panel, id=wx.ID_ADD)
-        self.btn_remove = wx.Button(parent=self.panel, id=wx.ID_REMOVE)
-        self.btn_moveup = wx.Button(parent=self.panel, id=wx.ID_UP)
-        self.btn_movedown = wx.Button(parent=self.panel, id=wx.ID_DOWN)
+        self.btn_add = Button(parent=self.panel, id=wx.ID_ADD)
+        self.btn_remove = Button(parent=self.panel, id=wx.ID_REMOVE)
+        self.btn_moveup = Button(parent=self.panel, id=wx.ID_UP)
+        self.btn_movedown = Button(parent=self.panel, id=wx.ID_DOWN)
 
         # add one tool as default
         self.AddTool()
@@ -166,16 +167,16 @@
         self.selected = -1
 
         # Buttons
-        self.btn_close = wx.Button(parent=self.panel, id=wx.ID_CLOSE)
-        self.btn_run = wx.Button(
+        self.btn_close = Button(parent=self.panel, id=wx.ID_CLOSE)
+        self.btn_run = Button(
             parent=self.panel,
             id=wx.ID_ANY,
             label=_("&Run"))
         self.btn_run.SetDefault()
-        self.btn_clipboard = wx.Button(parent=self.panel, id=wx.ID_COPY)
-        self.btn_clipboard.SetToolTipString(
+        self.btn_clipboard = Button(parent=self.panel, id=wx.ID_COPY)
+        self.btn_clipboard.SetToolTip(
             _("Copy the current command string to the clipboard (Ctrl+C)"))
-        self.btn_help = wx.Button(parent=self.panel, id=wx.ID_HELP)
+        self.btn_help = Button(parent=self.panel, id=wx.ID_HELP)
 
         # bindings
         self.btn_close.Bind(wx.EVT_BUTTON, self.OnClose)
Index: gui/wxpython/nviz/mapwindow.py
===================================================================
--- gui/wxpython/nviz/mapwindow.py	(revision 72985)
+++ gui/wxpython/nviz/mapwindow.py	(working copy)
@@ -20,6 +20,7 @@
 
 import os
 import sys
+import six
 import time
 import copy
 import math
@@ -483,7 +484,7 @@
             and then to textures so that they can be rendered by OpenGL.
             Updates self.imagelist"""
         # update images (legend and text)
-        for oid, overlay in self.overlays.iteritems():
+        for oid, overlay in six.iteritems(self.overlays):
             if not overlay.IsShown() or overlay.name in ('barscale', 'northarrow'):
                 continue
             if oid not in [t.GetId() for t in self.imagelist]:  # new
Index: gui/wxpython/nviz/preferences.py
===================================================================
--- gui/wxpython/nviz/preferences.py	(revision 72985)
+++ gui/wxpython/nviz/preferences.py	(working copy)
@@ -26,7 +26,7 @@
 from core.settings import UserSettings
 from core.utils import _
 from gui_core.preferences import PreferencesBaseDialog
-from gui_core.wrap import SpinCtrl
+from gui_core.wrap import SpinCtrl, Button, CheckBox
 
 
 class NvizPreferencesDialog(PreferencesBaseDialog):
@@ -58,7 +58,7 @@
 
         self.SetMinSize(self.GetBestSize())
         self.SetSize(self.size)
-        self.btnDefault.SetToolTipString(
+        self.btnDefault.SetToolTip(
             _("Revert settings to default, changes are not applied"))
 
     def _createViewPage(self, notebook):
@@ -595,8 +595,8 @@
 
         row = 0
         # icon size
-        autosize = wx.CheckBox(parent=panel, label=_("Automatic size"))
-        autosize.SetToolTipString(_("Icon size is set automatically based on landscape dimensions."))
+        autosize = CheckBox(parent=panel, label=_("Automatic size"))
+        autosize.SetToolTip(_("Icon size is set automatically based on landscape dimensions."))
         gridSizer.Add(autosize, pos=(row, 0), flag=wx.ALIGN_CENTER_VERTICAL)
         self.winId['nviz:vector:points:autosize'] = autosize.GetId()
         autosize.SetValue(UserSettings.Get(group='nviz', key='vector',
Index: gui/wxpython/nviz/tools.py
===================================================================
--- gui/wxpython/nviz/tools.py	(revision 72985)
+++ gui/wxpython/nviz/tools.py	(working copy)
@@ -23,6 +23,7 @@
 import sys
 import copy
 import types
+import six
 
 import wx
 import wx.lib.colourselect as csel
@@ -53,7 +54,8 @@
 from core.settings import UserSettings
 from gui_core.widgets import ScrolledPanel, NumTextCtrl, FloatSlider, SymbolButton
 from gui_core.gselect import Select
-from gui_core.wrap import SpinCtrl, PseudoDC
+from gui_core.wrap import SpinCtrl, PseudoDC, ToggleButton, Button \
+    TextCtrl
 from core.debug import Debug
 try:
     from nviz.mapwindow import wxUpdateProperties, wxUpdateView,\
@@ -412,33 +414,33 @@
                                     label=_("Look:")),
                       flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL,
                       border=5)
-        here = wx.ToggleButton(panel, id=wx.ID_ANY, label=_("here"))
+        here = ToggleButton(panel, id=wx.ID_ANY, label=_("here"))
         here.Bind(wx.EVT_TOGGLEBUTTON, self.OnLookAt)
         here.SetName('here')
-        here.SetToolTipString(_("Allows you to select a point on the surface "
-                                "that becomes the new center of view. "
-                                "Click on the button and then on the surface."))
+        here.SetToolTip(_("Allows you to select a point on the surface "
+                          "that becomes the new center of view. "
+                          "Click on the button and then on the surface."))
         viewSizer.Add(here, flag=wx.TOP | wx.BOTTOM |
                       wx.LEFT | wx.ALIGN_CENTER_VERTICAL, border=5)
 
-        center = wx.Button(panel, id=wx.ID_ANY, label=_("center"))
+        center = Button(panel, id=wx.ID_ANY, label=_("center"))
         center.Bind(wx.EVT_BUTTON, self.OnLookAt)
         center.SetName('center')
-        center.SetToolTipString(
+        center.SetToolTip(
             _("Resets the view to the original default center of view"))
         viewSizer.Add(center, flag=wx.TOP | wx.BOTTOM |
                       wx.ALIGN_CENTER_VERTICAL, border=5)
 
-        top = wx.Button(panel, id=wx.ID_ANY, label=_("top"))
+        top = Button(panel, id=wx.ID_ANY, label=_("top"))
         top.Bind(wx.EVT_BUTTON, self.OnLookAt)
         top.SetName('top')
-        top.SetToolTipString(
+        top.SetToolTip(
             _("Sets the viewer directly over the scene's center position. This top view orients approximately north south."))
         viewSizer.Add(top, flag=wx.TOP | wx.BOTTOM |
                       wx.ALIGN_CENTER_VERTICAL, border=5)
 
-        reset = wx.Button(panel, id=wx.ID_ANY, label=_("reset"))
-        reset.SetToolTipString(_("Reset to default view"))
+        reset = Button(panel, id=wx.ID_ANY, label=_("reset"))
+        reset.SetToolTip(_("Reset to default view"))
         reset.Bind(wx.EVT_BUTTON, self.OnResetView)
         viewSizer.Add(reset, proportion=0,
                       flag=wx.TOP | wx.BOTTOM | wx.RIGHT | wx.ALIGN_RIGHT,
@@ -630,11 +632,11 @@
             parent=panel,
             id=wx.ID_ANY,
             label=_("File prefix:"))
-        prefixCtrl = wx.TextCtrl(
+        prefixCtrl = TextCtrl(
             parent=panel, id=wx.ID_ANY, size=(100, -1),
             value=UserSettings.Get(
                 group='nviz', key='animation', subkey='prefix'))
-        prefixCtrl.SetToolTipString(
+        prefixCtrl.SetToolTip(
             _("Generated files names will look like this: prefix_1.ppm, prefix_2.ppm, ..."))
         fileTypeLabel = wx.StaticText(
             parent=panel, id=wx.ID_ANY, label=_("File format:"))
@@ -880,8 +882,8 @@
                       pos=(0, 4))
 
         # set to all
-        all = wx.Button(panel, id=wx.ID_ANY, label=_("Set to all"))
-        all.SetToolTipString(_("Use draw settings for all loaded surfaces"))
+        all = Button(panel, id=wx.ID_ANY, label=_("Set to all"))
+        all.SetToolTip(_("Use draw settings for all loaded surfaces"))
         all.Bind(wx.EVT_BUTTON, self.OnSurfaceModeAll)
         gridSizer.Add(
             all,
@@ -1069,8 +1071,8 @@
                                   "Y",
                                   "Z"])
 
-        reset = wx.Button(panel, id=wx.ID_ANY, label=_("Reset"))
-        reset.SetToolTipString(_("Reset to default position"))
+        reset = Button(panel, id=wx.ID_ANY, label=_("Reset"))
+        reset.SetToolTip(_("Reset to default position"))
         reset.Bind(wx.EVT_BUTTON, self.OnResetSurfacePosition)
         self.win['surface']['position']['reset'] = reset.GetId()
 
@@ -2038,8 +2040,8 @@
                                   "Y",
                                   "Z"])
 
-        reset = wx.Button(panel, id=wx.ID_ANY, label=_("Reset"))
-        reset.SetToolTipString(_("Reset to default position"))
+        reset = Button(panel, id=wx.ID_ANY, label=_("Reset"))
+        reset.SetToolTip(_("Reset to default position"))
         reset.Bind(wx.EVT_BUTTON, self.OnResetVolumePosition)
         self.win['volume']['position']['reset'] = reset.GetId()
 
@@ -2727,7 +2729,7 @@
             return
         name = _("constant#") + str(layerIdx + 1)
         data = self.mapWindow.constants[layerIdx]
-        for attr, value in data['constant'].iteritems():
+        for attr, value in six.iteritems(data['constant']):
             if attr == 'color':
                 value = self._getColorFromString(value)
             if attr in ('color', 'value', 'resolution', 'transp'):
@@ -2781,7 +2783,7 @@
         if not winName:
             return
         data[winName] = self.FindWindowById(event.GetId()).GetValue()
-        for w in win[winName].itervalues():
+        for w in six.itervalues(win[winName]):
             self.FindWindowById(w).SetValue(data[winName])
 
         event.Skip()
@@ -3123,9 +3125,9 @@
         sizer.Add(w, pos=(1, 0), flag=wx.ALIGN_CENTER)
 
     def __GetWindowName(self, data, id):
-        for name in data.iterkeys():
+        for name in six.iterkeys(data):
             if isinstance(data[name], type({})):
-                for win in data[name].itervalues():
+                for win in six.itervalues(data[name]):
                     if win == id:
                         return name
             else:
@@ -3141,7 +3143,7 @@
                         'persp',
                         'twist',
                         'z-exag'):
-            for win in self.win['view'][control].itervalues():
+            for win in six.itervalues(self.win['view'][control]):
                 try:
                     if control == 'height':
                         value = int(self.mapWindow.iview[control]['value'])
@@ -3182,7 +3184,7 @@
         value = self.FindWindowById(event.GetId()).GetValue()
 
         self.mapWindow.light['position']['z'] = value
-        for win in self.win['light'][winName].itervalues():
+        for win in six.itervalues(self.win['light'][winName]):
             self.FindWindowById(win).SetValue(value)
 
         self.PostLightEvent()
@@ -3305,7 +3307,7 @@
 
         view[winName]['value'] = convert(value)
 
-        for win in self.win['view'][winName].itervalues():
+        for win in six.itervalues(self.win['view'][winName]):
             self.FindWindowById(win).SetValue(value)
 
         self.mapWindow.iview['dir']['use'] = False
@@ -3367,7 +3369,7 @@
     def OnResetSurfacePosition(self, event):
         """Reset position of surface"""
 
-        for win in self.win['surface']['position'].itervalues():
+        for win in six.itervalues(self.win['surface']['position']):
             if win == self.win['surface']['position']['axis']:
                 self.FindWindowById(win).SetSelection(2)  # Z
             elif win == self.win['surface']['position']['reset']:
@@ -3499,13 +3501,13 @@
 
     def EnablePage(self, name, enabled=True):
         """Enable/disable all widgets on page"""
-        for key, item in self.win[name].iteritems():
+        for key, item in six.iteritems(self.win[name]):
             if key in ('map', 'surface', 'new', 'planes'):
                 continue
             if isinstance(item, types.DictType):
-                for skey, sitem in self.win[name][key].iteritems():
+                for skey, sitem in six.iteritems(self.win[name][key]):
                     if isinstance(sitem, types.DictType):
-                        for ssitem in self.win[name][key][skey].itervalues():
+                        for ssitem in six.itervalues(self.win[name][key][skey]):
                             if not isinstance(ssitem, types.BooleanType) and \
                                isinstance(ssitem, types.IntType):
                                 self.FindWindowById(ssitem).Enable(enabled)
@@ -3818,7 +3820,7 @@
         slider = self.FindWindowById(self.win['surface'][winName]['slider'])
         self.AdjustSliderRange(slider=slider, value=value)
 
-        for win in self.win['surface']['position'].itervalues():
+        for win in six.itervalues(self.win['surface']['position']):
             if win in (self.win['surface']['position']['axis'],
                        self.win['surface']['position']['reset']):
                 continue
@@ -4047,7 +4049,7 @@
             self.win['vector'][vtype]['height']['slider'])
         self.AdjustSliderRange(slider=slider, value=value)
 
-        for win in self.win['vector'][vtype]['height'].itervalues():
+        for win in six.itervalues(self.win['vector'][vtype]['height']):
             self.FindWindowById(win).SetValue(value)
 
         data = self.GetLayerData('vector')
@@ -4683,7 +4685,7 @@
         slider = self.FindWindowById(self.win['volume'][winName]['slider'])
         self.AdjustSliderRange(slider=slider, value=value)
 
-        for win in self.win['volume']['position'].itervalues():
+        for win in six.itervalues(self.win['volume']['position']):
             if win in (self.win['volume']['position']['axis'],
                        self.win['volume']['position']['reset']):
                 continue
@@ -4748,7 +4750,7 @@
 
     def OnResetVolumePosition(self, event):
         """Reset position of volume"""
-        for win in self.win['volume']['position'].itervalues():
+        for win in six.itervalues(self.win['volume']['position']):
             if win == self.win['volume']['position']['axis']:
                 self.FindWindowById(win).SetSelection(2)  # Z
             elif win == self.win['volume']['position']['reset']:
@@ -5315,7 +5317,7 @@
         #
         # draw
         #
-        for control, drawData in data['draw'].iteritems():
+        for control, drawData in six.iteritems(data['draw']):
             if control == 'all':  # skip 'all' property
                 continue
             if control == 'resolution':
@@ -5516,7 +5518,7 @@
             self.FindWindowById(self.win['volume']['map']).SetValue(layer.name)
 
         # draw
-        for control, idata in data['draw'].iteritems():
+        for control, idata in six.iteritems(data['draw']):
             if control == 'all':  # skip 'all' property
                 continue
 
Index: gui/wxpython/nviz/workspace.py
===================================================================
--- gui/wxpython/nviz/workspace.py	(revision 72985)
+++ gui/wxpython/nviz/workspace.py	(working copy)
@@ -15,6 +15,7 @@
 """
 
 import copy
+import six
 
 from core.settings import UserSettings
 from core.utils import _
@@ -33,8 +34,8 @@
     def SetConstantDefaultProp(self):
         """Set default constant data properties"""
         data = dict()
-        for key, value in UserSettings.Get(
-                group='nviz', key='constant').iteritems():
+        for key, value in six.iteritems(UserSettings.Get(group='nviz',
+                                                         key='constant')):
             data[key] = value
         color = str(data['color'][0]) + ':' + str(data['color']
                                                   [1]) + ':' + str(data['color'][2])
@@ -54,8 +55,9 @@
         #
         for attrb in ('shine', ):
             data['attribute'][attrb] = {}
-            for key, value in UserSettings.Get(group='nviz', key='surface',
-                                               subkey=attrb).iteritems():
+            for key, value in six.iteritems(UserSettings.Get(group='nviz',
+                                                             key='surface',
+                                                             subkey=attrb)):
                 data['attribute'][attrb][key] = value
             data['attribute'][attrb]['update'] = None
 
@@ -63,8 +65,9 @@
         # draw
         #
         data['draw']['all'] = False  # apply only for current surface
-        for control, value in UserSettings.Get(group='nviz', key='surface',
-                                               subkey='draw').iteritems():
+        for control, value in six.iteritems(UserSettings.Get(group='nviz',
+                                                             key='surface',
+                                                             subkey='draw')):
             if control[:3] == 'res':
                 if 'resolution' not in data['draw']:
                     data['draw']['resolution'] = {}
@@ -115,8 +118,9 @@
         #
         # draw
         #
-        for control, value in UserSettings.Get(
-                group='nviz', key='volume', subkey='draw').iteritems():
+        for control, value in six.iteritems(UserSettings.Get(group='nviz',
+                                                             key='volume',
+                                                             subkey='draw')):
             if control == 'shading':
                 sel = UserSettings.Get(
                     group='nviz', key='volume', subkey=[
@@ -157,8 +161,9 @@
         #
         for attrb in ('shine', ):
             data['attribute'][attrb] = {}
-            for key, value in UserSettings.Get(group='nviz', key='volume',
-                                               subkey=attrb).iteritems():
+            for key, value in six.iteritems(UserSettings.Get(group='nviz',
+                                                             key='volume',
+                                                             subkey=attrb)):
                 data['attribute'][attrb][key] = value
 
         return data
@@ -172,8 +177,9 @@
             if attr == 'inout':
                 data[attr]['value'] = 0
                 continue
-            for key, value in UserSettings.Get(group='nviz', key='volume',
-                                               subkey=attr).iteritems():
+            for key, value in six.iteritems(UserSettings.Get(group='nviz',
+                                                             key='volume',
+                                                             subkey=attr)):
                 data[attr][key] = value
         return data
 
Index: gui/wxpython/photo2image/ip2i_manager.py
===================================================================
--- gui/wxpython/photo2image/ip2i_manager.py	(revision 72985)
+++ gui/wxpython/photo2image/ip2i_manager.py	(working copy)
@@ -28,6 +28,7 @@
 
 import os
 import sys
+import six
 import shutil
 import time
 from copy import copy
@@ -53,7 +54,7 @@
 from core.settings import UserSettings
 from photo2image.ip2i_mapdisplay import MapFrame
 from core.giface import Notification
-from gui_core.wrap import SpinCtrl
+from gui_core.wrap import SpinCtrl, Button
 
 from location_wizard.wizard import TitledPage as TitledPage
 
@@ -685,7 +686,7 @@
                    "ucolor": "unused"}
         wpx = UserSettings.Get(group='gcpman', key='symbol', subkey='width')
 
-        for k, v in colours.iteritems():
+        for k, v in six.iteritems(colours):
             col = UserSettings.Get(group='gcpman', key='symbol', subkey=k)
             self.pointsToDrawSrc.GetPen(v).SetColour(wx.Colour(
                 col[0], col[1], col[2], 255))  # TODO GetPen neni to spatne?
@@ -1865,19 +1866,19 @@
         self.__CreateRectificationPage(notebook)
 
         # buttons
-        btnSave = wx.Button(self, wx.ID_SAVE)
-        btnApply = wx.Button(self, wx.ID_APPLY)
-        btnClose = wx.Button(self, wx.ID_CLOSE)
+        btnSave = Button(self, wx.ID_SAVE)
+        btnApply = Button(self, wx.ID_APPLY)
+        btnClose = Button(self, wx.ID_CLOSE)
         btnApply.SetDefault()
 
         # bindings
         btnApply.Bind(wx.EVT_BUTTON, self.OnApply)
-        btnApply.SetToolTipString(_("Apply changes for the current session"))
+        btnApply.SetToolTip(_("Apply changes for the current session"))
         btnSave.Bind(wx.EVT_BUTTON, self.OnSave)
-        btnSave.SetToolTipString(
+        btnSave.SetToolTip(
             _("Apply and save changes to user settings file (default for next sessions)"))
         btnClose.Bind(wx.EVT_BUTTON, self.OnClose)
-        btnClose.SetToolTipString(_("Close dialog"))
+        btnClose.SetToolTip(_("Close dialog"))
 
         # sizers
         btnSizer = wx.BoxSizer(wx.HORIZONTAL)
Index: gui/wxpython/psmap/dialogs.py
===================================================================
--- gui/wxpython/psmap/dialogs.py	(revision 72985)
+++ gui/wxpython/psmap/dialogs.py	(working copy)
@@ -70,7 +70,7 @@
 from gui_core.gselect import Select
 from core.gcmd import RunCommand, GError, GMessage
 from gui_core.dialogs import SymbolDialog
-from gui_core.wrap import SpinCtrl
+from gui_core.wrap import SpinCtrl, Button, TextCtrl
 from psmap.utils import *
 from psmap.instructions import *
 
@@ -462,8 +462,8 @@
 
     def _layout(self, panel):
         # buttons
-        btnCancel = wx.Button(self, wx.ID_CANCEL)
-        btnOK = wx.Button(self, wx.ID_OK)
+        btnCancel = Button(self, wx.ID_CANCEL)
+        btnOK = Button(self, wx.ID_OK)
         btnOK.SetDefault()
         if self.apply:
             btnApply = wx.Button(self, wx.ID_APPLY)
@@ -470,13 +470,13 @@
 
         # bindigs
         btnOK.Bind(wx.EVT_BUTTON, self.OnOK)
-        btnOK.SetToolTipString(_("Close dialog and apply changes"))
+        btnOK.SetToolTip(_("Close dialog and apply changes"))
         #btnCancel.Bind(wx.EVT_BUTTON, self.OnCancel)
-        btnCancel.SetToolTipString(_("Close dialog and ignore changes"))
+        btnCancel.SetToolTip(_("Close dialog and ignore changes"))
         btnCancel.Bind(wx.EVT_BUTTON, self.OnCancel)
         if self.apply:
             btnApply.Bind(wx.EVT_BUTTON, self.OnApply)
-            btnApply.SetToolTipString(_("Apply changes"))
+            btnApply.SetToolTip(_("Apply changes"))
 
         # sizers
         btnSizer = wx.StdDialogButtonSizer()
@@ -2252,8 +2252,8 @@
 
         self.radioCats = wx.RadioButton(
             panel, id=wx.ID_ANY, label="Choose categories ")
-        self.textCtrlCats = wx.TextCtrl(panel, id=wx.ID_ANY, value="")
-        self.textCtrlCats.SetToolTipString(
+        self.textCtrlCats = TextCtrl(panel, id=wx.ID_ANY, value="")
+        self.textCtrlCats.SetToolTip(
             _("list of categories (e.g. 1,3,5-7)"))
 
         if 'cats' in self.vPropertiesDict:
@@ -3835,10 +3835,10 @@
                 fromUnit='inch', toUnit=legendDict['unit'])
         else:
             w = ''
-        panel.widthCtrl = wx.TextCtrl(
+        panel.widthCtrl = TextCtrl(
             panel, id=wx.ID_ANY, value=str(w),
             validator=TCValidator("DIGIT_ONLY"))
-        panel.widthCtrl.SetToolTipString(
+        panel.widthCtrl.SetToolTip(
             _("Leave the edit field empty, to use default values."))
 
         if legendType == 'raster':
@@ -3853,7 +3853,7 @@
                     fromUnit='inch', toUnit=legendDict['unit'])
             else:
                 h = ''
-            panel.heightOrColumnsCtrl = wx.TextCtrl(
+            panel.heightOrColumnsCtrl = TextCtrl(
                 panel, id=wx.ID_ANY, value=str(h),
                 validator=TCValidator("DIGIT_ONLY"))
 
@@ -3878,7 +3878,7 @@
                 border=5)
 
         if legendType == 'vector':
-            panel.widthCtrl.SetToolTipString(
+            panel.widthCtrl.SetToolTip(
                 _("Width of the color symbol (for lines)\nin front of the legend text"))
             # columns
             minVect, maxVect = 0, 0
@@ -3896,9 +3896,9 @@
             # span
             panel.spanRadio = wx.CheckBox(
                 panel, id=wx.ID_ANY, label=_("column span:"))
-            panel.spanTextCtrl = wx.TextCtrl(panel, id=wx.ID_ANY, value='')
-            panel.spanTextCtrl.SetToolTipString(_("Column separation distance between the left edges\n"
-                                                  "of two columns in a multicolumn legend"))
+            panel.spanTextCtrl = TextCtrl(panel, id=wx.ID_ANY, value='')
+            panel.spanTextCtrl.SetToolTip(_("Column separation distance between the left edges\n"
+                                            "of two columns in a multicolumn legend"))
             if legendDict['span']:
                 panel.spanRadio.SetValue(True)
                 s = self.unitConv.convert(
@@ -4856,14 +4856,14 @@
         lengthText = wx.StaticText(panel, id=wx.ID_ANY, label=_("Length:"))
         heightText = wx.StaticText(panel, id=wx.ID_ANY, label=_("Height:"))
 
-        self.lengthTextCtrl = wx.TextCtrl(
+        self.lengthTextCtrl = TextCtrl(
             panel, id=wx.ID_ANY, validator=TCValidator('DIGIT_ONLY'))
-        self.lengthTextCtrl.SetToolTipString(
+        self.lengthTextCtrl.SetToolTip(
             _("Scalebar length is given in map units"))
 
-        self.heightTextCtrl = wx.TextCtrl(
+        self.heightTextCtrl = TextCtrl(
             panel, id=wx.ID_ANY, validator=TCValidator('DIGIT_ONLY'))
-        self.heightTextCtrl.SetToolTipString(
+        self.heightTextCtrl.SetToolTip(
             _("Scalebar height is real height on paper"))
 
         choices = [_('default')] + self.unitConv.getMapUnitsNames()
Index: gui/wxpython/psmap/frame.py
===================================================================
--- gui/wxpython/psmap/frame.py	(revision 72985)
+++ gui/wxpython/psmap/frame.py	(working copy)
@@ -17,7 +17,10 @@
 
 import os
 import sys
-import Queue
+if sys.version_info.major == 2:
+    import Queue
+else:
+    import queue as Queue
 from math import sin, cos, pi, sqrt
 
 import wx
Index: gui/wxpython/psmap/instructions.py
===================================================================
--- gui/wxpython/psmap/instructions.py	(revision 72985)
+++ gui/wxpython/psmap/instructions.py	(working copy)
@@ -34,6 +34,7 @@
 
 import os
 import string
+import six
 from math import ceil
 from time import strftime, localtime
 
@@ -762,8 +763,8 @@
                         # e.g. paper a3
                         try:
                             instr['Format'] = pformat
-                            for key, value in availableFormats[
-                                    pformat].iteritems():
+                            for key, value in six.iteritems(availableFormats[
+                                                            pformat]):
                                 instr[key] = float(value)
                             break
                         except KeyError:
Index: gui/wxpython/psmap/utils.py
===================================================================
--- gui/wxpython/psmap/utils.py	(revision 72985)
+++ gui/wxpython/psmap/utils.py	(working copy)
@@ -385,14 +385,13 @@
     if not portrait:
         orient = 'r'
     try:
-        bb = map(
-            float,
-            grass.read_command(
-                'ps.map',
-                flags='b' +
-                orient,
-                quiet=True,
-                input=filename).strip().split('=')[1].split(','))
+        bb = list(map(float,
+                    grass.read_command(
+                    'ps.map',
+                    flags='b' +
+                    orient,
+                    quiet=True,
+                    input=filename).strip().split('=')[1].split(',')))
     except (grass.ScriptError, IndexError):
         GError(message=_("Unable to run `ps.map -b`"))
         return None
Index: gui/wxpython/rdigit/toolbars.py
===================================================================
--- gui/wxpython/rdigit/toolbars.py	(revision 72985)
+++ gui/wxpython/rdigit/toolbars.py	(working copy)
@@ -21,6 +21,7 @@
 from icons.icon import MetaIcon
 from gui_core.widgets import FloatValidator
 import wx.lib.colourselect as csel
+from gui_core.wrap import TextCtrl
 
 
 rdigitIcons = {'area': MetaIcon(img='polygon-create',
@@ -89,13 +90,13 @@
         self._widthValueId = wx.NewId()
         # validator does not work with combobox, SetBackgroundColor is not
         # working
-        self._widthValue = wx.TextCtrl(
+        self._widthValue = TextCtrl(
             self, id=self._widthValueId, value='0', size=(
                 80, -1), validator=FloatValidator())
         self._widthValue.Bind(wx.EVT_TEXT,
                               lambda evt: self._widthValueChanged())
         self._widthValueChanged()
-        self._widthValue.SetToolTipString(
+        self._widthValue.SetToolTip(
             _("Width of currently digitized line or diameter of a digitized point in map units."))
         labelWidth = wx.StaticText(self, label=" %s" % _("Width:"))
         self.InsertControl(8, labelWidth)
Index: gui/wxpython/rlisetup/frame.py
===================================================================
--- gui/wxpython/rlisetup/frame.py	(revision 72985)
+++ gui/wxpython/rlisetup/frame.py	(working copy)
@@ -15,6 +15,7 @@
 from rlisetup.wizard import RLIWizard
 import locale
 import codecs
+from gui_core.wrap import Button
 
 
 class ViewFrame(wx.Frame):
@@ -134,20 +135,20 @@
                                       choices=self.listfiles)
 
         # BUTTONS      #definition
-        self.btn_close = wx.Button(parent=self, id=wx.ID_CLOSE)
-        self.btn_help = wx.Button(parent=self, id=wx.ID_HELP)
-        self.btn_remove = wx.Button(parent=self, id=wx.ID_ANY,
+        self.btn_close = Button(parent=self, id=wx.ID_CLOSE)
+        self.btn_help = Button(parent=self, id=wx.ID_HELP)
+        self.btn_remove = Button(parent=self, id=wx.ID_ANY,
                                     label=_("Remove"))
-        self.btn_remove.SetToolTipString(_('Remove a configuration file'))
-        self.btn_new = wx.Button(parent=self, id=wx.ID_ANY,
+        self.btn_remove.SetToolTip(_('Remove a configuration file'))
+        self.btn_new = Button(parent=self, id=wx.ID_ANY,
                                  label=_("Create"))
-        self.btn_new.SetToolTipString(_('Create a new configuration file'))
-        self.btn_rename = wx.Button(parent=self, id=wx.ID_ANY,
+        self.btn_new.SetToolTip(_('Create a new configuration file'))
+        self.btn_rename = Button(parent=self, id=wx.ID_ANY,
                                     label=_("Rename"))
-        self.btn_rename.SetToolTipString(_('Rename a configuration file'))
-        self.btn_view = wx.Button(parent=self, id=wx.ID_ANY,
+        self.btn_rename.SetToolTip(_('Rename a configuration file'))
+        self.btn_view = Button(parent=self, id=wx.ID_ANY,
                                   label=_("View/Edit"))
-        self.btn_view.SetToolTipString(_('View and edit a configuration file'))
+        self.btn_view.SetToolTip(_('View and edit a configuration file'))
         # set action for button
         self.btn_close.Bind(wx.EVT_BUTTON, self.OnClose)
         self.btn_help.Bind(wx.EVT_BUTTON, self.OnHelp)
Index: gui/wxpython/rlisetup/sampling_frame.py
===================================================================
--- gui/wxpython/rlisetup/sampling_frame.py	(revision 72985)
+++ gui/wxpython/rlisetup/sampling_frame.py	(working copy)
@@ -47,7 +47,7 @@
 from grass.pydispatch.signal import Signal
 from grass.pydispatch.errors import DispatcherKeyError
 
-from functions import SamplingType, checkMapExists
+from .functions import SamplingType, checkMapExists
 
 
 class Circle:
Index: gui/wxpython/timeline/frame.py
===================================================================
--- gui/wxpython/timeline/frame.py	(revision 72985)
+++ gui/wxpython/timeline/frame.py	(working copy)
@@ -17,6 +17,7 @@
 """
 import os
 import signal
+import six
 from math import ceil
 from itertools import cycle
 import numpy as np
@@ -442,8 +443,8 @@
         tDict = tgis.tlist_grouped('stds', group_type=True, dbif=self.dbif)
         # nested list with '(map, mapset, etype)' items
         allDatasets = [[[(map, mapset, etype) for map in maps]
-                        for etype, maps in etypesDict.iteritems()]
-                       for mapset, etypesDict in tDict.iteritems()]
+                        for etype, maps in six.iteritems(etypesDict)]
+                       for mapset, etypesDict in six.iteritems(tDict)]
         # flatten this list
         if allDatasets:
             allDatasets = reduce(
Index: gui/wxpython/tools/update_menudata.py
===================================================================
--- gui/wxpython/tools/update_menudata.py	(revision 72985)
+++ gui/wxpython/tools/update_menudata.py	(working copy)
@@ -151,7 +151,7 @@
         print(sys.stderr, __doc__, file=sys.stderr)
         return 1
 
-    nuldev = file(os.devnull, 'w+')
+    nuldev = open(os.devnull, 'w+')
     grass.info("Step 1: running make...")
     grass.call(['make'], stderr=nuldev)
     grass.info("Step 2: parsing modules...")
Index: gui/wxpython/tplot/frame.py
===================================================================
--- gui/wxpython/tplot/frame.py	(revision 72985)
+++ gui/wxpython/tplot/frame.py	(working copy)
@@ -19,6 +19,7 @@
 @author start stvds support Matej Krejci
 """
 import os
+import six
 from itertools import cycle
 import numpy as np
 
@@ -63,6 +64,7 @@
 import wx.lib.filebrowsebutton as filebrowse
 
 from gui_core.widgets import GNotebook
+from gui_core.wrap import TextCtrl
 
 ALPHA = 0.5
 COLORS = ['b', 'g', 'r', 'c', 'm', 'y', 'k']
@@ -196,13 +198,13 @@
             self.coorval = gselect.CoordinatesSelect(
                 parent=self.controlPanelRaster, giface=self._giface)
         except:
-            self.coorval = wx.TextCtrl(parent=self.controlPanelRaster,
+            self.coorval = TextCtrl(parent=self.controlPanelRaster,
                                        id=wx.ID_ANY,
                                        size=globalvar.DIALOG_TEXTCTRL_SIZE,
                                        validator=CoordinatesValidator())
 
-        self.coorval.SetToolTipString(_("Coordinates can be obtained for example"
-                                        " by right-clicking on Map Display."))
+        self.coorval.SetToolTip(_("Coordinates can be obtained for example"
+                                  " by right-clicking on Map Display."))
         self.controlPanelSizerRaster = wx.BoxSizer(wx.VERTICAL)
         # self.controlPanelSizer.Add(wx.StaticText(self.panel, id=wx.ID_ANY,
         # label=_("Select space time raster dataset(s):")),
@@ -669,7 +671,7 @@
             self.yticksPos.append(1)  # TODO
             xdata = []
             ydata = []
-            for keys, values in self.timeDataR[name].iteritems():
+            for keys, values in six.iteritems(self.timeDataR[name]):
                 if keys in ['temporalType', 'granularity', 'validTopology',
                             'unit', 'temporalDataType']:
                     continue
@@ -710,9 +712,8 @@
             xdata = []
             ydata = []
             xcsv = []
-            for keys, values in self.timeDataV[
-                    name_cat[0]][
-                    name_cat[1]].iteritems():
+            for keys, values in six.iteritems(self.timeDataV[name_cat[0]]
+                                                            [name_cat[1]]):
                 if keys in ['temporalType', 'granularity', 'validTopology',
                             'unit', 'temporalDataType']:
                     continue
@@ -762,7 +763,7 @@
             xdata = []
             ydata = []
             xcsv = []
-            for keys, values in self.timeDataV[name].iteritems():
+            for keys, values in six.iteritems(self.timeDataV[name]):
                 if keys in ['temporalType', 'granularity', 'validTopology',
                             'unit', 'temporalDataType']:
                     continue
@@ -910,8 +911,8 @@
         tDict = tgis.tlist_grouped(type=typ, group_type=True, dbif=self.dbif)
         # nested list with '(map, mapset, etype)' items
         allDatasets = [[[(map, mapset, etype) for map in maps]
-                        for etype, maps in etypesDict.iteritems()]
-                       for mapset, etypesDict in tDict.iteritems()]
+                        for etype, maps in six.iteritems(etypesDict)]
+                       for mapset, etypesDict in six.iteritems(tDict)]
         # flatten this list
         if allDatasets:
             allDatasets = reduce(lambda x, y: x + y, reduce(lambda x, y: x + y,
@@ -1069,7 +1070,7 @@
 
     def GetInformation(self, x):
         values = {}
-        for key, value in self.data.iteritems():
+        for key, value in six.iteritems(self.data):
             if value[x]:
                 values[key] = [self.convert(x), value[x]]
 
@@ -1082,7 +1083,7 @@
 def InfoFormat(timeData, values):
     """Formats information about dataset"""
     text = []
-    for key, val in values.iteritems():
+    for key, val in six.iteritems(values):
         etype = timeData[key]['temporalDataType']
         if etype == 'strds':
             text.append(_("Space time raster dataset: %s") % key)
Index: gui/wxpython/vdigit/dialogs.py
===================================================================
--- gui/wxpython/vdigit/dialogs.py	(revision 72985)
+++ gui/wxpython/vdigit/dialogs.py	(working copy)
@@ -20,6 +20,7 @@
 
 import sys
 import copy
+import six
 
 import wx
 import wx.lib.mixins.listctrl as listmix
@@ -28,7 +29,7 @@
 from core.debug import Debug
 from core.settings import UserSettings
 from core.utils import _
-from gui_core.wrap import SpinCtrl
+from gui_core.wrap import SpinCtrl, Button
 
 
 class VDigitCategoryDialog(wx.Dialog, listmix.ColumnSorterMixin):
@@ -147,12 +148,12 @@
             border=5)
 
         # buttons
-        btnApply = wx.Button(self, wx.ID_APPLY)
-        btnApply.SetToolTipString(_("Apply changes"))
-        btnCancel = wx.Button(self, wx.ID_CANCEL)
-        btnCancel.SetToolTipString(_("Ignore changes and close dialog"))
-        btnOk = wx.Button(self, wx.ID_OK)
-        btnOk.SetToolTipString(_("Apply changes and close dialog"))
+        btnApply = Button(self, wx.ID_APPLY)
+        btnApply.SetToolTip(_("Apply changes"))
+        btnCancel = Button(self, wx.ID_CANCEL)
+        btnCancel.SetToolTip(_("Ignore changes and close dialog"))
+        btnOk = Button(self, wx.ID_OK)
+        btnOk.SetToolTip(_("Apply changes and close dialog"))
         btnOk.SetDefault()
 
         # sizers
@@ -413,7 +414,7 @@
         newfid = -1
 
         # add/delete new category
-        for action, catsCurr in check.iteritems():
+        for action, catsCurr in six.iteritems(check):
             for layer in catsCurr[0].keys():
                 catList = []
                 for cat in catsCurr[0][layer]:
Index: gui/wxpython/vdigit/mapwindow.py
===================================================================
--- gui/wxpython/vdigit/mapwindow.py	(revision 72985)
+++ gui/wxpython/vdigit/mapwindow.py	(working copy)
@@ -16,6 +16,7 @@
 
 import wx
 import tempfile
+import six
 
 from grass.pydispatch.signal import Signal
 
@@ -277,9 +278,9 @@
         dbInfo = gselect.VectorDBInfo(vectorName)
         sqlfile = tempfile.NamedTemporaryFile(mode="w")
         for fid in fids:
-            for layer, cats in self.digit.GetLineCats(fid).iteritems():
+            for layer, cats in six.iteritems(self.digit.GetLineCats(fid)):
                 table = dbInfo.GetTable(layer)
-                for attrb, item in vdigit['geomAttr'].iteritems():
+                for attrb, item in six.iteritems(vdigit['geomAttr']):
                     val = -1
                     if attrb == 'length':
                         val = self.digit.GetLineLength(fid)
Index: gui/wxpython/vdigit/preferences.py
===================================================================
--- gui/wxpython/vdigit/preferences.py	(revision 72985)
+++ gui/wxpython/vdigit/preferences.py	(working copy)
@@ -15,6 +15,7 @@
 """
 
 import textwrap
+import six
 
 import wx
 import wx.lib.colourselect as csel
@@ -817,7 +818,7 @@
         checked = event.IsChecked()
         id = event.GetId()
         key = None
-        for attrb, val in self.geomAttrb.iteritems():
+        for attrb, val in six.iteritems(self.geomAttrb):
             if val['check'] == id:
                 key = attrb
                 break
@@ -985,7 +986,7 @@
         if self.parent.GetLayerManager():
             self.parent.GetLayerManager().WorkspaceChanged()  # geometry attributes
         # symbology
-        for key, (enabled, color) in self.symbology.iteritems():
+        for key, (enabled, color) in six.iteritems(self.symbology):
             if enabled:
                 UserSettings.Set(group='vdigit', key='symbol',
                                  subkey=[key, 'enabled'],
@@ -1033,7 +1034,7 @@
             item = tree.FindItemByData('maplayer', mapLayer)
         else:
             item = None
-        for key, val in self.geomAttrb.iteritems():
+        for key, val in six.iteritems(self.geomAttrb):
             checked = self.FindWindowById(val['check']).IsChecked()
             column = self.FindWindowById(val['column']).GetValue()
             unitsIdx = self.FindWindowById(val['units']).GetSelection()
Index: gui/wxpython/vdigit/wxdigit.py
===================================================================
--- gui/wxpython/vdigit/wxdigit.py	(revision 72985)
+++ gui/wxpython/vdigit/wxdigit.py	(working copy)
@@ -28,6 +28,7 @@
 
 from __future__ import print_function
 
+import six
 import grass.script.core as grass
 
 from grass.pydispatch.signal import Signal
@@ -1774,7 +1775,7 @@
                 self.cats[field])
 
         # set default values
-        for field, cat in self.cats.iteritems():
+        for field, cat in six.iteritems(self.cats):
             if cat is None:
                 self.cats[field] = 0  # first category 1
             Debug.msg(
Index: gui/wxpython/vdigit/wxdisplay.py
===================================================================
--- gui/wxpython/vdigit/wxdisplay.py	(revision 72985)
+++ gui/wxpython/vdigit/wxdisplay.py	(working copy)
@@ -20,6 +20,7 @@
 from __future__ import print_function
 
 import locale
+import six
 
 import wx
 
@@ -1176,7 +1177,7 @@
             catsDict[layer].append(cats.cat[i])
 
         catsStr = ''
-        for l, c in catsDict.iteritems():
+        for l, c in six.iteritems(catsDict):
             catsStr = '%d: (%s)' % (l, ','.join(map(str, c)))
 
         return catsStr
Index: gui/wxpython/vnet/dialogs.py
===================================================================
--- gui/wxpython/vnet/dialogs.py	(revision 72985)
+++ gui/wxpython/vnet/dialogs.py	(working copy)
@@ -27,6 +27,7 @@
 import os
 import sys
 import types
+import six
 
 from copy import copy
 from grass.script import core as grass
@@ -52,7 +53,7 @@
 from gui_core.widgets import GNotebook
 from gui_core.goutput import GConsoleWindow
 from gui_core.gselect import Select, LayerSelect, ColumnSelect
-from gui_core.wrap import SpinCtrl
+from gui_core.wrap import SpinCtrl, Button, BitmapButton
 
 from vnet.widgets import PointsList
 from vnet.toolbars import MainToolbar, PointListToolbar, AnalysisToolbar
@@ -400,10 +401,10 @@
                         "layer-vector-add.png"))
                 icon.Rescale(18, 18)
                 icon = wx.BitmapFromImage(icon)
-                self.addToTreeBtn = wx.BitmapButton(
+                self.addToTreeBtn = BitmapButton(
                     parent=selPanels[dataSel[0]],
                     bitmap=icon, size=globalvar.DIALOG_COLOR_SIZE)
-                self.addToTreeBtn.SetToolTipString(
+                self.addToTreeBtn.SetToolTip(
                     _("Add vector map into layer tree"))
                 self.addToTreeBtn.Disable()
                 self.addToTreeBtn.Bind(wx.EVT_BUTTON, self.OnToTreeBtn)
@@ -797,7 +798,7 @@
 
     def _setInputData(self):
         params = {}
-        for k, v in self.inputData.iteritems():
+        for k, v in six.iteritems(self.inputData):
             params[k] = v.GetValue()
         flags = {}
         self.vnet_mgr.SetParams(params, flags)
@@ -974,7 +975,7 @@
         used_cols = []
         attrCols = an_props["cmdParams"]["cols"]
 
-        for col in attrCols.iterkeys():
+        for col in six.iterkeys(attrCols):
 
             if "inputField" in attrCols[col]:
                 colInptF = attrCols[col]["inputField"]
@@ -1154,7 +1155,7 @@
     def SetData(self, key, data):
 
         idx = self._findIndex(key)
-        for k, v in data.iteritems():
+        for k, v in six.iteritems(data):
             if k == "use":
 
                 if v and not self.IsChecked(idx):
@@ -1267,7 +1268,7 @@
                 "point_colors",
                 _("Color for selected point:")]}
 
-        for settKey, sett in self.colorsSetts.iteritems():
+        for settKey, sett in six.iteritems(self.colorsSetts):
             settsLabels[settKey] = wx.StaticText(
                 parent=self, id=wx.ID_ANY, label=sett[1])
             col = UserSettings.Get(group='vnet', key=sett[0], subkey=settKey)
@@ -1283,7 +1284,7 @@
             "max_hist_steps": ["other", _("Maximum number of results in history:")]
         }
 
-        for settKey, sett in self.sizeSetts.iteritems():
+        for settKey, sett in six.iteritems(self.sizeSetts):
             settsLabels[settKey] = wx.StaticText(
                 parent=self, id=wx.ID_ANY, label=sett[1])
             self.settings[settKey] = SpinCtrl(
@@ -1296,20 +1297,20 @@
             self.settings[settKey].SetValue(size)
 
         # buttons
-        self.btnSave = wx.Button(self, wx.ID_SAVE)
-        self.btnApply = wx.Button(self, wx.ID_APPLY)
-        self.btnClose = wx.Button(self, wx.ID_CLOSE)
+        self.btnSave = Button(self, wx.ID_SAVE)
+        self.btnApply = Button(self, wx.ID_APPLY)
+        self.btnClose = Button(self, wx.ID_CLOSE)
         self.btnApply.SetDefault()
 
         # bindings
         self.btnApply.Bind(wx.EVT_BUTTON, self.OnApply)
-        self.btnApply.SetToolTipString(
+        self.btnApply.SetToolTip(
             _("Apply changes for the current session"))
         self.btnSave.Bind(wx.EVT_BUTTON, self.OnSave)
-        self.btnSave.SetToolTipString(
+        self.btnSave.SetToolTip(
             _("Apply and save changes to user settings file (default for next sessions)"))
         self.btnClose.Bind(wx.EVT_BUTTON, self.OnClose)
-        self.btnClose.SetToolTipString(_("Close dialog"))
+        self.btnClose.SetToolTip(_("Close dialog"))
 
         # Layout
 
@@ -1443,7 +1444,7 @@
         UserSettings.Set(group='vnet', key="res_style", subkey='line_width',
                          value=self.settings["line_width"].GetValue())
 
-        for settKey, sett in self.colorsSetts.iteritems():
+        for settKey, sett in six.iteritems(self.colorsSetts):
             col = tuple(self.settings[settKey].GetColour())
             UserSettings.Set(group='vnet',
                              key=sett[0],
@@ -1450,7 +1451,7 @@
                              subkey=settKey,
                              value=col)
 
-        for settKey, sett in self.sizeSetts.iteritems():
+        for settKey, sett in six.iteritems(self.sizeSetts):
             UserSettings.Set(group='vnet', key=sett[0], subkey=settKey,
                              value=self.settings[settKey].GetValue())
 
@@ -1537,7 +1538,7 @@
             bsizer.Add(selPanels[sel], proportion=0,
                        flag=wx.EXPAND)
 
-        for k, v in init_data.iteritems():
+        for k, v in six.iteritems(init_data):
             if k in self.inputData:
                 self.inputData[k].SetValue(v)
 
@@ -1615,7 +1616,7 @@
     def GetData(self):
 
         params = {}
-        for param, sel in self.inputData.iteritems():
+        for param, sel in six.iteritems(self.inputData):
             params[param] = sel.GetValue()
 
         return params
Index: gui/wxpython/vnet/vnet_core.py
===================================================================
--- gui/wxpython/vnet/vnet_core.py	(revision 72985)
+++ gui/wxpython/vnet/vnet_core.py	(working copy)
@@ -20,6 +20,7 @@
 """
 
 import os
+import six
 from grass.script.utils import try_remove
 from grass.script import core as grass
 from grass.script.task import cmdlist_to_tuple
@@ -509,7 +510,7 @@
         cmdParams.append("output=" + output)
 
         cats = {}
-        for cat_name, pts_coor in catPts.iteritems():
+        for cat_name, pts_coor in six.iteritems(catPts):
 
             for coor in pts_coor:
                 cat_num = str(
@@ -527,7 +528,7 @@
                 else:
                     cats[cat_name] = [cat_num]
 
-        for cat_name, cat_nums in cats.iteritems():
+        for cat_name, cat_nums in six.iteritems(cats):
             cmdParams.append(cat_name + "=" + ",".join(cat_nums))
 
         self.tmpTurnAn = AddTmpMapAnalysisMsg(
@@ -679,7 +680,7 @@
 
         self._setCmdForSpecificAn(cmdParams)
 
-        for catName, catNum in catsNums.iteritems():
+        for catName, catNum in six.iteritems(catsNums):
             if catNum[0] == catNum[1]:
                 cmdParams.append(catName + "=" + str(catNum[0]))
             else:
@@ -736,8 +737,8 @@
         """
 
         inParams = []
-        for col, v in self.data.GetAnalysisProperties()["cmdParams"][
-                "cols"].iteritems():
+        for col, v in six.iteritems(self.data.GetAnalysisProperties()["cmdParams"]
+                                                                     ["cols"]):
 
             if "inputField" in v:
                 colInptF = v["inputField"]
@@ -786,7 +787,7 @@
         pt_ascii = ""
         catNum = maxCat
 
-        for catName, pts in catPts.iteritems():
+        for catName, pts in six.iteritems(catPts):
 
             catsNums[catName] = [catNum + 1]
             for pt in pts:
@@ -871,7 +872,7 @@
             return
 
         # delete temporary maps in history steps which were deleted
-        for removedStep in removedHistData.itervalues():
+        for removedStep in six.itervalues(removedHistData):
             mapsNames = removedStep["tmp_data"]["maps"]
             for vectMapName in mapsNames:
                 tmpMap = self.tmp_maps.GetTmpVectMap(vectMapName)
@@ -917,7 +918,7 @@
         # update parameters
         params = {}
         histInputData = histStepData["an_params"]
-        for inpName, inp in histInputData.iteritems():
+        for inpName, inp in six.iteritems(histInputData):
             params[inpName] = str(inp)
             if inpName == "input":
                 inpMap = inp
@@ -969,7 +970,7 @@
                              subkey=[ptName, "checked"],
                              value=data["use"])
 
-            for param, value in params.iteritems():
+            for param, value in six.iteritems(params):
 
                 if param == "input":
                     inpMap = VectMap(self, value)
Index: gui/wxpython/vnet/vnet_data.py
===================================================================
--- gui/wxpython/vnet/vnet_data.py	(revision 72985)
+++ gui/wxpython/vnet/vnet_data.py	(working copy)
@@ -24,6 +24,7 @@
 """
 import os
 import types
+import six
 from copy import deepcopy
 
 from grass.script.utils import try_remove
@@ -177,11 +178,13 @@
             return False
 
         errLayerStr = ""
-        for layer, layerLabel in {
+        vals = {
                 'arc_layer': _("arc layer"),
                 'node_layer': _("node layer"),
                 'turn_layer': _("turntable layer"),
-                'turn_cat_layer': _("unique categories layer")}.iteritems():
+                'turn_cat_layer': _("unique categories layer")
+                }
+        for layer, layerLabel in six.iteritems(vals):
 
             if layer in ["turn_layer", "turn_cat_layer"] and not flags["t"]:
                 continue
@@ -327,7 +330,7 @@
                 "pts_data": pts_data})
 
     def SetPointData(self, pt_id, data):
-        for col, v in data.iteritems():
+        for col, v in six.iteritems(data):
             if col == 'use':
                 continue
 
@@ -402,7 +405,7 @@
         textProp = self.pointsToDraw.GetPropertyVal("text")
         textProp["font"].SetPointSize(ptSize + 2)
 
-        for colKey, col in colors.iteritems():
+        for colKey, col in six.iteritems(colors):
             pen = self.pointsToDraw.GetPen(colKey)
             if pen:
                 pen.SetColour(wx.Colour(col[0], col[1], col[2], 255))
@@ -441,7 +444,7 @@
 
         pt_list_data = [None] * len(self.cols['name'])
 
-        for k, val in pt_data.iteritems():
+        for k, val in six.iteritems(pt_data):
             pt_list_data[self.cols["name"].index(k)] = val
 
         return pt_list_data
@@ -599,7 +602,7 @@
         i_red = 0
         hidden_cols.sort()
         for idx in hidden_cols:
-            for dt in cols_data.itervalues():
+            for dt in six.itervalues(cols_data):
                 dt.pop(idx - i_red)
             i_red += 1
 
@@ -632,7 +635,7 @@
     def SetParams(self, params, flags):
 
         changed_params = {}
-        for p, v in params.iteritems():
+        for p, v in six.iteritems(params):
             if p == "analysis" and v not in self.an_props.used_an:
                 continue
 
@@ -648,7 +651,7 @@
                 changed_params[p] = v
 
         changed_flags = {}
-        for p, v in flags.iteritems():
+        for p, v in six.iteritems(flags):
             if p in self.flags:
                 self.flags[p] = v
                 changed_flags[p] = v
@@ -922,7 +925,7 @@
 
         cols = self.vnetProperties[analysis]["cmdParams"]["cols"]
 
-        for col, v in cols.iteritems():
+        for col, v in six.iteritems(cols):
             if "inputField" in col:
                 colInptF = v["inputField"]
             else:
Index: gui/wxpython/vnet/widgets.py
===================================================================
--- gui/wxpython/vnet/widgets.py	(revision 72985)
+++ gui/wxpython/vnet/widgets.py	(working copy)
@@ -19,7 +19,7 @@
 """
 
 import os
-import wx
+import six
 from copy import copy, deepcopy
 
 import wx
@@ -170,7 +170,7 @@
 
         self.selIdxs.append(itemIndexes)
 
-        for hCol in self.hiddenCols.itervalues():
+        for hCol in six.itervalues(self.hiddenCols):
             defVal = hCol['colsData'][iDefVal]
             if type(hCol['colsData'][iColEd]).__name__ == "list":
                 hCol['itemDataMap'].append(hCol['colsData'][iColEd][defVal])
@@ -287,7 +287,7 @@
         self.selIdxs.pop(key)
 
         # update hidden columns
-        for hCol in self.hiddenCols.itervalues():
+        for hCol in six.itervalues(self.hiddenCols):
             hCol['itemDataMap'].pop(key)
             hCol['selIdxs'].pop(key)
 
Index: gui/wxpython/web_services/dialogs.py
===================================================================
--- gui/wxpython/web_services/dialogs.py	(revision 72985)
+++ gui/wxpython/web_services/dialogs.py	(working copy)
@@ -22,6 +22,7 @@
 
 import os
 import sys
+import six
 import shutil
 
 from copy import deepcopy
@@ -131,7 +132,7 @@
             label=_("Output layer name:"))
         self.layerName = wx.TextCtrl(parent=self.reqDataPanel, id=wx.ID_ANY)
 
-        for ws in self.ws_panels.iterkeys():
+        for ws in six.iterkeys(self.ws_panels):
             # set class WSPanel argument layerNameTxtCtrl
             self.ws_panels[ws]['panel'] = WSPanel(parent=self.reqDataPanel,
                                                   web_service=ws)
@@ -212,7 +213,7 @@
         reqDataSizer.Add(self.ch_ws_sizer, proportion=0,
                          flag=wx.TOP | wx.EXPAND, border=5)
 
-        for ws in self.ws_panels.iterkeys():
+        for ws in six.iterkeys(self.ws_panels):
             reqDataSizer.Add(
                 self.ws_panels[ws]['panel'],
                 proportion=1,
@@ -339,7 +340,7 @@
 
     def _getCapFiles(self):
         ws_cap_files = {}
-        for v in self.ws_panels.itervalues():
+        for v in six.itervalues(self.ws_panels):
             ws_cap_files[v['panel'].GetWebService()] = v['panel'].GetCapFile()
 
         return ws_cap_files
@@ -364,7 +365,7 @@
         lname = event.GetString()
         lname = lname.encode('ascii', 'replace')
 
-        for v in self.ws_panels.itervalues():
+        for v in six.itervalues(self.ws_panels):
             v['panel'].SetOutputLayerName(lname.strip())
 
     def OnConnect(self, event):
@@ -388,7 +389,7 @@
 
         # number of panels already connected
         self.finished_panels_num = 0
-        for ws in self.ws_panels.iterkeys():
+        for ws in six.iterkeys(self.ws_panels):
             self.ws_panels[ws]['panel'].ConnectToServer(
                 url=server, username=self.username.GetValue(),
                 password=self.password.GetValue())
@@ -421,7 +422,7 @@
         :return: list of found web services on server (identified as keys in self.ws_panels)
         """
         conn_ws = []
-        for ws, data in self.ws_panels.iteritems():
+        for ws, data in six.iteritems(self.ws_panels):
             if data['panel'].IsConnected():
                 conn_ws.append(ws)
 
@@ -648,7 +649,7 @@
         self.revert_cmd = cmd
 
         ws_cap = self._getWSfromCmd(cmd)
-        for ws in self.ws_panels.iterkeys():
+        for ws in six.iterkeys(self.ws_panels):
             # cap file used in cmd will be deleted, thnaks to the dialogs
             # destructor
             if ws == ws_cap and 'capfile' in cmd[1]:
@@ -663,12 +664,12 @@
         self.btn_ok.SetDefault()
 
     def __del__(self):
-        for f in self.revert_ws_cap_files.itervalues():
+        for f in six.itervalues(self.revert_ws_cap_files):
             grass.try_remove(f)
 
     def _setRevertCapFiles(self, ws_cap_files):
 
-        for ws, f in ws_cap_files.iteritems():
+        for ws, f in six.iteritems(ws_cap_files):
             if os.path.isfile(ws_cap_files[ws]):
                 shutil.copyfile(f, self.revert_ws_cap_files[ws])
             else:
@@ -726,7 +727,7 @@
 
         self.layerName.SetValue(cmd[1]['map'])
 
-        for ws, data in self.ws_panels.iteritems():
+        for ws, data in six.iteritems(self.ws_panels):
             cap_file = None
 
             if ws in ws_cap_files:
@@ -742,7 +743,7 @@
         """
         conn = {'url': '', 'username': '', 'password': ''}
 
-        for k in conn.iterkeys():
+        for k in six.iterkeys(conn):
             if k in cmd[1]:
                 conn[k] = cmd[1][k]
         return conn
Index: gui/wxpython/web_services/widgets.py
===================================================================
--- gui/wxpython/web_services/widgets.py	(revision 72985)
+++ gui/wxpython/web_services/widgets.py	(working copy)
@@ -18,6 +18,7 @@
 
 import os
 import sys
+import six
 import shutil
 
 from copy import deepcopy
@@ -521,7 +522,7 @@
         }
 
         conn_cmd = []
-        for k, v in self.conn.iteritems():
+        for k, v in six.iteritems(self.conn):
             if v:
                 conn_cmd.append("%s=%s" % (k, v))
 
@@ -635,7 +636,7 @@
         if 'method' in dcmd:
             params['method'] = dcmd['method']
 
-        for p, v in params.iteritems():
+        for p, v in six.iteritems(params):
             if self.params[p]:
                 self.params[p].SetStringSelection(v)
 
@@ -1176,8 +1177,8 @@
 
         setts = self.GetSettings()
         self.servers_to_add = {}
-        for k, v in self.default_servers.iteritems():
-            if k not in setts.iterkeys():
+        for k, v in six.iteritems(self.default_servers):
+            if k not in six.iterkeys(setts):
                 self.servers_to_add[k] = v
             elif v != setts[k]:
                 GMessage(parent=self,
Index: gui/wxpython/wxplot/base.py
===================================================================
--- gui/wxpython/wxplot/base.py	(revision 72985)
+++ gui/wxpython/wxplot/base.py	(working copy)
@@ -17,6 +17,7 @@
 
 import os
 import sys
+import six
 
 import wx
 
@@ -127,7 +128,7 @@
         for assigning colors to images in imagery groups"""
 
         self.colorDict = {}
-        for clr in grass.named_colors.iterkeys():
+        for clr in six.iterkeys(grass.named_colors):
             if clr == 'white':
                 continue
             r = grass.named_colors[clr][0] * 255
Index: gui/wxpython/wxplot/dialogs.py
===================================================================
--- gui/wxpython/wxplot/dialogs.py	(revision 72985)
+++ gui/wxpython/wxplot/dialogs.py	(working copy)
@@ -30,7 +30,7 @@
 from core.globalvar import ICONDIR
 from core.utils import _
 from gui_core.gselect import Select
-from gui_core.wrap import SpinCtrl
+from gui_core.wrap import SpinCtrl, Button
 
 from grass.script import core as grass
 
@@ -357,8 +357,8 @@
         #
         btnSizer = wx.BoxSizer(wx.HORIZONTAL)
 
-        btn_clipboard = wx.Button(self.panel, id=wx.ID_COPY, label=_('C&opy'))
-        btn_clipboard.SetToolTipString(
+        btn_clipboard = Button(self.panel, id=wx.ID_COPY, label=_('C&opy'))
+        btn_clipboard.SetToolTip(
             _("Copy regression statistics the clipboard (Ctrl+C)"))
         btnSizer.Add(
             btn_clipboard,
@@ -366,7 +366,7 @@
             flag=wx.ALIGN_LEFT | wx.ALL,
             border=5)
 
-        btnCancel = wx.Button(self.panel, wx.ID_CLOSE)
+        btnCancel = Button(self.panel, wx.ID_CLOSE)
         btnCancel.SetDefault()
         btnSizer.Add(
             btnCancel,
@@ -818,24 +818,24 @@
         #
         # buttons
         #
-        btnSave = wx.Button(self, wx.ID_SAVE)
-        btnApply = wx.Button(self, wx.ID_APPLY)
-        btnOk = wx.Button(self, wx.ID_OK)
-        btnCancel = wx.Button(self, wx.ID_CANCEL)
+        btnSave = Button(self, wx.ID_SAVE)
+        btnApply = Button(self, wx.ID_APPLY)
+        btnOk = Button(self, wx.ID_OK)
+        btnCancel = Button(self, wx.ID_CANCEL)
         btnOk.SetDefault()
 
         # bindings
         btnApply.Bind(wx.EVT_BUTTON, self.OnApply)
-        btnApply.SetToolTipString(_("Apply changes for the current session"))
+        btnApply.SetToolTip(_("Apply changes for the current session"))
         btnOk.Bind(wx.EVT_BUTTON, self.OnOk)
-        btnOk.SetToolTipString(
+        btnOk.SetToolTip(
             _("Apply changes for the current session and close dialog"))
         btnOk.SetDefault()
         btnSave.Bind(wx.EVT_BUTTON, self.OnSave)
-        btnSave.SetToolTipString(
+        btnSave.SetToolTip(
             _("Apply and save changes to user settings file (default for next sessions)"))
         btnCancel.Bind(wx.EVT_BUTTON, self.OnCancel)
-        btnCancel.SetToolTipString(_("Close dialog and ignore changes"))
+        btnCancel.SetToolTip(_("Close dialog and ignore changes"))
 
         # sizers
         btnStdSizer = wx.StdDialogButtonSizer()
@@ -1418,19 +1418,19 @@
         #
         # buttons
         #
-        btnSave = wx.Button(self, wx.ID_SAVE)
-        btnApply = wx.Button(self, wx.ID_APPLY)
-        btnOk = wx.Button(self, wx.ID_OK)
-        btnCancel = wx.Button(self, wx.ID_CANCEL)
+        btnSave = Button(self, wx.ID_SAVE)
+        btnApply = Button(self, wx.ID_APPLY)
+        btnOk = Button(self, wx.ID_OK)
+        btnCancel = Button(self, wx.ID_CANCEL)
         btnOk.SetDefault()
 
         # tooltips for buttons
-        btnApply.SetToolTipString(_("Apply changes for the current session"))
-        btnOk.SetToolTipString(
+        btnApply.SetToolTip(_("Apply changes for the current session"))
+        btnOk.SetToolTip(
             _("Apply changes for the current session and close dialog"))
-        btnSave.SetToolTipString(
+        btnSave.SetToolTip(
             _("Apply and save changes to user settings file (default for next sessions)"))
-        btnCancel.SetToolTipString(_("Close dialog and ignore changes"))
+        btnCancel.SetToolTip(_("Close dialog and ignore changes"))
 
         # sizers
         btnStdSizer = wx.StdDialogButtonSizer()
Index: gui/wxpython/wxplot/profile.py
===================================================================
--- gui/wxpython/wxplot/profile.py	(revision 72985)
+++ gui/wxpython/wxplot/profile.py	(working copy)
@@ -17,6 +17,7 @@
 
 import os
 import sys
+import six
 import math
 import numpy
 
@@ -217,7 +218,7 @@
         self.ylabel = ''
         i = 0
 
-        for r in self.raster.iterkeys():
+        for r in six.iterkeys(self.raster):
             self.raster[r]['datalist'] = []
             datalist = self.CreateDatalist(r, self.coordstr)
             if len(datalist) > 0:
@@ -412,7 +413,7 @@
         message = []
         title = _('Statistics for Profile(s)')
 
-        for r in self.raster.iterkeys():
+        for r in six.iterkeys(self.raster):
             try:
                 rast = r.split('@')[0]
                 statstr = 'Profile of %s\n\n' % rast
