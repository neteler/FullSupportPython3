Index: scripts/db.dropcolumn/testsuite/test_db_dropcolumn.py
===================================================================
--- scripts/db.dropcolumn/testsuite/test_db_dropcolumn.py	(nonexistent)
+++ scripts/db.dropcolumn/testsuite/test_db_dropcolumn.py	(working copy)
@@ -0,0 +1,54 @@
+"""
+Created on Sun Jun 07 19:08:34 2018
+
+@author: Sanjeet Bhatti
+"""
+
+from grass.gunittest.case import TestCase
+from grass.gunittest.main import test
+from grass.gunittest.gmodules import SimpleModule
+
+from grass.script.core import run_command
+from grass.script.utils import decode
+
+
+class TestDbDropColumn(TestCase):
+    """Test db.dropcolumn script"""
+
+    mapName = 'myroads'
+    colName = 'SHAPE_LEN'
+
+    @classmethod
+    def setUpClass(cls):
+        """Copy vector."""
+        run_command('g.copy', vector='roadsmajor,myroads')
+
+    @classmethod
+    def tearDownClass(cls):
+        """Remove copied vector"""
+        run_command('g.remove', type='vector', name=cls.mapName,
+                    flags='f')
+
+    def test_drop_column_check(self):
+        """Drop column check, the column should still be in the table"""
+        module = SimpleModule('db.dropcolumn', table=self.mapName,
+                              column=self.colName)
+        self.assertModule(module)
+
+        m = SimpleModule('db.columns', table=self.mapName)
+        self.assertModule(m)
+        self.assertRegexpMatches(decode(m.outputs.stdout), self.colName)
+
+    def test_drop_column_with_force(self):
+        """Drop column with force, the column should not be in the table"""
+        module = SimpleModule('db.dropcolumn', table=self.mapName,
+                              column=self.colName,
+                              flags='f')
+        self.assertModule(module)
+
+        m = SimpleModule('db.columns', table=self.mapName)
+        self.assertModule(m)
+        self.assertNotRegexpMatches(decode(m.outputs.stdout), self.colName)
+
+if __name__ == '__main__':
+    test()
Index: scripts/db.droptable/testsuite/test_db_droptable.py
===================================================================
--- scripts/db.droptable/testsuite/test_db_droptable.py	(nonexistent)
+++ scripts/db.droptable/testsuite/test_db_droptable.py	(working copy)
@@ -0,0 +1,50 @@
+"""
+Created on Sun Jun 07 19:38:12 2018
+
+@author: Sanjeet Bhatti
+"""
+
+from grass.gunittest.case import TestCase
+from grass.gunittest.main import test
+from grass.gunittest.gmodules import SimpleModule
+
+from grass.script.core import run_command
+from grass.script.utils import decode
+
+
+class TestDbDropTable(TestCase):
+    """Test db.droptable script"""
+
+    mapName = 'myroads'
+
+    @classmethod
+    def setUpClass(cls):
+        """Copy vector."""
+        run_command('g.copy', vector='roadsmajor,myroads')
+
+    @classmethod
+    def tearDownClass(cls):
+        """Remove copied vector"""
+        run_command('g.remove', type='vector', name=cls.mapName,
+                    flags='f')
+
+    def test_drop_table_check(self):
+        """Drop table check, the column should still be in the table"""
+        module = SimpleModule('db.droptable', table=self.mapName)
+        self.assertModule(module)
+
+        m = SimpleModule('db.tables', flags='p')
+        self.assertModule(m)
+        self.assertRegexpMatches(decode(m.outputs.stdout), self.mapName)
+
+    def test_drop_table_with_force(self):
+        """Drop table with force, the column should not be in the table"""
+        module = SimpleModule('db.droptable', table=self.mapName, flags='f')
+        self.assertModule(module)
+
+        m = SimpleModule('db.tables', flags='p')
+        self.assertModule(m)
+        self.assertNotRegexpMatches(decode(m.outputs.stdout), self.mapName)
+
+if __name__ == '__main__':
+    test()
Index: scripts/db.in.ogr/db.in.ogr.py
===================================================================
--- scripts/db.in.ogr/db.in.ogr.py	(revision 72791)
+++ scripts/db.in.ogr/db.in.ogr.py	(working copy)
@@ -85,7 +85,7 @@
 
     # check if table exists
     try:
-        nuldev = file(os.devnull, 'w+')
+        nuldev = open(os.devnull, 'w+')
         s = grass.read_command('db.tables', flags='p', quiet=True, stderr=nuldev)
         nuldev.close()
     except CalledModuleError:
@@ -142,7 +142,7 @@
                           name=output)
 
     # get rid of superfluous auto-added cat column (and cat_ if present)
-    nuldev = file(os.devnull, 'w+')
+    nuldev = open(os.devnull, 'w+')
     grass.run_command('db.dropcolumn', quiet=True, flags='f', table=output,
                       column='cat', stdout=nuldev, stderr=nuldev)
     nuldev.close()
Index: scripts/db.in.ogr/testsuite/test_db_in_ogr.py
===================================================================
--- scripts/db.in.ogr/testsuite/test_db_in_ogr.py	(nonexistent)
+++ scripts/db.in.ogr/testsuite/test_db_in_ogr.py	(working copy)
@@ -0,0 +1,63 @@
+"""
+Created on Sun Jun 07 20:14:04 2018
+
+@author: Sanjeet Bhatti
+"""
+
+from grass.gunittest.case import TestCase
+from grass.gunittest.main import test
+from grass.gunittest.gmodules import SimpleModule
+
+from grass.script.core import run_command
+from grass.script.utils import decode
+
+import os
+
+
+class TestDbInOgr(TestCase):
+    """Test db.in.ogr script"""
+
+    csvFile = 'sample_data.csv'
+    dbfFile = 'sample_data.dbf'
+    tableName1 = 'sample_table1'
+    tableName2 = 'sample_table2'
+
+    @classmethod
+    def setUpClass(cls):
+        """Create temporary files. Remove if the tables already exists."""
+        cls.runModule('db.out.ogr', input='geology', output=cls.csvFile)
+        cls.runModule('db.out.ogr', input='geology', output=cls.dbfFile,
+                      format='DBF')
+        cls.runModule('db.droptable', table=cls.tableName1, flags='f')
+        cls.runModule('db.droptable', table=cls.tableName2, flags='f')
+
+    @classmethod
+    def tearDownClass(cls):
+        """Remove the created files and the created table"""
+        os.remove(cls.csvFile)
+        os.remove(cls.dbfFile)
+        cls.runModule('db.droptable', table=cls.tableName1, flags='f')
+        cls.runModule('db.droptable', table=cls.tableName2, flags='f')
+
+    def test_import_csv_file(self):
+        """import csv table"""
+        module = SimpleModule('db.in.ogr', input=self.csvFile,
+                              output=self.tableName1)
+        self.assertModule(module)
+
+        m = SimpleModule('db.tables', flags='p')
+        self.assertModule(m)
+        self.assertRegexpMatches(decode(m.outputs.stdout), self.tableName1)
+
+    def test_import_dbf_file(self):
+        """import dbf table"""
+        module = SimpleModule('db.in.ogr', input=self.dbfFile,
+                              output=self.tableName2)
+        self.assertModule(module)
+
+        m = SimpleModule('db.tables', flags='p')
+        self.assertModule(m)
+        self.assertRegexpMatches(decode(m.outputs.stdout), self.tableName2)
+
+if __name__ == '__main__':
+    test()
Index: scripts/db.out.ogr/testsuite/test_db_out_ogr.py
===================================================================
--- scripts/db.out.ogr/testsuite/test_db_out_ogr.py	(nonexistent)
+++ scripts/db.out.ogr/testsuite/test_db_out_ogr.py	(working copy)
@@ -0,0 +1,53 @@
+"""
+Created on Sun Jun 07 20:38:22 2018
+
+@author: Sanjeet Bhatti
+"""
+
+from grass.gunittest.case import TestCase
+from grass.gunittest.main import test
+from grass.gunittest.gmodules import SimpleModule
+
+import os
+
+
+class TestDbOutOgr(TestCase):
+    """Test db.out.ogr script"""
+
+    csvFile = 'sample_data.csv'
+    dbfFile = 'sample_data.dbf'
+
+    @classmethod
+    def setUpClass(cls):
+        """Remove if the files already exists."""
+        if (os.path.isfile(cls.csvFile)):
+            os.remove(cls.csvFile)
+        if (os.path.isfile(cls.dbfFile)):
+            os.remove(cls.dbfFile)
+
+    @classmethod
+    def tearDownClass(cls):
+        """Remove created files"""
+        if (os.path.isfile(cls.csvFile)):
+            os.remove(cls.csvFile)
+        if (os.path.isfile(cls.dbfFile)):
+            os.remove(cls.dbfFile)
+
+    def test_export_csv_file(self):
+        """export csv file"""
+        module = SimpleModule('db.out.ogr', input='geology',
+                              output=self.csvFile)
+        self.assertModule(module)
+
+        self.assertFileExists(self.csvFile)
+
+    def test_export_dbf_file(self):
+        """export dbf file"""
+        module = SimpleModule('db.out.ogr', input='geology',
+                              output=self.dbfFile, format='DBF')
+        self.assertModule(module)
+
+        self.assertFileExists(self.dbfFile)
+
+if __name__ == '__main__':
+    test()
Index: scripts/db.test/db.test.py
===================================================================
--- scripts/db.test/db.test.py	(revision 72791)
+++ scripts/db.test/db.test.py	(working copy)
@@ -48,7 +48,7 @@
     gcore.message(_("Using DB driver: %s") % dbconn['driver'])
 
     infile = os.path.join(os.environ['GISBASE'], 'etc', 'db.test', test_file)
-    inf = file(infile)
+    inf = open(infile)
 
     while True:
         type = inf.readline()
@@ -64,7 +64,7 @@
             if type == 'X':
                 gcore.write_command('db.execute', input='-', stdin=sql + '\n')
             else:
-                resf = file(result, 'w')
+                resf = open(result, 'w')
                 gcore.write_command('db.select', input='-', flags='c',
                                     stdin=sql + '\n', stdout=resf)
                 resf.close()
@@ -74,7 +74,7 @@
         else:
             gcore.message(_("EXECUTE: OK"))
 
-        expf = file(expected, 'w')
+        expf = open(expected, 'w')
         while True:
             res = inf.readline().rstrip('\r\n')
             if not res:
Index: scripts/db.univar/db.univar.py
===================================================================
--- scripts/db.univar/db.univar.py	(revision 72791)
+++ scripts/db.univar/db.univar.py	(working copy)
@@ -73,8 +73,8 @@
 
 
 def sortfile(infile, outfile):
-    inf = file(infile, 'r')
-    outf = file(outfile, 'w')
+    inf = open(infile, 'r')
+    outf = open(outfile, 'w')
 
     if gscript.find_program('sort', '--help'):
         gscript.run_command('sort', flags='n', stdin=inf, stdout=outf)
@@ -134,7 +134,7 @@
     if not driver:
         driver = None
 
-    tmpf = file(tmp, 'w')
+    tmpf = open(tmp, 'w')
     gscript.run_command('db.select', flags='c', table=table,
                         database=database, driver=driver, sql=sql,
                         stdout=tmpf)
@@ -141,7 +141,7 @@
     tmpf.close()
 
     # check if result is empty
-    tmpf = file(tmp)
+    tmpf = open(tmp)
     if tmpf.read(1) == '':
         gscript.fatal(_("Table <%s> contains no data.") % table)
         tmpf.close()
@@ -157,7 +157,7 @@
     minv = 1e300
     maxv = -1e300
 
-    tmpf = file(tmp)
+    tmpf = open(tmp)
     for line in tmpf:
         if len(line.rstrip('\r\n')) == 0:
             continue
@@ -237,7 +237,7 @@
             ppos[i] = 1
         pval[i] = 0
 
-    inf = file(tmp + ".sort")
+    inf = open(tmp + ".sort")
     l = 1
     for line in inf:
         if l == q25pos:
Index: scripts/db.univar/testsuite/test_db_univar.py
===================================================================
--- scripts/db.univar/testsuite/test_db_univar.py	(nonexistent)
+++ scripts/db.univar/testsuite/test_db_univar.py	(working copy)
@@ -0,0 +1,48 @@
+"""
+Created on Sun Jun 07 21:01:34 2018
+
+@author: Sanjeet Bhatti
+"""
+
+from grass.gunittest.case import TestCase
+from grass.gunittest.main import test
+from grass.gunittest.gmodules import SimpleModule
+
+from grass.script.core import run_command
+
+
+class TestDbUnivar(TestCase):
+    """Test db.univar script"""
+
+    columnName = 'heights'
+    mapName = 'samples'
+
+    @classmethod
+    def setUpClass(cls):
+        """Use temp region"""
+        cls.use_temp_region()
+        cls.runModule('g.region', raster='elevation', flags='p')
+
+    @classmethod
+    def tearDownClass(cls):
+        """Remove temporary region"""
+        cls.runModule('g.remove', flags='f', type='raster', name='elevation')
+        cls.del_temp_region()
+
+        run_command('v.db.droptable', map='samples', flags='f')
+
+    def test_calculate(self):
+        """run db.univar"""
+        run_command('v.random', output=self.mapName, n=100, overwrite='True')
+        run_command('v.db.addtable', map=self.mapName,
+                    column="heights double precision")
+        run_command('v.what.rast', map=self.mapName, raster='elevation',
+                    column=self.columnName)
+        run_command('v.db.select', map=self.mapName)
+
+        module = SimpleModule('db.univar', table=self.mapName,
+                              column=self.columnName)
+        self.assertModule(module)
+
+if __name__ == '__main__':
+    test()
Index: scripts/g.extension/testsuite/test_addons_modules.py
===================================================================
--- scripts/g.extension/testsuite/test_addons_modules.py	(revision 72791)
+++ scripts/g.extension/testsuite/test_addons_modules.py	(working copy)
@@ -16,6 +16,7 @@
 from grass.gunittest.main import test
 from grass.gunittest.gmodules import SimpleModule
 from grass.gunittest.utils import silent_rmtree
+from grass.script.utils import decode
 
 import os
 
@@ -54,7 +55,7 @@
         """List individual extensions/modules/addons"""
         module = SimpleModule('g.extension', flags='l', url=self.url)
         self.assertModule(module)
-        stdout = module.outputs.stdout
+        stdout = decode(module.outputs.stdout)
         self.assertMultiLineEqual(stdout, MODULES_OUTPUT)
 
 
Index: scripts/g.extension/testsuite/test_addons_toolboxes.py
===================================================================
--- scripts/g.extension/testsuite/test_addons_toolboxes.py	(revision 72791)
+++ scripts/g.extension/testsuite/test_addons_toolboxes.py	(working copy)
@@ -15,6 +15,7 @@
 from grass.gunittest.case import TestCase
 from grass.gunittest.main import test
 from grass.gunittest.gmodules import SimpleModule
+from grass.script.utils import decode
 
 import os
 
@@ -44,8 +45,8 @@
         """List toolboxes and their content"""
         module = SimpleModule('g.extension', flags='lt', url=self.url)
         self.assertModule(module)
-        stdout = module.outputs.stdout
-        self.assertLooksLike(stdout, FULL_TOOLBOXES_OUTPUT)
+        stdout = decode(module.outputs.stdout)
+        self.assertMultiLineEqual(stdout, FULL_TOOLBOXES_OUTPUT)
 
 
 if __name__ == '__main__':
Index: scripts/g.search.modules/testsuite/test_g_search_modules.py
===================================================================
--- scripts/g.search.modules/testsuite/test_g_search_modules.py	(revision 72791)
+++ scripts/g.search.modules/testsuite/test_g_search_modules.py	(working copy)
@@ -15,6 +15,7 @@
 from grass.gunittest.case import TestCase
 from grass.gunittest.main import test
 from grass.gunittest.gmodules import SimpleModule
+from grass.script.utils import decode
 
 import termcolor
 
@@ -25,7 +26,7 @@
         """ """
         module = SimpleModule('g.search.modules', keyword="water")
         self.assertModule(module)
-        stdout = module.outputs.stdout
+        stdout = decode(module.outputs.stdout)
         self.assertEqual(stdout.split()[0], 'r.basins.fill')
 
     def test_json_output(self):
@@ -32,7 +33,7 @@
         import json
         module = SimpleModule('g.search.modules', keyword="water", flags="j")
         self.assertModule(module)
-        stdout = json.loads(module.outputs.stdout)
+        stdout = json.loads(decode(module.outputs.stdout))
         self.assertEqual(len(stdout), 6, 'Six modules found')
         self.assertEqual(stdout[3]['name'], 'r.water.outlet', 'r.water.outlet')
         self.assertTrue('keywords' in stdout[3]['attributes'])
@@ -40,7 +41,7 @@
     def test_shell_outout(self):
         module = SimpleModule('g.search.modules', keyword="water", flags="g")
         self.assertModule(module)
-        stdout = module.outputs.stdout.split()
+        stdout = decode(module.outputs.stdout).split()
         self.assertEqual(len(stdout), 6)
         self.assertEqual(stdout[3], 'r.water.outlet')
 
@@ -47,7 +48,7 @@
     def test_colored_terminal(self):
         module = SimpleModule('g.search.modules', keyword="water", flags="c")
         self.assertModule(module)
-        stdout = module.outputs.stdout.split()
+        stdout = decode(module.outputs.stdout).split()
         self.assertEqual(stdout[0],
                          termcolor.colored('r.basins.fill',
                                            attrs=['bold']))
@@ -55,7 +56,7 @@
     def test_manual_pages(self):
         module = SimpleModule('g.search.modules', keyword="kapri", flags="gm")
         self.assertModule(module)
-        stdout = module.outputs.stdout.split()
+        stdout = decode(module.outputs.stdout).split()
         self.assertEqual(len(stdout), 2)
 
 if __name__ == '__main__':
Index: scripts/i.in.spotvgt/i.in.spotvgt.py
===================================================================
--- scripts/i.in.spotvgt/i.in.spotvgt.py	(revision 72791)
+++ scripts/i.in.spotvgt/i.in.spotvgt.py	(working copy)
@@ -77,7 +77,7 @@
 
 
 def create_VRT_file(projfile, vrtfile, infile):
-    fh = file(projfile)
+    fh = open(projfile)
     kv = {}
     for l in fh:
         f = l.rstrip('\r\n').split()
@@ -104,7 +104,7 @@
     s = t.substitute(NORTHCORNER=north_corner, WESTCORNER=west_corner,
                      XSIZE=xsize, YSIZE=ysize, RESOLUTION=map_proj_res,
                      FILENAME=infile)
-    outf = file(vrtfile, 'w')
+    outf = open(vrtfile, 'w')
     outf.write(s)
     outf.close()
 
Index: scripts/i.oif/i.oif.py
===================================================================
--- scripts/i.oif/i.oif.py	(revision 72791)
+++ scripts/i.oif/i.oif.py	(working copy)
@@ -156,7 +156,7 @@
         for v, p in oif:
             sys.stdout.write(fmt % (p + (v,)))
     else:
-        outf = file(output, 'w')
+        outf = open(output, 'w')
         for v, p in oif:
             outf.write(fmt % (p + (v,)))
         outf.close()
Index: scripts/i.pansharpen/i.pansharpen.py
===================================================================
--- scripts/i.pansharpen/i.pansharpen.py	(revision 72791)
+++ scripts/i.pansharpen/i.pansharpen.py	(working copy)
@@ -89,6 +89,7 @@
     hasNumPy = False
 
 import grass.script as grass
+from grass.script.utils import decode
 
 # i18N
 import gettext
@@ -373,7 +374,7 @@
         # calculate number of cells for each grey value for for each image
         stats_out = grass.pipe_command('r.stats', flags='cin', input=i,
                                        sep=':')
-        stats = stats_out.communicate()[0].split('\n')[:-1]
+        stats = decode(stats_out.communicate()[0]).split('\n')[:-1]
         stats_dict = dict(s.split(':', 1) for s in stats)
         total_cells = 0  # total non-null cells
         for j in stats_dict:
Index: scripts/i.tasscap/i.tasscap.py
===================================================================
--- scripts/i.tasscap/i.tasscap.py	(revision 72791)
+++ scripts/i.tasscap/i.tasscap.py	(working copy)
@@ -165,7 +165,7 @@
     for i, band in enumerate(inputs):
         band_num = i + 1
         bands['in' + str(band_num) + 'band'] = band
-    grass.debug(1, bands)
+    grass.debug(bands, 1)
 
     # core tasseled cap components computation
     calcN(output_basename, bands, satellite)
Index: scripts/m.proj/m.proj.py
===================================================================
--- scripts/m.proj/m.proj.py	(revision 72791)
+++ scripts/m.proj/m.proj.py	(working copy)
@@ -95,7 +95,7 @@
 import sys
 import os
 import threading
-from grass.script.utils import separator, parse_key_val
+from grass.script.utils import separator, parse_key_val, encode, decode
 from grass.script import core as gcore
 
 # i18N
@@ -117,6 +117,7 @@
             if not line:
                 break
             line = line.replace(self.ifs, ' ')
+            line = encode(line)
             self.outf.write(line)
             self.outf.flush()
 
@@ -231,7 +232,7 @@
         fd = open(tmpfile, "w")
         fd.write("%s%s%s\n" % (x, ifs, y))
         fd.close()
-        inf = file(tmpfile)
+        inf = open(tmpfile)
     else:
         if input == '-':
             infile = None
@@ -240,7 +241,7 @@
             infile = input
             if not os.path.exists(infile):
                 gcore.fatal(_("Unable to read input data"))
-            inf = file(infile)
+            inf = open(infile)
             gcore.debug("input file=[%s]" % infile)
 
     # set up output file
@@ -279,7 +280,7 @@
             outf.write("x%sy%sz\n" % (ofs, ofs))
         for line in p.stdout:
             try:
-                xy, z = line.split(' ', 1)
+                xy, z = decode(line).split(' ', 1)
                 x, y = xy.split('\t')
             except ValueError:
                 gcore.fatal(line)
@@ -290,7 +291,7 @@
         if include_header:
             outf.write("input_x%sinput_y%sx%sy%sz\n" % (ofs, ofs, ofs, ofs))
         for line in p.stdout:
-            inXYZ, x, rest = line.split('\t')
+            inXYZ, x, rest = decode(line).split('\t')
             inX, inY = inXYZ.split(' ')[:2]
             y, z = rest.split(' ', 1)
             outf.write('%s%s%s%s%s%s%s%s%s\n' %
Index: scripts/r.blend/testsuite/test_r_blend.py
===================================================================
--- scripts/r.blend/testsuite/test_r_blend.py	(nonexistent)
+++ scripts/r.blend/testsuite/test_r_blend.py	(working copy)
@@ -0,0 +1,47 @@
+"""
+Created on Sun Jun 07 21:42:39 2018
+
+@author: Sanjeet Bhatti
+"""
+
+from grass.gunittest.case import TestCase
+from grass.gunittest.main import test
+from grass.gunittest.gmodules import SimpleModule
+from grass.script.core import run_command
+
+
+class TestRBlend(TestCase):
+    """Test r.blend script"""
+
+    map1 = 'aspect'
+    map2 = 'elevation'
+    temp1 = 'elev_shade_blend.r'
+    temp2 = 'elev_shade_blend.g'
+    temp3 = 'elev_shade_blend.b'
+
+    @classmethod
+    def setUpClass(cls):
+        """Create maps in a small region."""
+        cls.use_temp_region()
+        cls.runModule('g.region', raster=cls.map1, flags='p')
+        run_command('d.mon', start='wx0')
+
+    @classmethod
+    def tearDownClass(cls):
+        """Remove temporary region"""
+        cls.runModule('g.remove', flags='f', type='raster',
+                      name=(cls.map1, cls.temp1, cls.temp2, cls.temp3))
+        cls.del_temp_region()
+        run_command('d.mon', stop='wx0')
+
+    def test_blend(self):
+        """blends color test"""
+        module = SimpleModule('r.blend', first=self.map1, second=self.map2,
+                              output='elev_shade_blend')
+        self.assertModule(module)
+
+        run_command('d.rgb', red=self.temp1, green=self.temp2,
+                    blue=self.temp3)
+
+if __name__ == '__main__':
+    test()
Index: scripts/r.buffer.lowmem/r.buffer.lowmem.py
===================================================================
--- scripts/r.buffer.lowmem/r.buffer.lowmem.py	(revision 72791)
+++ scripts/r.buffer.lowmem/r.buffer.lowmem.py	(working copy)
@@ -46,6 +46,7 @@
 import atexit
 import math
 import grass.script as grass
+from grass.script.utils import encode
 
 # i18N
 import gettext
@@ -124,10 +125,12 @@
 
     p = grass.feed_command('r.category', map=output,
                            separator=':', rules='-')
-    p.stdin.write("1:distances calculated from these locations\n")
+    msg = "1:distances calculated from these locations\n"
+    p.stdin.write(encode(msg))
     d0 = "0"
     for n, d in enumerate(distances):
-        p.stdin.write("%d:%s-%s %s\n" % (n + 2, d0, d, units))
+        msg = "%d:%s-%s %s\n" % (n + 2, d0, d, units)
+        p.stdin.write(encode(msg))
         d0 = d
     p.stdin.close()
     p.wait()
Index: scripts/r.colors.stddev/testsuite/test_r_colors_stddev.py
===================================================================
--- scripts/r.colors.stddev/testsuite/test_r_colors_stddev.py	(nonexistent)
+++ scripts/r.colors.stddev/testsuite/test_r_colors_stddev.py	(working copy)
@@ -0,0 +1,35 @@
+"""
+Created on Sun Jun 07 21:44:12 2018
+
+@author: Sanjeet Bhatti
+"""
+
+from grass.gunittest.case import TestCase
+from grass.gunittest.main import test
+from grass.gunittest.gmodules import SimpleModule
+
+
+class TestRColorsStddev(TestCase):
+    """Test r.colors.stddev script"""
+
+    mapName = 'elevation'
+
+    @classmethod
+    def setUpClass(cls):
+        """Create maps in a small region."""
+        cls.use_temp_region()
+        cls.runModule('g.region', raster=cls.mapName, flags='p')
+
+    @classmethod
+    def tearDownClass(cls):
+        """Remove temporary region"""
+        cls.runModule('g.remove', flags='f', type='raster', name=cls.mapName)
+        cls.del_temp_region()
+
+    def test_sets_color_rules(self):
+        """sets color rule test"""
+        module = SimpleModule('r.colors.stddev', map=self.mapName)
+        self.assertModule(module)
+
+if __name__ == '__main__':
+    test()
Index: scripts/r.fillnulls/r.fillnulls.py
===================================================================
--- scripts/r.fillnulls/r.fillnulls.py	(revision 72791)
+++ scripts/r.fillnulls/r.fillnulls.py	(working copy)
@@ -246,7 +246,7 @@
             file=cats_file_name,
             quiet=quiet)
         cat_list = list()
-        cats_file = file(cats_file_name)
+        cats_file = open(cats_file_name)
         for line in cats_file:
             cat_list.append(line.rstrip('\n'))
         cats_file.close()
Index: scripts/r.fillnulls/testsuite/test_r_fillnulls.py
===================================================================
--- scripts/r.fillnulls/testsuite/test_r_fillnulls.py	(nonexistent)
+++ scripts/r.fillnulls/testsuite/test_r_fillnulls.py	(working copy)
@@ -0,0 +1,48 @@
+"""
+Created on Sun Jun 07 21:57:07 2018
+
+@author: Sanjeet Bhatti
+"""
+
+from grass.gunittest.case import TestCase
+from grass.gunittest.main import test
+from grass.gunittest.gmodules import SimpleModule
+from grass.script.core import run_command
+
+
+class TestRFillNulls(TestCase):
+    """Test r.fillnulls script"""
+
+    mapName = 'elev_srtm_30m'
+    expression = 'elev_srtm_30m_filt = if(elev_srtm_30m < 50.0, \
+    null(), elev_srtm_30m)'
+    mapNameCalc = 'elev_srtm_30m_filt'
+    mapComplete = 'elev_srtm_30m_complete'
+    values = 'null_cells=0'
+
+    @classmethod
+    def setUpClass(cls):
+        """Create maps in a small region."""
+        cls.use_temp_region()
+        cls.runModule('g.region', raster=cls.mapName, flags='p')
+
+    @classmethod
+    def tearDownClass(cls):
+        """Remove temporary region"""
+        cls.runModule('g.remove', flags='f', type='raster',
+                      name=(cls.mapName, cls.mapNameCalc, cls.mapComplete))
+        cls.del_temp_region()
+
+    def test_fill_nulls(self):
+        """Fill nulls test"""
+        run_command('r.mapcalc', expression=self.expression)
+
+        module = SimpleModule('r.fillnulls', input=self.mapNameCalc,
+                              output=self.mapComplete, tension=20)
+        self.assertModule(module)
+
+        self.assertRasterFitsUnivar(raster=self.mapComplete,
+                                    reference=self.values)
+
+if __name__ == '__main__':
+    test()
Index: scripts/r.grow/r.grow.py
===================================================================
--- scripts/r.grow/r.grow.py	(revision 72791)
+++ scripts/r.grow/r.grow.py	(working copy)
@@ -64,7 +64,6 @@
 import os
 import atexit
 import math
-from string import split
 import grass.script as grass
 from grass.exceptions import CalledModuleError
 
@@ -124,7 +123,7 @@
 
     # Workaround for r.mapcalc bug #3475
     # Mapcalc will fail if output is a fully qualified map name
-    out_name = split(options['output'], '@')
+    out_name = options['output'].split('@')
     if len(out_name) == 2:
         if out_name[1] != grass.gisenv()['MAPSET']:
             grass.fatal(_("Output can be written only to the current mapset"))
Index: scripts/r.grow/testsuite/test_r_grow.py
===================================================================
--- scripts/r.grow/testsuite/test_r_grow.py	(nonexistent)
+++ scripts/r.grow/testsuite/test_r_grow.py	(working copy)
@@ -0,0 +1,49 @@
+"""
+Created on Sun Jun 07 22:09:41 2018
+
+@author: Sanjeet Bhatti
+"""
+
+from grass.gunittest.case import TestCase
+from grass.gunittest.main import test
+from grass.gunittest.gmodules import SimpleModule
+from grass.script.core import run_command
+
+
+class TestRGrow(TestCase):
+    """Test r.grow script"""
+
+    mapName = 'lakes'
+    mapGrownOutput = 'lakes_grown_100m'
+    mapShrunkOutput = 'lakes_shrunk_100m'
+
+    @classmethod
+    def setUpClass(cls):
+        """Create maps in a small region."""
+        cls.use_temp_region()
+        cls.runModule('g.region', raster=cls.mapName, flags='p')
+
+    @classmethod
+    def tearDownClass(cls):
+        """Remove temporary region"""
+        cls.runModule('g.remove', flags='f', type='raster',
+                      name=(cls.mapName, cls.mapGrownOutput,
+                            cls.mapShrunkOutput))
+        cls.del_temp_region()
+
+    def test_grow(self):
+        """Grow test"""
+        module = SimpleModule('r.grow', input=self.mapName,
+                              output=self.mapGrownOutput,
+                              radius=10)
+        self.assertModule(module)
+
+    def test_shrink(self):
+        """Shrink test"""
+        module = SimpleModule('r.grow', input=self.mapName,
+                              output=self.mapShrunkOutput,
+                              radius=-10)
+        self.assertModule(module)
+
+if __name__ == '__main__':
+    test()
Index: scripts/r.in.srtm/r.in.srtm.py
===================================================================
--- scripts/r.in.srtm/r.in.srtm.py	(revision 72791)
+++ scripts/r.in.srtm/r.in.srtm.py	(working copy)
@@ -262,13 +262,13 @@
 
     header = tmpl % (ulxmap, ulymap)
     hdrfile = tile + '.hdr'
-    outf = file(hdrfile, 'w')
+    outf = open(hdrfile, 'w')
     outf.write(header)
     outf.close()
 
     # create prj file: To be precise, we would need EGS96! But who really cares...
     prjfile = tile + '.prj'
-    outf = file(prjfile, 'w')
+    outf = open(prjfile, 'w')
     outf.write(proj)
     outf.close()
 
Index: scripts/r.in.wms/wms_base.py
===================================================================
--- scripts/r.in.wms/wms_base.py	(revision 72791)
+++ scripts/r.in.wms/wms_base.py	(working copy)
@@ -383,7 +383,7 @@
             self.temp_warpmap = grass.tempfile()
 
             if int(os.getenv('GRASS_VERBOSE', '2')) <= 2:
-                nuldev = file(os.devnull, 'w+')
+                nuldev = open(os.devnull, 'w+')
             else:
                 nuldev = None
 
Index: scripts/r.mask/r.mask.py
===================================================================
--- scripts/r.mask/r.mask.py	(revision 72791)
+++ scripts/r.mask/r.mask.py	(working copy)
@@ -71,6 +71,7 @@
 import atexit
 
 import grass.script as grass
+from grass.script.utils import encode
 from grass.exceptions import CalledModuleError
 
 # i18N
@@ -141,7 +142,8 @@
                 output='MASK',
                 overwrite=True,
                 rules='-')
-            p.stdin.write("%s = 1" % maskcats)
+            res = "%s = 1" % maskcats
+            p.stdin.write(encode(res))
             p.stdin.close()
             p.wait()
         elif vector:
Index: scripts/r.mask/testsuite/test_r_mask.py
===================================================================
--- scripts/r.mask/testsuite/test_r_mask.py	(nonexistent)
+++ scripts/r.mask/testsuite/test_r_mask.py	(working copy)
@@ -0,0 +1,44 @@
+"""
+Created on Sun Jun 07 22:19:41 2018
+
+@author: Sanjeet Bhatti
+"""
+
+from grass.gunittest.case import TestCase
+from grass.gunittest.main import test
+from grass.gunittest.gmodules import SimpleModule
+
+
+class TestRMask(TestCase):
+    """Test r.mask script"""
+
+    mapName = 'lakes'
+    mapNameOther = 'elevation'
+    values = 'min=56.8785\nmax=134.87'
+
+    @classmethod
+    def setUpClass(cls):
+        """Create maps in a small region."""
+        cls.use_temp_region()
+        cls.runModule('g.region', raster=cls.mapName, flags='p')
+
+    @classmethod
+    def tearDownClass(cls):
+        """Remove temporary region. Remove mask"""
+        cls.runModule('g.remove', flags='f', type='raster',
+                      name=(cls.mapName, cls.mapNameOther))
+        cls.del_temp_region()
+
+        cls.runModule('r.mask', flags='r')
+
+    def test_mask(self):
+        """Mask test"""
+        module = SimpleModule('r.mask', raster=self.mapName)
+        self.assertModule(module)
+
+        self.assertRasterFitsUnivar(raster=self.mapNameOther,
+                                    reference=self.values,
+                                    precision=5)
+
+if __name__ == '__main__':
+    test()
Index: scripts/r.out.xyz/testsuite/test_r_out_xyz.py
===================================================================
--- scripts/r.out.xyz/testsuite/test_r_out_xyz.py	(nonexistent)
+++ scripts/r.out.xyz/testsuite/test_r_out_xyz.py	(working copy)
@@ -0,0 +1,44 @@
+"""
+Created on Sun Jun 08 10:11:18 2018
+
+@author: Sanjeet Bhatti
+"""
+
+from grass.gunittest.case import TestCase
+from grass.gunittest.main import test
+from grass.gunittest.gmodules import SimpleModule
+
+import os
+
+
+class TestROutXyz(TestCase):
+    """Test r.out.xyz script"""
+
+    mapName = 'elev_lid792_1m'
+    csvFile = 'elev_lid792_1m.csv'
+
+    @classmethod
+    def setUpClass(cls):
+        """Create maps in a small region."""
+        cls.use_temp_region()
+        cls.runModule('g.region', raster=cls.mapName, flags='p')
+
+    @classmethod
+    def tearDownClass(cls):
+        """Remove temporary region"""
+        cls.runModule('g.remove', flags='f', type='raster', name=cls.mapName)
+        cls.del_temp_region()
+
+        if (os.path.isfile(cls.csvFile)):
+            os.remove(cls.csvFile)
+
+    def test_r_out_xyz(self):
+        """ASCII text file test"""
+        module = SimpleModule('r.out.xyz', input=self.mapName,
+                              output=self.csvFile, separator=",")
+        self.assertModule(module)
+
+        self.assertFileExists(filename=self.csvFile)
+
+if __name__ == '__main__':
+    test()
Index: scripts/r.pack/testsuite/test_r_pack.py
===================================================================
--- scripts/r.pack/testsuite/test_r_pack.py	(nonexistent)
+++ scripts/r.pack/testsuite/test_r_pack.py	(working copy)
@@ -0,0 +1,46 @@
+"""
+Created on Sun Jun 08 10:15:22 2018
+
+@author: Sanjeet Bhatti
+"""
+
+from grass.gunittest.case import TestCase
+from grass.gunittest.main import test
+from grass.gunittest.gmodules import SimpleModule
+
+import os
+
+
+class TestRPack(TestCase):
+    """Test r.pack script"""
+
+    mapName = 'aspect'
+    outFile = 'aspect.pack'
+
+    @classmethod
+    def setUpClass(cls):
+        """Create maps in a small region."""
+        cls.use_temp_region()
+        cls.runModule('g.region', raster=cls.mapName, flags='p')
+
+    @classmethod
+    def tearDownClass(cls):
+        """Remove temporary region"""
+        cls.runModule('g.remove', flags='f', type='raster', name=cls.mapName)
+        cls.del_temp_region()
+
+        cls.runModule('r.unpack', input=cls.outFile)
+
+        if (os.path.isfile(cls.outFile)):
+            os.remove(cls.outFile)
+
+    def test_r_pack(self):
+        """Create a pack file test"""
+        module = SimpleModule('r.pack', input=self.mapName,
+                              output=self.outFile)
+        self.assertModule(module)
+
+        self.assertFileExists(filename=self.outFile)
+
+if __name__ == '__main__':
+    test()
Index: scripts/r.plane/testsuite/test_r_plane.py
===================================================================
--- scripts/r.plane/testsuite/test_r_plane.py	(nonexistent)
+++ scripts/r.plane/testsuite/test_r_plane.py	(working copy)
@@ -0,0 +1,41 @@
+"""
+Created on Sun Jun 08 12:12:34 2018
+
+@author: Sanjeet Bhatti
+"""
+
+from grass.gunittest.case import TestCase
+from grass.gunittest.main import test
+from grass.gunittest.gmodules import SimpleModule
+
+
+class TestRPlane(TestCase):
+    """Test r.plane script"""
+
+    mapName = 'elevation'
+    mapOutput = 'myplane45'
+
+    @classmethod
+    def setUpClass(cls):
+        """Create maps in a small region."""
+        cls.use_temp_region()
+        cls.runModule('g.region', raster=cls.mapName, flags='p')
+
+    @classmethod
+    def tearDownClass(cls):
+        """Remove temporary region"""
+        cls.runModule('g.remove', flags='f', type='raster',
+                      name=(cls.mapName, cls.mapOutput))
+        cls.del_temp_region()
+
+    def test_creates_raster_plane_map(self):
+        """Create a tilted plane raster map test"""
+        module = SimpleModule('r.plane', output=self.mapOutput, dip=45,
+                              easting=527500.0, northing=165000.0,
+                              elevation=1000, type='FCELL')
+        self.assertModule(module)
+
+        self.assertRasterExists(self.mapOutput)
+
+if __name__ == '__main__':
+    test()
Index: scripts/r.reclass.area/r.reclass.area.py
===================================================================
--- scripts/r.reclass.area/r.reclass.area.py	(revision 72791)
+++ scripts/r.reclass.area/r.reclass.area.py	(working copy)
@@ -76,6 +76,7 @@
 import os
 import atexit
 import grass.script as grass
+from grass.script.utils import decode, encode
 
 # i18N
 import gettext
@@ -142,7 +143,7 @@
                             rules='-')
     rules = ''
     for line in p1.stdout:
-        f = line.rstrip(os.linesep).split(';')
+        f = decode(line).rstrip(os.linesep).split(';')
         if len(f) < 5:
             continue
         hectares = float(f[4]) * 0.0001
@@ -153,7 +154,7 @@
         if test:
             rules += "%s = %s %s\n" % (f[0], f[2], f[3])
     if rules:
-        p2.stdin.write(rules)
+        p2.stdin.write(encode(rules))
     p1.wait()
     p2.stdin.close()
     p2.wait()
Index: scripts/r.rgb/testsuite/test_r_rgb.py
===================================================================
--- scripts/r.rgb/testsuite/test_r_rgb.py	(nonexistent)
+++ scripts/r.rgb/testsuite/test_r_rgb.py	(working copy)
@@ -0,0 +1,44 @@
+"""
+Created on Sun Jun 08 13:20:31 2018
+
+@author: Sanjeet Bhatti
+"""
+
+from grass.gunittest.case import TestCase
+from grass.gunittest.main import test
+from grass.gunittest.gmodules import SimpleModule
+
+
+class TestRRGB(TestCase):
+    """Test r.rgb script"""
+
+    mapName = 'elevation'
+    red = 'elevation.r'
+    green = 'elevation.g'
+    blue = 'elevation.b'
+
+    @classmethod
+    def setUpClass(cls):
+        """Create maps in a small region."""
+        cls.use_temp_region()
+        cls.runModule('g.region', raster=cls.mapName, flags='p')
+
+    @classmethod
+    def tearDownClass(cls):
+        """Remove temporary region"""
+        cls.runModule('g.remove', flags='f', type='raster',
+                      name=(cls.mapName, cls.red, cls.green, cls.blue))
+        cls.del_temp_region()
+
+    def test_rgb_maps(self):
+        """Generates rgb maps from a raster map test"""
+        module = SimpleModule('r.rgb', input=self.mapName, red=self.red,
+                              green=self.green, blue=self.blue)
+        self.assertModule(module)
+
+        self.assertRasterExists(self.red)
+        self.assertRasterExists(self.green)
+        self.assertRasterExists(self.blue)
+
+if __name__ == '__main__':
+    test()
Index: scripts/r.shade/testsuite/test_r_shade.py
===================================================================
--- scripts/r.shade/testsuite/test_r_shade.py	(nonexistent)
+++ scripts/r.shade/testsuite/test_r_shade.py	(working copy)
@@ -0,0 +1,41 @@
+"""
+Created on Sun Jun 08 13:44:07 2018
+
+@author: Sanjeet Bhatti
+"""
+
+from grass.gunittest.case import TestCase
+from grass.gunittest.main import test
+from grass.gunittest.gmodules import SimpleModule
+
+
+class TestRShade(TestCase):
+    """Test r.shade script"""
+
+    mapName = 'aspect'
+    color = 'elevation'
+    outputMap = 'elevation_aspect_shaded'
+
+    @classmethod
+    def setUpClass(cls):
+        """Create maps in a small region."""
+        cls.use_temp_region()
+        cls.runModule('g.region', raster=cls.mapName, flags='p')
+
+    @classmethod
+    def tearDownClass(cls):
+        """Remove temporary region"""
+        cls.runModule('g.remove', flags='f', type='raster',
+                      name=(cls.mapName, cls.outputMap))
+        cls.del_temp_region()
+
+    def test_shade_map(self):
+        """Generates a color raster map over shaded relief map test"""
+        module = SimpleModule('r.shade', shade=self.mapName, color=self.color,
+                              output=self.outputMap)
+        self.assertModule(module)
+
+        self.assertRasterExists(self.outputMap)
+
+if __name__ == '__main__':
+    test()
Index: scripts/r.tileset/testsuite/test_r_tileset.py
===================================================================
--- scripts/r.tileset/testsuite/test_r_tileset.py	(nonexistent)
+++ scripts/r.tileset/testsuite/test_r_tileset.py	(working copy)
@@ -0,0 +1,46 @@
+"""
+Created on Sun Jun 08 19:42:32 2018
+
+@author: Sanjeet Bhatti
+"""
+
+from grass.gunittest.case import TestCase
+from grass.gunittest.main import test
+from grass.gunittest.gmodules import SimpleModule
+
+from grass.script.utils import decode
+
+import os
+
+output = """\
+-78.77462049|35.6875073|-78.60830318|35.74855834|1506|678
+-78.77462049|35.74855834|-78.60830318|35.80960938|1506|678
+""".replace('\n', os.linesep)
+
+
+class TestRTileset(TestCase):
+    """Test r.tileset script"""
+
+    mapName = 'elevation'
+
+    @classmethod
+    def setUpClass(cls):
+        """Use temporary region settings"""
+        cls.use_temp_region()
+        cls.runModule('g.region', raster=cls.mapName, flags='p')
+
+    @classmethod
+    def tearDownClass(cls):
+        """!Remove the temporary region"""
+        cls.del_temp_region()
+
+    def test_tiling(self):
+        """Produce tiling test"""
+        module = SimpleModule('r.tileset', sourceproj='+init=epsg:4326',
+                              maxrows=1024, maxcols=2048)
+        self.assertModule(module)
+
+        self.assertMultiLineEqual(decode(module.outputs.stdout), output)
+
+if __name__ == '__main__':
+    test()
Index: scripts/v.centroids/testsuite/test_v_centroids.py
===================================================================
--- scripts/v.centroids/testsuite/test_v_centroids.py	(nonexistent)
+++ scripts/v.centroids/testsuite/test_v_centroids.py	(working copy)
@@ -0,0 +1,40 @@
+"""
+Created on Thrs Jun 09 11:26:12 2018
+
+@author: Sanjeet Bhatti
+"""
+
+from grass.gunittest.case import TestCase
+from grass.gunittest.main import test
+from grass.gunittest.gmodules import SimpleModule
+
+
+class TestVCentroids(TestCase):
+    """Test v.centroids script"""
+    mapName = 'busroute11'
+    outRouteMap = 'busroute11_boundary'
+    fromType = 'line'
+    toType = 'boundary'
+    outAreaMap = 'busroute11_area'
+
+    @classmethod
+    def setUpClass(cls):
+        """Create an area from a closed line"""
+        cls.runModule('v.type', input=cls.mapName, output=cls.outRouteMap,
+                      from_type=cls.fromType, to_type=cls.toType)
+
+    @classmethod
+    def tearDownClass(cls):
+        """Remove the generated maps"""
+        cls.runModule('g.remove', flags='f', type='vector',
+                      name=(cls.outRouteMap, cls.outAreaMap))
+
+    def test_area(self):
+        """Adds missing centroids to closed boundaries test"""
+        module = SimpleModule('v.centroids', input=self.outRouteMap,
+                              output=self.outAreaMap)
+        self.assertModule(module)
+        self.assertVectorExists(self.outAreaMap)
+
+if __name__ == '__main__':
+    test()
Index: scripts/v.db.addcolumn/testsuite/test_v_db_addcolumn.py
===================================================================
--- scripts/v.db.addcolumn/testsuite/test_v_db_addcolumn.py	(nonexistent)
+++ scripts/v.db.addcolumn/testsuite/test_v_db_addcolumn.py	(working copy)
@@ -0,0 +1,52 @@
+"""
+Created on Sun Jun 09 11:28:34 2018
+
+@author: Sanjeet Bhatti
+"""
+
+from grass.gunittest.case import TestCase
+from grass.gunittest.main import test
+from grass.gunittest.gmodules import SimpleModule
+
+from grass.script.core import run_command
+from grass.script.utils import decode
+
+
+class TestVDbAddColumn(TestCase):
+    """Test v.db.addcolumn script"""
+
+    @classmethod
+    def setUpClass(cls):
+        """Copy vector."""
+        run_command('g.copy', vector='roadsmajor,myroads')
+
+    @classmethod
+    def tearDownClass(cls):
+        """Remove copied vector"""
+        run_command('g.remove', type='vector', name='myroads',
+                    flags='f')
+
+    def test_add_single_column_check(self):
+        """Add column to the attribute table"""
+        module = SimpleModule('v.db.addcolumn', map='myroads',
+                              columns='slope double precision')
+        self.assertModule(module)
+
+        m = SimpleModule('v.info', map='myroads', flags='c')
+        self.assertModule(m)
+        self.assertRegexpMatches(decode(m.outputs.stdout), 'slope')
+
+    def test_add_two_columns_check(self):
+        """Add two column to the attribute table"""
+        module = SimpleModule('v.db.addcolumn', map='myroads',
+                              columns='slope_2 double precision, \
+                              myname varchar(15)')
+        self.assertModule(module)
+
+        m = SimpleModule('v.info', map='myroads', flags='c')
+        self.assertModule(m)
+        self.assertRegexpMatches(decode(m.outputs.stdout), 'slope_2')
+        self.assertRegexpMatches(decode(m.outputs.stdout), 'myname')
+
+if __name__ == '__main__':
+    test()
Index: scripts/v.db.addcolumn/v.db.addcolumn.py
===================================================================
--- scripts/v.db.addcolumn/v.db.addcolumn.py	(revision 72791)
+++ scripts/v.db.addcolumn/v.db.addcolumn.py	(working copy)
@@ -43,6 +43,7 @@
 import sys
 import os
 import grass.script as grass
+from grass.script.utils import encode
 
 # i18N
 import gettext
@@ -81,9 +82,11 @@
             grass.error(_("Column <%s> is already in the table. Skipping.") % col_name)
             continue
         grass.verbose(_("Adding column <%s> to the table") % col_name)
-        p = grass.feed_command('db.execute', input='-', database=database, driver=driver)
-        p.stdin.write("ALTER TABLE %s ADD COLUMN %s" % (table, col))
-        grass.debug("ALTER TABLE %s ADD COLUMN %s" % (table, col))
+        p = grass.feed_command('db.execute', input='-',
+                               database=database, driver=driver)
+        res = "ALTER TABLE {} ADD COLUMN {}".format(table, col)
+        p.stdin.write(encode(res))
+        grass.debug(res)
         p.stdin.close()
         if p.wait() != 0:
             grass.fatal(_("Unable to add column <%s>.") % col)
Index: scripts/v.db.addtable/testsuite/test_v_db_addtable.py
===================================================================
--- scripts/v.db.addtable/testsuite/test_v_db_addtable.py	(nonexistent)
+++ scripts/v.db.addtable/testsuite/test_v_db_addtable.py	(working copy)
@@ -0,0 +1,46 @@
+"""
+Created on Sun Jun 09 12:01:34 2018
+
+@author: Sanjeet Bhatti
+"""
+
+from grass.gunittest.case import TestCase
+from grass.gunittest.main import test
+from grass.gunittest.gmodules import SimpleModule
+
+from grass.script.core import run_command
+from grass.script.utils import decode
+
+
+class TestVDbAddTable(TestCase):
+    """Test v.db.addtable script"""
+
+    @classmethod
+    def setUpClass(cls):
+        """Copy vector."""
+        run_command('g.copy', vector='roadsmajor,myroads')
+
+    @classmethod
+    def tearDownClass(cls):
+        """Remove copied vector"""
+        run_command('g.remove', type='vector', name='myroads',
+                    flags='f')
+
+    def test_add_single_columned_table_check(self):
+        """Add a new attribute table with single column to layer 2"""
+        module = SimpleModule('v.db.addtable', map='myroads',
+                              columns='slope double precision', layer=2)
+        self.assertModule(module)
+
+        run_command('v.db.connect', flags='p', map='myroads')
+
+        m = SimpleModule('v.info', map='myroads', flags='c')
+        self.assertModule(m)
+        self.assertNotRegexpMatches(decode(m.outputs.stdout), 'slope')
+
+        m = SimpleModule('v.info', map='myroads', flags='c', layer=2)
+        self.assertModule(m)
+        self.assertRegexpMatches(decode(m.outputs.stdout), 'slope')
+
+if __name__ == '__main__':
+    test()
Index: scripts/v.db.addtable/v.db.addtable.py
===================================================================
--- scripts/v.db.addtable/v.db.addtable.py	(revision 72791)
+++ scripts/v.db.addtable/v.db.addtable.py	(working copy)
@@ -98,7 +98,7 @@
     schema = kv['schema']
 
     # maybe there is already a table linked to the selected layer?
-    nuldev = file(os.devnull, 'w')
+    nuldev = open(os.devnull, 'w')
     try:
         grass.vector_db(map_name, stderr=nuldev)[int(layer)]
         grass.fatal(_("There is already a table linked to layer <%s>") % layer)
Index: scripts/v.db.dropcolumn/testsuite/test_v_db_dropcolumn.py
===================================================================
--- scripts/v.db.dropcolumn/testsuite/test_v_db_dropcolumn.py	(nonexistent)
+++ scripts/v.db.dropcolumn/testsuite/test_v_db_dropcolumn.py	(working copy)
@@ -0,0 +1,40 @@
+"""
+Created on Sun Jun 09 01:12:22 2018
+
+@author: Sanjeet Bhatti
+"""
+
+from grass.gunittest.case import TestCase
+from grass.gunittest.main import test
+from grass.gunittest.gmodules import SimpleModule
+
+from grass.script.core import run_command
+from grass.script.utils import decode
+
+
+class TestVDbDropColumn(TestCase):
+    """Test v.db.dropcolumn script"""
+
+    @classmethod
+    def setUpClass(cls):
+        """Copy vector."""
+        run_command('g.copy', vector='roadsmajor,myroads')
+
+    @classmethod
+    def tearDownClass(cls):
+        """Remove copied vector"""
+        run_command('g.remove', type='vector', name='myroads',
+                    flags='f')
+
+    def test_drop_single_column_check(self):
+        """Drop column to the attribute table"""
+        module = SimpleModule('v.db.dropcolumn', map='myroads',
+                              columns='SHAPE_LEN')
+        self.assertModule(module)
+
+        m = SimpleModule('v.info', map='myroads', flags='c')
+        self.assertModule(m)
+        self.assertNotRegexpMatches(decode(m.outputs.stdout), 'SHAPE_LEN')
+
+if __name__ == '__main__':
+    test()
Index: scripts/v.db.droprow/testsuite/test_v_db_droprow.py
===================================================================
--- scripts/v.db.droprow/testsuite/test_v_db_droprow.py	(nonexistent)
+++ scripts/v.db.droprow/testsuite/test_v_db_droprow.py	(working copy)
@@ -0,0 +1,54 @@
+"""
+Created on Sun Jun 09 01:52:34 2018
+
+@author: Sanjeet Bhatti
+"""
+
+from grass.gunittest.case import TestCase
+from grass.gunittest.main import test
+from grass.gunittest.gmodules import SimpleModule
+
+from grass.script.core import run_command
+from grass.script.utils import decode
+
+
+class TestVDbDropRow(TestCase):
+    """Test v.db.droprow script"""
+
+    mapName = 'elevation'
+    inputMap = 'rand5k_elev'
+    outputMap = 'rand5k_elev_filt'
+    values = 'min=56.12\nmax=155.157'
+
+    @classmethod
+    def setUpClass(cls):
+        """Create maps in a small region."""
+        cls.use_temp_region()
+        cls.runModule('g.region', raster=cls.mapName, flags='p')
+
+    @classmethod
+    def tearDownClass(cls):
+        """Remove temporary region"""
+        cls.runModule('g.remove', flags='f', type='raster', name=cls.mapName)
+        cls.del_temp_region()
+
+        cls.runModule('g.remove', flags='f', type='vector',
+                      name=(cls.inputMap, cls.outputMap))
+
+    def test_drop_row_check(self):
+        """Drop vector object from a vector map"""
+        run_command('v.random', output=self.inputMap, n=5000)
+        run_command('v.db.addtable', map=self.inputMap,
+                    column="elevation double precision")
+        run_command('v.what.rast', map=self.inputMap,
+                    raster=self.mapName, column=self.mapName)
+
+        module = SimpleModule('v.db.droprow', input=self.inputMap,
+                              output=self.outputMap, where='elevation IS NULL')
+        self.assertModule(module)
+
+        self.assertVectorFitsUnivar(map=self.outputMap, column='elevation',
+                                    reference=self.values, precision=5)
+
+if __name__ == '__main__':
+    test()
Index: scripts/v.db.droptable/testsuite/test_v_db_droptable.py
===================================================================
--- scripts/v.db.droptable/testsuite/test_v_db_droptable.py	(nonexistent)
+++ scripts/v.db.droptable/testsuite/test_v_db_droptable.py	(working copy)
@@ -0,0 +1,48 @@
+"""
+Created on Sun Jun 09 09:18:39 2018
+
+@author: Sanjeet Bhatti
+"""
+
+from grass.gunittest.case import TestCase
+from grass.gunittest.main import test
+from grass.gunittest.gmodules import SimpleModule
+
+from grass.script.core import run_command
+from grass.script.utils import decode
+
+
+class TestVDbDropTable(TestCase):
+    """Test v.db.droptable script"""
+
+    @classmethod
+    def setUpClass(cls):
+        """Copy vector."""
+        run_command('g.copy', vector='roadsmajor,myroads')
+
+    @classmethod
+    def tearDownClass(cls):
+        """Remove copied vector"""
+        run_command('g.remove', type='vector', name='myroads',
+                    flags='f')
+
+    def test_drop_table_check(self):
+        """Drop table check, the column should still be in the table"""
+        module = SimpleModule('v.db.droptable', map='myroads')
+        self.assertModule(module)
+
+        m = SimpleModule('db.tables', flags='p')
+        self.assertModule(m)
+        self.assertRegexpMatches(decode(m.outputs.stdout), 'myroads')
+
+    def test_drop_table_with_force(self):
+        """Drop table with force, the column should not be in the table"""
+        module = SimpleModule('v.db.droptable', map='myroads', flags='f')
+        self.assertModule(module)
+
+        m = SimpleModule('db.tables', flags='p')
+        self.assertModule(m)
+        self.assertNotRegexpMatches(decode(m.outputs.stdout), 'myroads')
+
+if __name__ == '__main__':
+    test()
Index: scripts/v.db.join/testsuite/nc_geology.csv
===================================================================
--- scripts/v.db.join/testsuite/nc_geology.csv	(nonexistent)
+++ scripts/v.db.join/testsuite/nc_geology.csv	(working copy)
@@ -0,0 +1,47 @@
+geol_id,longname,comment
+Ccl,LOWER CHILHOWEE,"Feldspathic arenite, white to yellowish gray. Minor silty shale, feldspathic siltstone, and conglomerate in lower part. Includes Unicoi Formation of Hot Springs window"
+Ccu,UPPER CHILHOWEE,"Vitreous quartz arenite, whiteto light gray; interbedded sandy siltstone and shale. Erwin and Hampton Formations of Hot Springs window"
+Cr,ROME FORMATION,"Shale and siltstone, variegated red to brown; interbedded fine-grained sandstone and shaly dolomite"
+Cs,SHADY DOLOMITE,"Light gray, fine grained, massive, locally thin bedded or ribboned"
+CZam,AMPHIBOLITE,"Equigranular, massive to well foliated, dioritic to basaltic dikes and sills; variably metamorphosed"
+Dqd,QUARTZ DIORITE TO GRANODIORITE,"Contains biotite, muscovite, and xenocrysts. Includes Whiteside Mountain, Stone Mountain, Mount Airy, Spruce Pine, and other smaller plutons"
+Org,RABUN GNEISS,"Weakly to well foliated, granitic to quartz monzonitic"
+PzZu,META-ULTRAMAFIC ROCK,"Metamorphosed dunite, local peridotite; serpentinite, soapstone, and other altered ultramafic rock. Only larger bodies shown"
+Ybam,Amphibolite,"Equigranular, massive to well foliated, interlayered, rarely discordant, metamorphosed intrusive and extrusive mafic rock; may include metasedimenary rock"
+Ybgg,BIOTITE GRANITIC GNEISS,"Pinkish gray to light gray, massive to well foliated, granitic to quartz monzonitic; includes variably mylonitized orthogneiss and para-gneiss, interlayered amphibolite, calc-silicate rock, and marble. Includes granites of the Bryson City area, Straight Fork window, and Elk Park Plutonic Suite"
+Ygg,GRANODIORITIC GNEISS,"Greenish gray to pinkish gray, porphyroclastic to mylonitic; epidote, sericite, and chlorite common"
+Ymam,Amphibolite,"Equigranular, massive to well foliated, interlayered, rarely discordant, metamorphosed intrusive and extrusive mafic rock; may include metasedimentary rock"
+Ymg,MIGMATITIC BIOTITE-HORNBLENDE GNEISSES,"Layered biotite-granite gneiss, biotite-hornblende gneiss, amphibolite, calc-silicate rock; locally contains relict granulite facies rock"
+Ytg,TOXAWAY GNEISS,"Poorly foliated to well foliated, equigranular to inequigranular, granitic"
+Za,ANAKEESTA FORMATION,"Slate to schist, dark gray, graphitic and sulfidic; includes interbedded argillaceous, feldspathic metagraywacke"
+Zaba,Amphibolite,"Equigranular, massive to well foliated, interlayered, rarely discordant, metamorphosed intrusive and extrusive mafic rock; may include metasedimentary rock"
+Zabg,Gneiss,"Finely laminated to thin layered; locally contains massive gneiss and micaceous granule conglomerate; includes schist, phyllite and amphibolite"
+Zabs,Mica schist and phyllite,Laminated to thin layered; interlayered with minor biotite-muscovite gneiss and amphibolite
+Zata,Amphibolite,"Equigranular, massive to well foliated, interlayered, rarely discordant, metamorphosed intrusive and extrusive mafic rock; may include metasedimentary rock"
+Zatb,Biotite gneiss,"Interlayered with biotite-garnet gneiss, biotite-muscovite schist, garnet-mica schist, and amphibolite"
+Zatm,Muscovite-biotite gneiss,"Locally sulfidic, interlayered and gradational with mica schist, minor amphibolite, and hornblende gneiss"
+Zats,Mica schist,Locally sulfidic and graphitic; minor interlayered mica gneiss and amphibolite
+Zatw,Metagraywacke,"Foliated to massive. locally conglomeratic; interlayered and gradational with mica schist, muscovite-biotite gneiss, and rare graphitic schist"
+Zbg,BOYD GAP FORMATION,"Dark gray, highly-sulfidic slate and metasiltstone interbedded and gradational with metagraywacke. Stratigraphic position uncertain. In Cherokee County includes upper part of Buck Bald Formation"
+Zch,COPPERHILL FORMATION,"Metagraywacke, massive, graded bedding common; includes dark-gray slate, mica schist, and nodular calc-silicate rock"
+Zchs,SLATE OF COPPERHILL FORMATION,"Slate to phyllite, dark gray, graphitic, sulfidic; includes metagraywacke with local graded bedding"
+Zco,COWEETA GROUP,"Quartz dioritic gneiss, feldspar-quartz-biotite gneiss, metasandstone and quartzite, alumino-silicate schist, garnetiferous biotite gneiss, and minor amphibolite. Quartz dioritic gneiss predominant"
+Zd,DEAN FORMATION,"Sericite schist with cross-biotite, staurolite, and garnet porphyroblasts; interbedded metagraywacke and quartz-pebble metaconglomerate"
+Zf,PHYLLITE,"Dark olive gray, graphitic and sulfidic"
+Zg,METAMORPHOSED GRANITIC ROCK,"Massive to foliated, locally mylonitic. Beech, Crossnore, Brown Mountain, Lansing, and other granitic rocks"
+Zgs,"GREAT SMOKY GROUP, UNDIVIDED",Thick metasedimentary sequence of massive to graded beds of metagraywacke and metasiltstone with interbedded graphitic and sulfidic slate and schist
+Zhha,"METASANDSTONE, METAGRAYWACKE, METASILTSTONE. AND MICA SCHIST","Beds and lenses of calc-silicate rock locally abundant; garnet, staurolite, and cross-biotite porphyroblasts common in fine-grained layers. Includes Hughes Gap and Hothouse Formations in southern area; Horse Branch Member of Ammons Formation and Grassy Branch Formation in northern area"
+Zmf,Metafelsite,Light-colored porphyritic extrusive rock
+Zml,Metagraywacke,"Interlayered with metaconglomerate, laminated metasiltstone, and slate; minor calcareous metasandstone, greenstone, and metarhyolite"
+Zm,MAX PATCH GRANITE,"Mottled pink and light green, coarse grained to porphyritic, massive; contains biotite"
+Zrb,RICH BUTT SANDSTONE,Feldspathic; interbedded with dark argillaceous layers and laminae. Stratigraphic position uncertain
+Zsl,LONGARM QUARTZITE,"Cross-bedded. feldspathic, locally conglomeratic; includes dark slate and metasiltstone"
+Zsp,PIGEON SILTSTONE,"Thin bedded to laminated, commonly cross-bedded, metamorphosed; locally includes argillite and calcareous and ankeritic metasiltstone grading to silty metalimestone"
+Zsr,ROARING FORK SANDSTONE,"Greenish gray, fine to medium grained, locally cross-bedded, metamorphosed; interbedded metasiltstone and phyllite"
+Zs,"SNOWBIRD GROUP, UNDIVIDED","Feldspathic metasiltstone, metasandstone, and phyllite. Basal schist contains lenses of quartz-pebble conglomerate"
+Zss,SANDSUCK FORMATION,"Slate and metasiltstone, dark green to black. Metaconglomerate lentils in upper part; calcareous metasandstone, sandy metalimestone, and quartzite in lower part"
+Zsw,WADING BRANCH FORMATION,Sandy slate to coarse-grained pebbly metagraywacke with local graded bedding. Basal quartz-sericite schist or phyllite
+Zwc,"WALDEN CREEK GROUP, UNDIVIDED","Slate to metasiltstone, local limy beds and pods; interbedded with quartz-pebble metaconglomerate and metasandstone"
+Zwe,WEHUTTY FORMATION,"Slate to schist, dark gray, graphitic and sulfidic; includes mica schist, metagraywacke, and metaconglomerate"
+ZYba,Amphibolite,"Equigranular, massive to well foliated, interlayered, rarely discordant, metamorphosed intrusive and extrusive mafic rock; may include metasedimentary rock"
+ZYbn,BIOTITE GNEISS,Migmatitic; interlayered and gradational with biotite-garnet gneiss and amphibolite; locally abundant quartz and alumino-silicates. Stratigraphic position uncertain
Index: scripts/v.db.join/testsuite/test_v_db_join.py
===================================================================
--- scripts/v.db.join/testsuite/test_v_db_join.py	(nonexistent)
+++ scripts/v.db.join/testsuite/test_v_db_join.py	(working copy)
@@ -0,0 +1,45 @@
+"""
+Created on Sun Jun 09 00:35:06 2018
+
+@author: Sanjeet Bhatti
+"""
+
+from grass.gunittest.case import TestCase
+from grass.gunittest.main import test
+from grass.gunittest.gmodules import SimpleModule
+
+from grass.script.core import run_command
+
+
+class TestVDbJoin(TestCase):
+    """Test v.db.join script"""
+
+    mapName = 'mygeology'
+    output = 'nc_geology'
+    csvFile = 'nc_geology.csv'
+
+    @classmethod
+    def setUpClass(cls):
+        """Copy vector."""
+        run_command('g.copy', vector='geology,mygeology')
+
+    @classmethod
+    def tearDownClass(cls):
+        """Remove copied vector"""
+        run_command('g.remove', type='vector', name=(cls.mapName, cls.output),
+                    flags='f')
+
+    def test_join(self):
+        """Join test"""
+        run_command('db.in.ogr', input=self.csvFile, output=self.output,
+                    overwrite=True)
+
+        module = SimpleModule('v.db.join', map=self.mapName, column='GEO_NAME',
+                              other_table=self.output, other_column='geol_id')
+        self.assertModule(module)
+
+        m = SimpleModule('v.db.select', map=self.mapName)
+        self.assertModule(m)
+
+if __name__ == '__main__':
+    test()
Index: scripts/v.db.reconnect.all/testsuite/test_v_db_reconnect_all.py
===================================================================
--- scripts/v.db.reconnect.all/testsuite/test_v_db_reconnect_all.py	(nonexistent)
+++ scripts/v.db.reconnect.all/testsuite/test_v_db_reconnect_all.py	(working copy)
@@ -0,0 +1,27 @@
+"""
+Created on Sun Jun 08 23:01:45 2018
+
+@author: Sanjeet Bhatti
+"""
+
+from grass.gunittest.case import TestCase
+from grass.gunittest.main import test
+from grass.gunittest.gmodules import SimpleModule
+
+
+class TestVDbReconnectAll(TestCase):
+    """Test v.db.reconnect.all script"""
+
+    old_db = '$GISDBASE/$LOCATION_NAME/$MAPSET/dbf/'
+    new_driver = 'sqlite'
+    new_db = '$GISDBASE/$LOCATION_NAME/$MAPSET/sqlite/sqlite.db'
+
+    def test_reconnect_all(self):
+        """Reconnect DBF attribute tables"""
+        module = SimpleModule('v.db.reconnect.all', old_database=self.old_db,
+                              new_driver=self.new_driver,
+                              new_database=self.new_db)
+        self.assertModule(module)
+
+if __name__ == '__main__':
+    test()
Index: scripts/v.db.reconnect.all/v.db.reconnect.all.py
===================================================================
--- scripts/v.db.reconnect.all/v.db.reconnect.all.py	(revision 72791)
+++ scripts/v.db.reconnect.all/v.db.reconnect.all.py	(working copy)
@@ -284,5 +284,5 @@
 
 if __name__ == "__main__":
     options, flags = gscript.parser()
-    nuldev = file(os.devnull, 'w')
+    nuldev = open(os.devnull, 'w')
     sys.exit(main())
Index: scripts/v.db.renamecolumn/testsuite/test_v_db_renamecolumn.py
===================================================================
--- scripts/v.db.renamecolumn/testsuite/test_v_db_renamecolumn.py	(nonexistent)
+++ scripts/v.db.renamecolumn/testsuite/test_v_db_renamecolumn.py	(working copy)
@@ -0,0 +1,41 @@
+"""
+Created on Sun Jun 07 19:08:34 2018
+
+@author: Sanjeet Bhatti
+"""
+
+from grass.gunittest.case import TestCase
+from grass.gunittest.main import test
+from grass.gunittest.gmodules import SimpleModule
+
+from grass.script.core import run_command
+from grass.script.utils import decode
+
+
+class TestVDbRenameColumn(TestCase):
+    """Test v.db.renamecolumn script"""
+
+    @classmethod
+    def setUpClass(cls):
+        """Copy vector."""
+        run_command('g.copy', vector='roadsmajor,myroads')
+
+    @classmethod
+    def tearDownClass(cls):
+        """Remove copied vector"""
+        run_command('g.remove', type='vector', name='myroads',
+                    flags='f')
+
+    def test_rename_column(self):
+        """Renaming a column"""
+        module = SimpleModule('v.db.renamecolumn', map='myroads',
+                              column='ROAD_NAME,roadname')
+        self.assertModule(module)
+
+        m = SimpleModule('v.info', flags='c', map='myroads')
+        self.assertModule(m)
+        self.assertRegexpMatches(decode(m.outputs.stdout), 'roadname')
+        self.assertNotRegexpMatches(decode(m.outputs.stdout), 'ROAD_NAME')
+
+if __name__ == '__main__':
+    test()
Index: scripts/v.db.univar/testsuite/test_v_db_univar.py
===================================================================
--- scripts/v.db.univar/testsuite/test_v_db_univar.py	(nonexistent)
+++ scripts/v.db.univar/testsuite/test_v_db_univar.py	(working copy)
@@ -0,0 +1,47 @@
+"""
+Created on Sun Jun 08 19:08:07 2018
+
+@author: Sanjeet Bhatti
+"""
+
+from grass.gunittest.case import TestCase
+from grass.gunittest.main import test
+from grass.gunittest.gmodules import SimpleModule
+
+from grass.script.core import run_command
+
+
+class TestVDbUnivar(TestCase):
+    """Test v.db.univar script"""
+
+    mapName = 'elevation'
+    columnName = 'heights'
+    outputMap = 'samples'
+
+    @classmethod
+    def setUpClass(cls):
+        """Use temp region"""
+        cls.use_temp_region()
+        cls.runModule('g.region', raster=cls.mapName, flags='p')
+
+    @classmethod
+    def tearDownClass(cls):
+        """Remove temporary region"""
+        cls.runModule('g.remove', flags='f', type='raster', name=cls.mapName)
+        cls.del_temp_region()
+
+    def test_calculate(self):
+        """run db.univar"""
+        run_command('v.random', output=self.outputMap, n=100, overwrite='True')
+        run_command('v.db.addtable', map=self.outputMap,
+                    column="heights double precision")
+        run_command('v.what.rast', map=self.outputMap, raster=self.mapName,
+                    column=self.columnName)
+        run_command('v.db.select', map=self.outputMap)
+
+        module = SimpleModule('v.db.univar', map=self.outputMap,
+                              column=self.columnName)
+        self.assertModule(module)
+
+if __name__ == '__main__':
+    test()
Index: scripts/v.db.univar/v.db.univar.py
===================================================================
--- scripts/v.db.univar/v.db.univar.py	(revision 72791)
+++ scripts/v.db.univar/v.db.univar.py	(working copy)
@@ -101,5 +101,5 @@
 
 if __name__ == "__main__":
     options, flags = gscript.parser()
-    nuldev = file(os.devnull, 'w')
+    nuldev = open(os.devnull, 'w')
     main()
Index: scripts/v.db.update/testsuite/test_v_db_update.py
===================================================================
--- scripts/v.db.update/testsuite/test_v_db_update.py	(nonexistent)
+++ scripts/v.db.update/testsuite/test_v_db_update.py	(working copy)
@@ -0,0 +1,41 @@
+"""
+Created on Sun Jun 08 22:14:26 2018
+
+@author: Sanjeet Bhatti
+"""
+
+from grass.gunittest.case import TestCase
+from grass.gunittest.main import test
+from grass.gunittest.gmodules import SimpleModule
+
+from grass.script.core import run_command
+
+
+class TestVDbUpdate(TestCase):
+    """Test v.db.update script"""
+
+    mapName = 'mygeodetic_pts'
+
+    @classmethod
+    def setUpClass(cls):
+        """Copy vect"""
+        run_command('g.copy', vector='geodetic_pts,mygeodetic_pts')
+
+    @classmethod
+    def tearDownClass(cls):
+        """Remove vector"""
+        run_command('v.db.dropcolumn', map=cls.mapName, columns="zval")
+        run_command('g.remove', flags='f', type='vector', name=cls.mapName)
+
+    def test_update(self):
+        """update value test"""
+        run_command('v.db.addcolumn', map=self.mapName,
+                    column="zval double precision")
+
+        module = SimpleModule('v.db.update', map=self.mapName, column='zval',
+                              query_column="CAST(z_value AS double precision)",
+                              where="z_value <> 'N/A'")
+        self.assertModule(module)
+
+if __name__ == '__main__':
+    test()
Index: scripts/v.dissolve/testsuite/test_v_dissolve.py
===================================================================
--- scripts/v.dissolve/testsuite/test_v_dissolve.py	(nonexistent)
+++ scripts/v.dissolve/testsuite/test_v_dissolve.py	(working copy)
@@ -0,0 +1,40 @@
+"""
+Created on Sun Jun 08 23:58:10 2018
+
+@author: Sanjeet Bhatti
+"""
+
+from grass.gunittest.case import TestCase
+from grass.gunittest.main import test
+from grass.gunittest.gmodules import SimpleModule
+
+from grass.script.core import run_command
+
+
+class TestVDissolve(TestCase):
+    """Test v.dissolve script"""
+
+    mapName = 'mysoils_general'
+    outputName = 'mysoils_general_families'
+
+    @classmethod
+    def setUpClass(cls):
+        """Copy vect"""
+        run_command('g.copy', vector='soils_general,mysoils_general')
+
+    @classmethod
+    def tearDownClass(cls):
+        """Remove vector"""
+        run_command('g.remove', flags='f', type='vector',
+                    name=(cls.mapName, cls.outputName))
+
+    def test_dissolve(self):
+        """dissolve test"""
+        module = SimpleModule('v.dissolve', input=self.mapName,
+                              output=self.outputName, column='GSL_NAME')
+        self.assertModule(module)
+
+        self.assertVectorExists(self.outputName)
+
+if __name__ == '__main__':
+    test()
Index: scripts/v.dissolve/v.dissolve.py
===================================================================
--- scripts/v.dissolve/v.dissolve.py	(revision 72791)
+++ scripts/v.dissolve/v.dissolve.py	(working copy)
@@ -46,7 +46,7 @@
 
 
 def cleanup():
-    nuldev = file(os.devnull, 'w')
+    nuldev = open(os.devnull, 'w')
     grass.run_command(
         'g.remove', flags='f', type='vector', name='%s_%s' %
         (output, tmp), quiet=True, stderr=nuldev)
Index: scripts/v.in.e00/v.in.e00.py
===================================================================
--- scripts/v.in.e00/v.in.e00.py	(revision 72791)
+++ scripts/v.in.e00/v.in.e00.py	(working copy)
@@ -109,14 +109,14 @@
     if merging:
         files.sort()
         filename = "%s.cat.%s.e00" % (e00name, e00tmp)
-        outf = file(filename, 'wb')
+        outf = open(filename, 'wb')
         for f in files:
-            inf = file(f, 'rb')
+            inf = open(f, 'rb')
             shutil.copyfileobj(inf, outf)
             inf.close()
         outf.close()
 
-    nuldev = file(os.devnull, 'w+')
+    nuldev = open(os.devnull, 'w+')
 
     gcore.message(_("An error may appear next which will be ignored..."))
     if gcore.call(['avcimport', filename, e00shortname], stdout=nuldev,
Index: scripts/v.in.lines/testsuite/data.txt
===================================================================
--- scripts/v.in.lines/testsuite/data.txt	(nonexistent)
+++ scripts/v.in.lines/testsuite/data.txt	(working copy)
@@ -0,0 +1,12 @@
+167.846717,-46.516653
+167.846663,-46.516645
+167.846656,-46.516644
+167.846649,-46.516644
+167.846642,-46.516643
+NaN,NaN
+167.846520,-46.516457
+167.846528,-46.516461
+167.846537,-46.516464
+167.846535,-46.516486
+167.846544,-46.516489
+167.846552,-46.516493
\ No newline at end of file
Index: scripts/v.in.lines/testsuite/test_v_in_lines.py
===================================================================
--- scripts/v.in.lines/testsuite/test_v_in_lines.py	(nonexistent)
+++ scripts/v.in.lines/testsuite/test_v_in_lines.py	(working copy)
@@ -0,0 +1,38 @@
+"""
+Created on Sun Jun 09 09:59:17 2018
+
+@author: Sanjeet Bhatti
+"""
+
+from grass.gunittest.case import TestCase
+from grass.gunittest.main import test
+from grass.gunittest.gmodules import SimpleModule
+
+
+class TestVDInLines(TestCase):
+    """Test v.in.lines script"""
+
+    inputFile = 'data.txt'
+    outputMap = 'two_lines'
+
+    @classmethod
+    def setUpClass(cls):
+        """Copy vector."""
+        pass
+
+    @classmethod
+    def tearDownClass(cls):
+        """Remove created vector"""
+        cls.runModule('g.remove', type='vector', name=cls.outputMap,
+                      flags='f')
+
+    def test_v_in_lines_check(self):
+        """v in lines test"""
+        module = SimpleModule('v.in.lines', input=self.inputFile,
+                              output=self.outputMap, separator=',')
+        self.assertModule(module)
+
+        self.assertVectorExists(self.outputMap)
+
+if __name__ == '__main__':
+    test()
Index: scripts/v.in.lines/v.in.lines.py
===================================================================
--- scripts/v.in.lines/v.in.lines.py	(revision 72791)
+++ scripts/v.in.lines/v.in.lines.py	(working copy)
@@ -77,7 +77,7 @@
 
     if not infile:
         # read from stdin and write to tmpfile (v.in.mapgen wants a real file)
-        outf = file(tmp, 'w')
+        outf = open(tmp, 'w')
         for line in inf:
             if len(line.lstrip()) == 0 or line[0] == '#':
                 continue
@@ -90,8 +90,8 @@
         if fs == ' ':
             runfile = infile
         else:
-            inf = file(infile)
-            outf = file(tmp, 'w')
+            inf = open(infile)
+            outf = open(tmp, 'w')
 
             for line in inf:
                 if len(line.lstrip()) == 0 or line[0] == '#':
@@ -103,7 +103,7 @@
             runfile = tmp
 
     # check that there are at least two columns (three if -z is given)
-    inf = file(runfile)
+    inf = open(runfile)
     for line in inf:
         if len(line.lstrip()) == 0 or line[0] == '#':
             continue
Index: scripts/v.in.mapgen/v.in.mapgen.py
===================================================================
--- scripts/v.in.mapgen/v.in.mapgen.py	(revision 72791)
+++ scripts/v.in.mapgen/v.in.mapgen.py	(working copy)
@@ -95,8 +95,8 @@
     tmp = grass.tempfile()
 
     # create ascii vector file
-    inf = file(infile)
-    outf = file(tmp, 'w')
+    inf = open(infile)
+    outf = open(tmp, 'w')
 
     grass.message(_("Importing data..."))
     cat = 1
@@ -163,7 +163,7 @@
 
     # create digit header
     digfile = tmp + '.dig'
-    outf = file(digfile, 'w')
+    outf = open(digfile, 'w')
     t = string.Template(
         """ORGANIZATION: GRASSroots organization
 DIGIT DATE:   $date
@@ -186,7 +186,7 @@
     outf.write(s)
 
     # process points list to ascii vector file (merge in vertices)
-    inf = file(tmp)
+    inf = open(tmp)
     shutil.copyfileobj(inf, outf)
     inf.close()
 
@@ -194,7 +194,7 @@
 
     if not name:
         # if no name for vector file given, cat to stdout
-        inf = file(digfile)
+        inf = open(digfile)
         shutil.copyfileobj(inf, sys.stdout)
         inf.close()
     else:
Index: scripts/v.in.wfs/v.in.wfs.py
===================================================================
--- scripts/v.in.wfs/v.in.wfs.py	(revision 72791)
+++ scripts/v.in.wfs/v.in.wfs.py	(working copy)
@@ -138,7 +138,7 @@
         grass.fatal(_("Failed to reach the server.\nReason: %s") % e.reason)
         
     
-    outf = file(tmpxml, 'wb')
+    outf = open(tmpxml, 'wb')
     while True:
         s = inf.read()
         if not s:
Index: scripts/v.pack/testsuite/test_v_pack.py
===================================================================
--- scripts/v.pack/testsuite/test_v_pack.py	(nonexistent)
+++ scripts/v.pack/testsuite/test_v_pack.py	(working copy)
@@ -0,0 +1,46 @@
+"""
+Created on Sun Jun 08 23:19:09 2018
+
+@author: Sanjeet Bhatti
+"""
+
+from grass.gunittest.case import TestCase
+from grass.gunittest.main import test
+from grass.gunittest.gmodules import SimpleModule
+
+import os
+
+
+class TestVPack(TestCase):
+    """Test v.pack script"""
+
+    mapName = 'roadsmajor'
+    outFile = 'roadsmajor.pack'
+
+    @classmethod
+    def setUpClass(cls):
+        """Create maps in a small region."""
+        cls.use_temp_region()
+        cls.runModule('g.region', vector=cls.mapName, flags='p')
+
+    @classmethod
+    def tearDownClass(cls):
+        """Remove temporary region"""
+        cls.runModule('g.remove', flags='f', type='vector', name=cls.mapName)
+        cls.del_temp_region()
+
+        cls.runModule('v.unpack', input=cls.outFile)
+
+        if (os.path.isfile(cls.outFile)):
+            os.remove(cls.outFile)
+
+    def test_v_pack(self):
+        """Create a pack file test"""
+        module = SimpleModule('v.pack', input=self.mapName,
+                              output=self.outFile)
+        self.assertModule(module)
+
+        self.assertFileExists(filename=self.outFile)
+
+if __name__ == '__main__':
+    test()
Index: scripts/v.rast.stats/v.rast.stats.py
===================================================================
--- scripts/v.rast.stats/v.rast.stats.py	(revision 72791)
+++ scripts/v.rast.stats/v.rast.stats.py	(working copy)
@@ -72,6 +72,7 @@
 import os
 import atexit
 import grass.script as grass
+from grass.script.utils import decode
 from grass.exceptions import CalledModuleError
 
 # i18N
@@ -96,7 +97,7 @@
     # we need a random name
     tmpname = grass.basename(tmp)
 
-    nuldev = file(os.devnull, 'w')
+    nuldev = open(os.devnull, 'w')
 
     raster = options['raster']
     colprefix = options['column_prefix']
@@ -152,6 +153,7 @@
     cats = []
 
     for line in p.stdout:
+        line = decode(line)
         cats.append(line.rstrip('\r\n').split(';')[0])
     p.wait()
 
@@ -247,7 +249,7 @@
     # get rid of any earlier attempts
     grass.try_remove(sqltmp)
 
-    f = file(sqltmp, 'w')
+    f = open(sqltmp, 'w')
 
     # do the stats
     p = grass.pipe_command('r.univar', flags='t' + extstat, map=raster,
@@ -261,7 +263,7 @@
             first_line = 0
             continue
 
-        vars = line.rstrip('\r\n').split(';')
+        vars = decode(line).rstrip('\r\n').split(';')
 
         f.write("UPDATE %s SET" % fi['table'])
         first_var = 1
Index: scripts/v.report/testsuite/data.txt
===================================================================
--- scripts/v.report/testsuite/data.txt	(nonexistent)
+++ scripts/v.report/testsuite/data.txt	(working copy)
@@ -0,0 +1,45 @@
+cat|OBJECTID|WAKE_ZIPCO|PERIMETER|ZIPCODE_|ZIPCODE_ID|ZIPNAME|ZIPNUM|ZIPCODE|NAME|SHAPE_Leng|SHAPE_Area|area
+1|1|262493461.286|80746.40038|2|27|CREEDMOOR|27522|CREEDMOOR 27522|CREEDMOOR|80777.650719|262372872.587|2437.53231278035
+2|2|31634621.1616|31064.35816|7|25|YOUNGSVILLE|27596|YOUNGSVILLE 27596|YOUNGSVILLE|31064.35845|31634622.1247|293.896432048061
+3|3|543964359.138|115252.44443|8|20|RALEIGH|27615|RALEIGH 27615|RALEIGH|115252.443861|543964358.996|5053.61542941077
+4|4|58736529.666|36836.75795|10|26|YOUNGSVILLE|27596|YOUNGSVILLE 27596|YOUNGSVILLE|36836.756996|58736530.8791|545.681548844361
+5|7|12788390.3938|32416.21157|15|157|DURHAM|27703|DURHAM 27703|DURHAM|30664.931929|12593277.3902|116.906610607967
+6|8|602469071.217|147112.36983|18|8|RALEIGH|27616|RALEIGH 27616|RALEIGH|147116.461058|602468668.316|5597.16187916719
+7|11|402520600.739|128456.89917|23|35|RALEIGH|27612|RALEIGH 27612|RALEIGH|128260.956758|402143653.823|3735.99083479836
+8|12|1319493933.22|252236.30916|24|9|WENDELL|27591|WENDELL 27591|WENDELL|252265.618847|1319493242|12258.5299612302
+9|13|313832905.094|80405.41507|25|19|RALEIGH|27609|RALEIGH 27609|RALEIGH|80405.413149|313832904.304|2915.61008490605
+10|14|632112227.725|154800.00031|28|15|RALEIGH|27604|RALEIGH 27604|RALEIGH|154801.611532|632113047.308|5872.54890089757
+11|15|873704032.742|198415.75507|29|22|KNIGHTDALE|27545|KNIGHTDALE 27545|KNIGHTDALE|207888.12556|854234759.151|7936.13127502539
+12|17|86718740.3594|47692.08248|34|1|RALEIGH|27608|RALEIGH 27608|RALEIGH|47692.081615|86718740.3587|805.649460196298
+13|19|1174353723.71|250639.52409|36|23|RALEIGH|27610|RALEIGH 27610|RALEIGH|260100.365867|1193825267.82|11091.0429399
+14|21|25495827.4688|25606.12087|38|2|RALEIGH|27605|RALEIGH 27605|RALEIGH|25606.118579|25495829.7998|236.864957031583
+15|23|48955772.0156|33100.96362|41|21|RALEIGH|27601|RALEIGH 27601|RALEIGH|33100.961138|48955771.7285|454.815936979609
+16|24|672983954.444|137789.66922|42|18|APEX|27502|APEX 27502|APEX|138402.016283|671745658.098|6240.75717514489
+17|25|1096882081.34|195776.53228|43|24|GARNER|27529|GARNER 27529|GARNER|195766.214382|1096940045.19|10190.9096697667
+18|26|785094011.315|125961.78982|45|4|NEW HILL|27562|NEW HILL 27562|NEW HILL|125964.20281|785117168.913|7293.96582281196
+19|27|74573603.2444|53026.74139|46|76|CLAYTON|27520|CLAYTON 27520|CLAYTON|53026.741222|74573603.668|692.840075781924
+20|29|14013604.9607|20227.39179|50|146|FUQUAY VARINA|27526|FUQUAY VARINA 27526|FUQUAY VARINA|20236.211152|14013892.9812|130.183906990786
+21|30|10825001.4179|18741.09609|51|5|WILLOW SPRING|27592|WILLOW SPRING 27592|WILLOW SPRING|18774.411343|10826786.022|100.594093362751
+22|32|595065.85534|3225.47552|53|147|ANGIER|27501|ANGIER 27501|ANGIER|3221.281589|594306.673565|5.52131175184301
+23|33|880659423.548|230219.75758|44|11|APEX|27539|APEX 27539|APEX|10758.608766|3709374.42305|34.4611971887922
+24|36|607850854.951|135414.36225|6|149|RALEIGH|27613|RALEIGH 27613|RALEIGH|135135.145707|610078059.502|5667.91258118316
+25|39|118820937.008|55979.83097|9|3|ROLESVILLE|27571|ROLESVILLE 27571|ROLESVILLE|60467.130446|128973370.856|1198.19931636245
+26|40|821009204.045|192414.44366|5|12|RALEIGH|27614|RALEIGH 27614|RALEIGH|193326.052701|821170463.631|7628.95617037341
+27|45|246107221.69|98230.55446|14|28|RALEIGH|27617|RALEIGH 27617|RALEIGH|96973.596277|242589284.931|2253.81817443235
+28|54|1380544316.71|223529.01406|13|14|ZEBULON|27597|ZEBULON 27597|ZEBULON|229111.795818|1389077516.66|12905.0077061186
+29|114|595719341.254|135382.61154|40|10|CARY|27518|CARY 27518|CARY|118402.346061|275997437.908|2564.07806207665
+30|212|352353219.773|137980.26455|35|18|APEX|27523|APEX 27523|APEX|126164.348014|325402958.569|3023.13341303491
+31|219|13347044.5484|17858.88115|52|147|ANGIER|27501|ANGIER 27501|ANGIER|20517.250079|16785459.3838|155.938983598546
+32|222|670507534.879|180573.69876|49|5|WILLOW SPRING|27592|WILLOW SPRING 27592|WILLOW SPRING|183229.723255|667072962.625|6197.33763122943
+33|231|897980333.539|201783.43174|47|6|HOLLY SPRINGS|27540|HOLLY SPRINGS 27540|HOLLY SPRINGS|232065.063395|914275342.706|8493.88834301634
+34|236|880659423.548|230219.75758|44|11|APEX|27539|APEX 27539|APEX|251643.611051|892646046.022|8292.96937628262
+35|244|595719341.254|135382.61154|40|10|CARY|27511|CARY 27511|CARY|88289.696983|325536306.021|3024.34350839371
+36|260|490635823.637|134946.66576|27|18|CARY|27519|CARY 27519|CARY|129180.587307|564062896.506|5240.38535324116
+37|275|2825789004.85|465259.10126|3|13|WAKE FOREST|27587|WAKE FOREST 27587|WAKE FOREST|477264.995577|2806740621.72|26075.6049760801
+38|276|504275401.693|157917.82636|30|18|CARY|27513|CARY 27513|CARY|164487.956602|509387886.317|4732.35211121798
+39|282|679964927.93|203429.0581|22|34|RALEIGH|27607|RALEIGH 27607|RALEIGH|182366.287225|552333204.751|5131.37138909183
+40|286|1285870010.66|282815.79339|37|66|RALEIGH|27603|RALEIGH 27603|RALEIGH|285693.495599|1408742751.36|13087.5884223387
+41|288|526570086.386|173734.20912|19|33|MORRISVILLE|27560|MORRISVILLE 27560|MORRISVILLE|169015.912917|643660203.58|5979.8016861835
+42|298|829874917.625|230773.26059|39|2|RALEIGH|27606|RALEIGH 27606|RALEIGH|212707.32257|679989401.948|6316.93565274211
+43|301|1073274000.75|252721.8937|48|7|FUQUAY VARINA|27526|FUQUAY VARINA 27526|FUQUAY VARINA|270514.968365|1061355345.52|9860.60875818323
+44|196|44695436.7135|43678.90844|26|150|DURHAM|27713|DURHAM 27713|DURHAM|19049.668725|7833481.75676|72.7592902311112
Index: scripts/v.report/testsuite/test_v_report.py
===================================================================
--- scripts/v.report/testsuite/test_v_report.py	(nonexistent)
+++ scripts/v.report/testsuite/test_v_report.py	(working copy)
@@ -0,0 +1,51 @@
+"""
+Created on Sun Jun 09 10:11:28 2018
+
+@author: Sanjeet Bhatti
+"""
+
+from grass.gunittest.case import TestCase
+from grass.gunittest.main import test
+from grass.gunittest.gmodules import SimpleModule
+
+from grass.script.utils import decode
+
+import os
+
+
+class TestVReport(TestCase):
+    """Test v.report script"""
+
+    mapName = 'zipcodes_wake'
+    dataFile = 'data.txt'
+    outputFile = 'out.txt'
+
+    @classmethod
+    def setUpClass(cls):
+        """setup"""
+        cls.use_temp_region()
+        cls.runModule('g.region', vector=cls.mapName, flags='p')
+
+    @classmethod
+    def tearDownClass(cls):
+        """Remove temporary region. Remove created file"""
+        cls.runModule('g.remove', flags='f', type='vector', name=cls.mapName)
+        cls.del_temp_region()
+
+        if (os.path.isfile(cls.outputFile)):
+            os.remove(cls.outputFile)
+
+    def test_report(self):
+        """generates a report"""
+        module = SimpleModule('v.report', map=self.mapName, option='area',
+                              units='hectares')
+        self.assertModule(module)
+
+        f = open(self.outputFile, 'w')
+        f.write(decode(module.outputs.stdout))
+        f.close()
+
+        self.assertFilesEqualMd5(self.outputFile, self.dataFile)
+
+if __name__ == '__main__':
+    test()
Index: scripts/v.report/v.report.py
===================================================================
--- scripts/v.report/v.report.py	(revision 72791)
+++ scripts/v.report/v.report.py	(working copy)
@@ -46,6 +46,7 @@
 import sys
 import os
 import grass.script as grass
+from grass.script.utils import decode
 
 # i18N
 import gettext
@@ -68,7 +69,7 @@
     layer = options['layer']
     units = options['units']
 
-    nuldev = file(os.devnull, 'w')
+    nuldev = open(os.devnull, 'w')
 
     if not grass.find_file(mapname, 'vector')['file']:
         grass.fatal(_("Vector map <%s> not found") % mapname)
@@ -99,7 +100,7 @@
         records1 = []
         catcol = -1
         for line in p.stdout:
-            cols = line.rstrip('\r\n').split('|')
+            cols = decode(line).rstrip('\r\n').split('|')
             if catcol == -1:
                 for i in range(0, len(cols)):
                     if cols[i] == f['key']:
@@ -132,7 +133,7 @@
                                layer=layer, units=unitsp)
         records2 = []
         for line in p.stdout:
-            fields = line.rstrip('\r\n').split('|')
+            fields = decode(line).rstrip('\r\n').split('|')
             if fields[0] in ['cat', '-1', '0']:
                 continue
             records2.append([int(fields[0])] + fields[1:])
@@ -144,13 +145,15 @@
         # v.db.select can return attributes that are not linked to features.
         records3 = []
         for r2 in records2:
-            records3.append(filter(lambda r1: r1[catcol] == r2[0], records1)[0] + r2[1:])
+            res = list(filter(lambda r1: r1[catcol] == r2[0],
+                              records1))[0] + r2[1:]
+            records3.append(res)
     else:
         catcol = 0
         records1 = []
         p = grass.pipe_command('v.category', inp=mapname, layer=layer, option='print')
         for line in p.stdout:
-            field = int(line.rstrip())
+            field = int(decode(line).rstrip())
             if field > 0:
                 records1.append(field)
         p.wait()
@@ -163,7 +166,7 @@
                                layer=layer, units=unitsp)
         records3 = []
         for line in p.stdout:
-            fields = line.rstrip('\r\n').split('|')
+            fields = decode(line).rstrip('\r\n').split('|')
             if fields[0] in ['cat', '-1', '0']:
                 continue
             records3.append([int(fields[0])] + fields[1:])
Index: scripts/v.to.lines/testsuite/test_v_to_lines.py
===================================================================
--- scripts/v.to.lines/testsuite/test_v_to_lines.py	(nonexistent)
+++ scripts/v.to.lines/testsuite/test_v_to_lines.py	(working copy)
@@ -0,0 +1,49 @@
+"""
+Created on Sun Jun 09 12:28:03 2018
+
+@author: Sanjeet Bhatti
+"""
+
+from grass.gunittest.case import TestCase
+from grass.gunittest.main import test
+from grass.gunittest.gmodules import SimpleModule
+
+
+class TestVDToLines(TestCase):
+    """Test v.to.lines script"""
+
+    inputMap = 'boundary_municp'
+    outputMap = 'boundary_municp_lines'
+
+    inputMap2 = 'geodetic_pts'
+    outputMap2 = 'geodetic_pts_lines'
+
+    @classmethod
+    def setUpClass(cls):
+        """setup"""
+        pass
+
+    @classmethod
+    def tearDownClass(cls):
+        """Remove created vector"""
+        cls.runModule('g.remove', type='vector', name=(cls.outputMap,
+                      cls.outputMap2), flags='f')
+
+    def test_area_to_line_check(self):
+        """Area to line conversion test"""
+        module = SimpleModule('v.to.lines', input=self.inputMap,
+                              output=self.outputMap)
+        self.assertModule(module)
+
+        self.assertVectorExists(self.outputMap)
+
+    def test_point_to_line_check(self):
+        """Point to line conversion test"""
+        module = SimpleModule('v.to.lines', input=self.inputMap2,
+                              output=self.outputMap2)
+        self.assertModule(module)
+
+        self.assertVectorExists(self.outputMap2)
+
+if __name__ == '__main__':
+    test()
Index: scripts/v.unpack/testsuite/test_v_unpack.py
===================================================================
--- scripts/v.unpack/testsuite/test_v_unpack.py	(nonexistent)
+++ scripts/v.unpack/testsuite/test_v_unpack.py	(working copy)
@@ -0,0 +1,43 @@
+"""
+Created on Sun Jun 08 12:50:45 2018
+
+@author: Sanjeet Bhatti
+"""
+
+from grass.gunittest.case import TestCase
+from grass.gunittest.main import test
+from grass.gunittest.gmodules import SimpleModule
+
+import os
+
+
+class TestVUnpack(TestCase):
+    """Test v.unpack script"""
+
+    mapName = 'roadsmajor'
+    packFile = 'roadsmajor.pack'
+
+    @classmethod
+    def setUpClass(cls):
+        """Create maps in a small region."""
+        cls.use_temp_region()
+        cls.runModule('g.region', vector=cls.mapName, flags='p')
+
+        cls.runModule('v.pack', input=cls.mapName, output=cls.packFile)
+
+    @classmethod
+    def tearDownClass(cls):
+        """Remove temporary region"""
+        cls.runModule('g.remove', flags='f', type='vector', name=cls.mapName)
+        cls.del_temp_region()
+
+        if (os.path.isfile(cls.packFile)):
+            os.remove(cls.packFile)
+
+    def test_v_pack(self):
+        """Unpack file test"""
+        module = SimpleModule('v.unpack', input=self.packFile, overwrite=True)
+        self.assertModule(module)
+
+if __name__ == '__main__':
+    test()
Index: scripts/v.what.strds/testsuite/test_what_strds.py
===================================================================
--- scripts/v.what.strds/testsuite/test_what_strds.py	(revision 72791)
+++ scripts/v.what.strds/testsuite/test_what_strds.py	(working copy)
@@ -10,8 +10,10 @@
 """
 
 from grass.gunittest.case import TestCase
+from grass.gunittest.main import test
 from grass.gunittest.gmodules import SimpleModule
 import grass.script as gscript
+from grass.script.utils import decode
 
 
 class TestWhatStrds(TestCase):
@@ -63,8 +65,7 @@
 2|100|200|300|400
 3|100|200|300|400
 """
-        self.assertLooksLike(output, db_sel.outputs.stdout)
+        self.assertMultiLineEqual(output, decode(db_sel.outputs.stdout))
 
 if __name__ == '__main__':
-    from grass.gunittest.main import test
     test()
Index: scripts/v.what.vect/testsuite/test_v_what_vect.py
===================================================================
--- scripts/v.what.vect/testsuite/test_v_what_vect.py	(nonexistent)
+++ scripts/v.what.vect/testsuite/test_v_what_vect.py	(working copy)
@@ -0,0 +1,45 @@
+"""
+Created on Sun Jun 09 11:42:54 2018
+
+@author: Sanjeet Bhatti
+"""
+
+from grass.gunittest.case import TestCase
+from grass.gunittest.main import test
+from grass.gunittest.gmodules import SimpleModule
+
+from grass.script.core import run_command
+from grass.script.utils import decode
+
+
+class TestVWhatVect(TestCase):
+    """Test v.what.vect script"""
+
+    mapName = 'myhospitals'
+
+    @classmethod
+    def setUpClass(cls):
+        """setup"""
+        run_command('g.copy', vector='hospitals,myhospitals')
+
+    @classmethod
+    def tearDownClass(cls):
+        """Remove created vector"""
+        cls.runModule('g.remove', type='vector', name=cls.mapName, flags='f')
+
+    def test_what_vect(self):
+        """Uploads vector values"""
+        run_command('v.db.addcolumn', map=self.mapName,
+                    columns="urb_name varchar(25)")
+
+        module = SimpleModule('v.what.vect', map=self.mapName,
+                              query_map='urbanarea', column='urb_name',
+                              query_column='NAME')
+        self.assertModule(module)
+
+        m = SimpleModule('v.db.select', map=self.mapName)
+        self.assertModule(m)
+        self.assertRegexpMatches(decode(m.outputs.stdout), 'urb_name')
+
+if __name__ == '__main__':
+    test()
